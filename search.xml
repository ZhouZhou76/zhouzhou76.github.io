<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS新特性</title>
    <url>/2021/06/09/CSS_New_features/</url>
    <content><![CDATA[<h1 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h1><p>CSS自定义属性(也称为”CSS变量”),在目前所有的现代浏览器都得到了支持。</p>
<h2 id="定义与使用"><a href="#定义与使用" class="headerlink" title="定义与使用"></a>定义与使用</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    --<span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">background</span> : <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    --number : <span class="number">100px</span>;</span><br><span class="line">    --number2 : <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">width</span> : <span class="built_in">var</span>(--number); // 正常显示</span><br><span class="line">    <span class="attribute">height</span> : <span class="built_in">calc</span>(<span class="built_in">var</span>(--number2) * <span class="number">1px</span>); // 需要配合calc使用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    <span class="comment">/* --size : 50px; */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span> : <span class="built_in">var</span>(--size , <span class="number">100px</span>); // 当size找不到会以<span class="number">100px</span>为默认值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    --<span class="attribute">color</span> : yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    --<span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    --<span class="attribute">color</span> : blue;</span><br><span class="line">    <span class="attribute">background</span> : <span class="built_in">var</span>(--color); // 就近原则和选择器优先级</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="shapes"><a href="#shapes" class="headerlink" title="shapes"></a>shapes</h1><p>CSS shapes布局可以实现不规则的文字环绕效果,需要和浮动配合使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #parent &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">        margin: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #shape &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        padding: 10px;</span><br><span class="line">        border: 10px solid black;</span><br><span class="line">        margin: 10px;</span><br><span class="line">        float: left;</span><br><span class="line">        background: red;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        clip-path: polygon(0 0, 0 100px, 100px 100px); &#x2F;&#x2F; 剪切路径</span><br><span class="line">        shape-outside: polygon(0 0, 0 100px, 100px 100px); &#x2F;&#x2F; 环绕效果 none margin-box border-box padding-box content-box</span><br><span class="line">        shape-margin: 15px; &#x2F;&#x2F; 环绕的距离</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;shape&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        CSS shapes布局可以实现不规则的文字环绕效果,需要和浮动配合使用。</span><br><span class="line">        CSS shapes布局可以实现不规则的文字环绕效果,需要和浮动配合使用。</span><br><span class="line">        CSS shapes布局可以实现不规则的文字环绕效果,需要和浮动配合使用。</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="scrollbar"><a href="#scrollbar" class="headerlink" title="scrollbar"></a>scrollbar</h1><p>CSS scrollbar用于实现自定义滚动条</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">2000px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">html</span>::-webkit-scrollbar &#123;</span><br><span class="line">        width: <span class="number">10px</span>;</span><br><span class="line">        <span class="comment">/* height: 1px; */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">html</span>::-webkit-scrollbar-thumb &#123;</span><br><span class="line">        background: <span class="number">#f90</span>;</span><br><span class="line">        <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">html</span>::-webkit-scrollbar-track &#123;</span><br><span class="line">        background: <span class="number">#dedede</span>;</span><br><span class="line">        <span class="attribute">box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> gray;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="Scroll-Snap"><a href="#Scroll-Snap" class="headerlink" title="Scroll Snap"></a>Scroll Snap</h1><p>CSS Scroll Snap(CSS 滚动捕捉)可以在用户完成滚动后多锁定特定的元素或位置。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    ul &#123;</span><br><span class="line">        list-style: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #main &#123;</span><br><span class="line">        width: 600px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        border: 1px black solid;</span><br><span class="line">        margin: 100px;</span><br><span class="line">        overflow: auto;</span><br><span class="line">        scroll-snap-type: x mandatory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #main ul &#123;</span><br><span class="line">        width: 4000px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #main li &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: red;</span><br><span class="line">        float: left;</span><br><span class="line">        margin: 0 100px;</span><br><span class="line">        scroll-snap-align: end;</span><br><span class="line">        &#x2F;* start center end *&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;main&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;1&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;2&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;3&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;4&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;5&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML+CSS练手小功能</title>
    <url>/2021/04/24/CSS%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%BA%9B%E6%95%88%E6%9E%9C/</url>
    <content><![CDATA[<h3 id="边框实现三角形"><a href="#边框实现三角形" class="headerlink" title="边框实现三角形"></a>边框实现三角形</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div &#123;</span><br><span class="line">        width: 0px;</span><br><span class="line">        height: 0px;</span><br><span class="line">        border: 30px solid;</span><br><span class="line">        border-color: transparent transparent red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="盒子模型嵌套"><a href="#盒子模型嵌套" class="headerlink" title="盒子模型嵌套"></a>盒子模型嵌套</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #box1 &#123;width: 350px;height: 350px;border: 1px black dashed;padding: 27px;&#125;</span><br><span class="line">    #box2 &#123;border: 5px #d7efd7 solid;padding: 20px;&#125;</span><br><span class="line">    #box3 &#123;background: #ffa0df;padding: 41px;&#125;</span><br><span class="line">    #box4 &#123;border: 1px white dashed;padding: 3px;&#125;</span><br><span class="line">    #box5 &#123;border: 1px white dashed;padding: 49px;&#125;</span><br><span class="line">    #box6 &#123;width: 100px;height: 100px;background: #96ff38;border: 5px solid #fcff00;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id&#x3D;&quot;box1&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;box2&quot;&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;box3&quot;&gt;</span><br><span class="line">            &lt;div id&#x3D;&quot;box4&quot;&gt;</span><br><span class="line">                &lt;div id&#x3D;&quot;box5&quot;&gt;</span><br><span class="line">                    &lt;div id&#x3D;&quot;box6&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">                &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="CSS添加省略号"><a href="#CSS添加省略号" class="headerlink" title="CSS添加省略号"></a>CSS添加省略号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">width  必须有一个固定的宽</span><br><span class="line">white-space : nowrap  不让内容折行</span><br><span class="line">overflow : hidden  隐藏溢出的内容</span><br><span class="line">text-overflow : ellipsis  添加省略号</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">    #content &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        border: 1px black solid;</span><br><span class="line">        white-space: nowrap;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">        text-overflow: ellipsis;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;content&quot;&gt;测试文字测试文字测试文字测试文字测试文字&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="animation动画实现加载进度条"><a href="#animation动画实现加载进度条" class="headerlink" title="animation动画实现加载进度条"></a>animation动画实现加载进度条</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .loading &#123;</span><br><span class="line">        width: 40px;</span><br><span class="line">        height: 40px;</span><br><span class="line">        margin: 30px auto;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box2 &#123;</span><br><span class="line">        transform: rotate(45deg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box1,</span><br><span class="line">    .loading .box2 &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">        position: absolute;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box1 div,</span><br><span class="line">    .loading .box2 div &#123;</span><br><span class="line">        width: 10px;</span><br><span class="line">        height: 10px;</span><br><span class="line">        background: blue;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">        position: absolute;</span><br><span class="line">        animation: Move 1.5s infinite linear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box1 div:nth-child(1),</span><br><span class="line">    .loading .box2 div:nth-child(1) &#123;</span><br><span class="line">        left: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box1 div:nth-child(2),</span><br><span class="line">    .loading .box2 div:nth-child(2) &#123;</span><br><span class="line">        right: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box1 div:nth-child(3),</span><br><span class="line">    .loading .box2 div:nth-child(3) &#123;</span><br><span class="line">        right: 0;</span><br><span class="line">        bottom: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box1 div:nth-child(4),</span><br><span class="line">    .loading .box2 div:nth-child(4) &#123;</span><br><span class="line">        left: 0;</span><br><span class="line">        bottom: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @keyframes Move &#123;</span><br><span class="line">        0% &#123;</span><br><span class="line">            transform: scale(1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        50% &#123;</span><br><span class="line">            transform: scale(0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        100% &#123;</span><br><span class="line">            transform: scale(1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box1 div:nth-child(1) &#123;</span><br><span class="line">        animation-delay: -0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box2 div:nth-child(1) &#123;</span><br><span class="line">        animation-delay: -.2s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box1 div:nth-child(2) &#123;</span><br><span class="line">        animation-delay: -.4s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box2 div:nth-child(2) &#123;</span><br><span class="line">        animation-delay: -.6s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box1 div:nth-child(3) &#123;</span><br><span class="line">        animation-delay: -.8s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box2 div:nth-child(3) &#123;</span><br><span class="line">        animation-delay: -1s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box1 div:nth-child(4) &#123;</span><br><span class="line">        animation-delay: -1.2s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .loading .box2 div:nth-child(4) &#123;</span><br><span class="line">        animation-delay: -1.4s;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;loading&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;box1&quot;&gt;</span><br><span class="line">            &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;box2&quot;&gt;</span><br><span class="line">            &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="3D翻转立方体"><a href="#3D翻转立方体" class="headerlink" title="3D翻转立方体"></a>3D翻转立方体</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    *&#123;margin: 0;padding: 0;&#125;</span><br><span class="line">    ul&#123;list-style: none;&#125;</span><br><span class="line">    .box&#123;width: 300px;height: 300px;border: 1px black solid;margin: 30px auto;perspective: 200px;&#125;</span><br><span class="line">    .box ul&#123;width: 100px;height: 100px;margin: 100px;position: relative;transform-style: preserve-3d;transition: 2s;transform-origin: center center -50px;&#125;</span><br><span class="line">    .box ul li&#123;width: 100px;height: 100px;position: absolute;line-height: 100px;text-align: center;color: white;font-size: 26px;&#125;</span><br><span class="line"></span><br><span class="line">    .box ul li:nth-child(1)&#123;background: red;left: 0;top: 0;&#125;</span><br><span class="line">    .box ul li:nth-child(2)&#123;background: blue;left: 100px;top: 0;transform-origin: left;transform: rotateY(90deg);&#125;</span><br><span class="line">    .box ul li:nth-child(3)&#123;background: yellow;left: -100px;top: 0;transform-origin: right;transform: rotateY(-90deg);&#125;</span><br><span class="line">    .box ul li:nth-child(4)&#123;background: green;left: 0px;top: -100px;transform-origin: bottom;transform: rotateX(90deg);&#125;</span><br><span class="line">    .box ul li:nth-child(5)&#123;background: pink;left: 0px;top: 100px;transform-origin: top;transform: rotateX(-90deg);&#125;</span><br><span class="line">    .box ul li:nth-child(6)&#123;background: grey;left: 0px;top: 0px;transform: translateZ(-100px) rotateY(180deg);&#125;</span><br><span class="line"></span><br><span class="line">    .box:hover ul&#123;transform: rotateY(360deg);&#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box&quot;&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li&gt;1&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;2&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;3&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;4&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;5&lt;&#x2F;li&gt;</span><br><span class="line">            &lt;li&gt;6&lt;&#x2F;li&gt;</span><br><span class="line">        &lt;&#x2F;ul&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="渐变实现进度条"><a href="#渐变实现进度条" class="headerlink" title="渐变实现进度条"></a>渐变实现进度条</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .progress &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 30px;</span><br><span class="line">        border: 1px black solid;</span><br><span class="line">        margin: 100px;</span><br><span class="line">        background-image: linear-gradient(to right top, #999 25%, #080 50%, #999 50%, #999 75%, #080 75%);</span><br><span class="line">        background-size: 30px;</span><br><span class="line">        animation: move infinite 5s linear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @keyframes move &#123;</span><br><span class="line">        0% &#123;</span><br><span class="line">            background-position: 0 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        100% &#123;</span><br><span class="line">            background-position: 300px 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;progress&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="flex实现骰子"><a href="#flex实现骰子" class="headerlink" title="flex实现骰子"></a>flex实现骰子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #box1 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        border: 1px black solid;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box1 div &#123;</span><br><span class="line">        width: 30%;</span><br><span class="line">        height: 30%;</span><br><span class="line">        background: black;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box2 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box2 div &#123;</span><br><span class="line">        width: 30%;</span><br><span class="line">        height: 30%;</span><br><span class="line">        background: black;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box2 div:last-child &#123;</span><br><span class="line">        align-self: flex-end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box3 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">        align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box3 div &#123;</span><br><span class="line">        width: 30%;</span><br><span class="line">        height: 30%;</span><br><span class="line">        background: black;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box3 div:first-child &#123;</span><br><span class="line">        align-self: flex-start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box3 div:last-child &#123;</span><br><span class="line">        align-self: flex-end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box4 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        border: 1px black solid;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box4 div &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box4 div:last-child &#123;</span><br><span class="line">        align-items: flex-end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box4 i &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        width: 30%;</span><br><span class="line">        height: 60%;</span><br><span class="line">        background: black;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box5 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        border: 1px black solid;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box5 div &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: center;</span><br><span class="line">        align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box5 div:first-child &#123;</span><br><span class="line">        align-items: flex-start;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box5 div:last-child &#123;</span><br><span class="line">        align-items: flex-end;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box5 i &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        width: 30%;</span><br><span class="line">        height: 90%;</span><br><span class="line">        background: black;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box6 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        border: 1px black solid;</span><br><span class="line">        border-radius: 5px;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-wrap: wrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box6 div &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        display: flex;</span><br><span class="line">        justify-content: space-between;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box6 div:first-child &#123;</span><br><span class="line">        align-items: flex-start;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box6 div:last-child &#123;</span><br><span class="line">        align-items: flex-end;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box6 i &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        width: 30%;</span><br><span class="line">        height: 90%;</span><br><span class="line">        background: black;</span><br><span class="line">        border-radius: 50%;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;box1&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;box2&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;box3&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;box4&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;box5&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;box6&quot;&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">            &lt;i&gt;&lt;&#x2F;i&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="flex两列固定-一列自适应"><a href="#flex两列固定-一列自适应" class="headerlink" title="flex两列固定,一列自适应"></a>flex两列固定,一列自适应</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;</span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #main &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #left &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background: red;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #center &#123;</span><br><span class="line">        flex: 1;</span><br><span class="line">        height: 300px;</span><br><span class="line">        background: yellow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #right &#123;</span><br><span class="line">        width: 150px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background: blue;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;main&quot;&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;left&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;center&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;right&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="grid实现骰子"><a href="#grid实现骰子" class="headerlink" title="grid实现骰子"></a>grid实现骰子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #box&#123;width: 100px;height: 100px;border: 1px black solid;border-radius: 5px;display: grid;grid-template-columns: repeat(3,1fr);grid-template-rows: repeat(3,1fr);place-items: center center;&#125;</span><br><span class="line">    #box div&#123;width: 20px;height: 20px;background: black;border-radius: 50%;grid-area: 2 &#x2F; 2 &#x2F; 3 &#x2F; 3;&#125;</span><br><span class="line"></span><br><span class="line">    #box2&#123;width: 100px;height: 100px;border: 1px black solid;border-radius: 5px;display: grid;grid-template-columns: repeat(3,1fr);grid-template-rows: repeat(3,1fr);place-items: center center;&#125;</span><br><span class="line">    #box2 div&#123;width: 20px;height: 20px;background: black;border-radius: 50%;&#125;</span><br><span class="line">    #box2 div:nth-child(2)&#123;grid-area: 3 &#x2F; 3 &#x2F; 4 &#x2F; 4;&#125;</span><br><span class="line"></span><br><span class="line">    #box3&#123;width: 100px;height: 100px;border: 1px black solid;border-radius: 5px;display: grid;grid-template-columns: repeat(3,1fr);grid-template-rows: repeat(3,1fr);place-items: center center;</span><br><span class="line">    grid-template-areas: </span><br><span class="line">    &quot;a1 a2 a3&quot;</span><br><span class="line">    &quot;a4 a5 a6&quot;</span><br><span class="line">    &quot;a7 a8 a9&quot;</span><br><span class="line">    ;</span><br><span class="line">    &#125;</span><br><span class="line">    #box3 div&#123;width: 20px;height: 20px;background: black;border-radius: 50%;&#125;</span><br><span class="line">    #box3 div:nth-child(2)&#123;grid-area: a5;&#125;</span><br><span class="line">    #box3 div:nth-child(3)&#123;grid-area: a9;&#125;</span><br><span class="line"></span><br><span class="line">    #box4&#123;width: 100px;height: 100px;border: 1px black solid;border-radius: 5px;display: grid;grid-template-columns: repeat(3,1fr);grid-template-rows: repeat(3,1fr);place-items: center center;</span><br><span class="line">    grid-template-areas: </span><br><span class="line">    &quot;a1 a2 a3&quot;</span><br><span class="line">    &quot;a4 a5 a6&quot;</span><br><span class="line">    &quot;a7 a8 a9&quot;</span><br><span class="line">    ;</span><br><span class="line">    &#125;</span><br><span class="line">    #box4 div&#123;width: 20px;height: 20px;background: black;border-radius: 50%;&#125;</span><br><span class="line">    #box4 div:nth-child(2)&#123;grid-area: a3;&#125;</span><br><span class="line">    #box4 div:nth-child(3)&#123;grid-area: a7;&#125;</span><br><span class="line">    #box4 div:nth-child(4)&#123;grid-area: a9;&#125;</span><br><span class="line"></span><br><span class="line">    #box5&#123;width: 100px;height: 100px;border: 1px black solid;border-radius: 5px;display: grid;grid-template-columns: repeat(3,1fr);grid-template-rows: repeat(3,1fr);place-items: center center;</span><br><span class="line">    grid-template-areas: </span><br><span class="line">    &quot;a1 a2 a3&quot;</span><br><span class="line">    &quot;a4 a5 a6&quot;</span><br><span class="line">    &quot;a7 a8 a9&quot;</span><br><span class="line">    ;</span><br><span class="line">    &#125;</span><br><span class="line">    #box5 div&#123;width: 20px;height: 20px;background: black;border-radius: 50%;&#125;</span><br><span class="line">    #box5 div:nth-child(2)&#123;grid-area: a3;&#125;</span><br><span class="line">    #box5 div:nth-child(3)&#123;grid-area: a7;&#125;</span><br><span class="line">    #box5 div:nth-child(4)&#123;grid-area: a9;&#125;</span><br><span class="line">    #box5 div:nth-child(5)&#123;grid-area: a5;&#125;</span><br><span class="line"></span><br><span class="line">    #box6&#123;width: 100px;height: 100px;border: 1px black solid;border-radius: 5px;display: grid;grid-template-columns: repeat(3,1fr);grid-template-rows: repeat(3,1fr);place-items: center center;</span><br><span class="line">    grid-template-areas: </span><br><span class="line">    &quot;a1 a2 a3&quot;</span><br><span class="line">    &quot;a4 a5 a6&quot;</span><br><span class="line">    &quot;a7 a8 a9&quot;</span><br><span class="line">    ;</span><br><span class="line">    &#125;</span><br><span class="line">    #box6 div&#123;width: 20px;height: 20px;background: black;border-radius: 50%;&#125;</span><br><span class="line">    #box6 div:nth-child(2)&#123;grid-area: a3;&#125;</span><br><span class="line">    #box6 div:nth-child(3)&#123;grid-area: a7;&#125;</span><br><span class="line">    #box6 div:nth-child(4)&#123;grid-area: a9;&#125;</span><br><span class="line">    #box6 div:nth-child(5)&#123;grid-area: a4;&#125;</span><br><span class="line">    #box6 div:nth-child(6)&#123;grid-area: a6;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;box2&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;box3&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;box4&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;box5&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id&#x3D;&quot;box6&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>练手项目</tag>
      </tags>
  </entry>
  <entry>
    <title>闭包</title>
    <url>/2021/07/09/Closure/</url>
    <content><![CDATA[<pre><code>满足以下特点的叫做闭包：
    1.函数嵌套函数
    2.内部函数使用外部函数的形参和变量
    3.被引用的形参和变量不会被垃圾回收机制所回收
好处：
    1.可以让一个变量常驻在内存当中
    2.避免全局变量污染和声明全局变量
    3.可以声明私有成员
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num + <span class="string">&quot;,&quot;</span> + res); <span class="comment">// 10,20</span></span><br><span class="line">&#125;</span><br><span class="line">show(<span class="number">20</span>);</span><br><span class="line"><span class="comment">// console.log(num); 报错：未定义</span></span><br><span class="line"><span class="comment">// console.log(res); 报错：未定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bbb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bbb;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ccc = aaa();</span><br><span class="line">ccc(); <span class="comment">// 3</span></span><br><span class="line">ccc(); <span class="comment">// 4</span></span><br><span class="line"><span class="comment">// console.log(a); // 报错：未定义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 立即执行函数写法,前面函数执行,后面函数调用</span></span><br><span class="line"><span class="keyword">var</span> ccc = (<span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">bbb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        a++;</span><br><span class="line">        <span class="built_in">console</span>.log(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line">ccc(); <span class="comment">// 3</span></span><br><span class="line">ccc(); <span class="comment">// 4</span></span><br><span class="line"><span class="comment">// console.log(a); // 报错：未定义</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 面向对象</title>
    <url>/2021/06/30/JS_Object_Oriented/</url>
    <content><![CDATA[<pre><code>面向对象：继承(分类更加细分的构造函数),封装(封装构造函数),多态。

面向对象是一个编程思想,支撑面向对象编程思想的语法是类(ECMA6)和对象,构造函数充当类的角色。
构造函数和对象实现面向对象程序的时候,体现出继承,封装,多态的特点。
</code></pre>
<h1 id="继承与原型链"><a href="#继承与原型链" class="headerlink" title="继承与原型链"></a>继承与原型链</h1><h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1>]]></content>
  </entry>
  <entry>
    <title>JavaScript ECMAScript 6.0</title>
    <url>/2021/06/28/JS_ES6/</url>
    <content><![CDATA[<p><img src="js_esls.PNG" alt="JavaScript ECMAScript"><br><a href="https://www.runoob.com/w3cnote/es6-tutorial.html">ES6 菜鸟教程</a></p>
<h1 id="let-与-const"><a href="#let-与-const" class="headerlink" title="let 与 const"></a>let 与 const</h1><pre><code>var     关键字声明变量,将变量或者形参所在的函数的大括号作为作用域处理,并且遵循垃圾回收进制。
let     关键字声明的变量,只要遇到大括号就形成作用域,所在的作用域叫做块级作用域。let 只能声明一次 var 可以声明多次。
const   在let上多了只读,变量值只能在声明的时候确定,后面没有办法修改(不能修改内存指向)。不能改的变量叫做常量。

最佳实践：不用var,主用const,配合使用let
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 报错：标识符“a”已声明</span></span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// var声明的变量是全局变量</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// let声明的变量作用域更小,块级作用域</span></span><br><span class="line">    <span class="keyword">let</span> num1 = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num1); <span class="comment">// 10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(num1); <span class="comment">// 报错：num1未定义</span></span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">/*  </span></span><br><span class="line"><span class="comment">    window.onload = function () &#123;</span></span><br><span class="line"><span class="comment">         var aBtns = document.getElementsByTagName(&quot;button&quot;);</span></span><br><span class="line"><span class="comment">         for (var i = 0; i &lt; aBtns.length; i++) &#123;</span></span><br><span class="line"><span class="comment">             aBtns[i].onclick = function () &#123;</span></span><br><span class="line"><span class="comment">                 console.log(i); // 使用var 点击的3个按钮下标都为3</span></span><br><span class="line"><span class="comment">             &#125;</span></span><br><span class="line"><span class="comment">         &#125;</span></span><br><span class="line"><span class="comment">     &#125; </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> aBtns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; aBtns.length; i++) &#123;</span><br><span class="line">            aBtns[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(i); <span class="comment">// 使用let 点击的3个按钮下标都为0~2</span></span><br><span class="line">                <span class="comment">// 每循环一次都会给对应的按钮添加事件,形成对应的作用域</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;按钮<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;按钮<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;按钮<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> IP = <span class="string">&quot;10.12.123.14&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(IP); <span class="comment">// 10.12.123.14</span></span><br><span class="line">IP = <span class="string">&quot;xxx&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(IP); <span class="comment">// 报错,IP是用const声明的不能更改</span></span><br></pre></td></tr></table></figure>
<h1 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h1><pre><code>一种新潮的函数写法,适当的省略函数中的function和return关键字。
    注：
        1.箭头函数,不能用new
        2.箭头函数如果返回值是一个对象,一定要加()
        3.箭头函数中this指向的是上一层函数的主人
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.无参数,无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> show = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.有一个参数,无返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxx</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xxx = <span class="function"><span class="params">num</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.有一个参数,有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.多个参数,有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> show = <span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x + y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中括号解构</span></span><br><span class="line"><span class="comment">// var x = 10, y = 20, z = 30;</span></span><br><span class="line"><span class="keyword">var</span> [x, y, z] = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="built_in">console</span>.log(x + <span class="string">&quot;,&quot;</span> + y + <span class="string">&quot;,&quot;</span> + z); <span class="comment">// 10,20,30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> [x, [a, b], z] = [<span class="number">10</span>, [<span class="number">20</span>], <span class="number">30</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a + <span class="string">&quot;,&quot;</span> + z); <span class="comment">// 20,30</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 大括号解构</span></span><br><span class="line"><span class="keyword">var</span> &#123; name, age, sex &#125; = &#123;</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    name: <span class="string">&quot;哪吒&quot;</span>,</span><br><span class="line">    sex: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(sex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>];</span><br><span class="line"><span class="keyword">const</span> [foo, ...rest] = arr;</span><br><span class="line"><span class="built_in">console</span>.log(rest); <span class="comment">// [200, 300]</span></span><br></pre></td></tr></table></figure>
<h1 id="ES6-字符串"><a href="#ES6-字符串" class="headerlink" title="ES6 字符串"></a>ES6 字符串</h1><pre><code>传统字符串：所有单引号,双引号括起来的都叫做字符串。
ES6字符串：反引号 ``
    1.ES6字符串,换行,代码缩进,都可以在字符串中体现出来
    2.$&#123;变量/表达式/函数调用&#125;
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var str = &quot;hello </span></span><br><span class="line"><span class="comment">// world&quot;;</span></span><br><span class="line"><span class="comment">// console.log(str);   // 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">`hello </span></span><br><span class="line"><span class="string">world`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">    world</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showSelf</span>(<span class="params">&#123; name, age, sex = <span class="string">&quot;男&quot;</span> &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;name&#125;</span>,今年<span class="subst">$&#123;<span class="built_in">Math</span>.max(age, <span class="number">20</span>, <span class="number">30</span>)&#125;</span>岁,性别<span class="subst">$&#123;sex&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line">showSelf(&#123; <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">name</span>: <span class="string">&quot;小小&quot;</span>, <span class="attr">sex</span>: <span class="string">&quot;女&quot;</span> &#125;); <span class="comment">//小小,今年30岁,性别女</span></span><br></pre></td></tr></table></figure>
<h1 id="ES6-数组"><a href="#ES6-数组" class="headerlink" title="ES6 数组"></a>ES6 数组</h1><h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><pre><code>功能：将伪数组转成真数组
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> aLis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(aLis.length);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将aLis转为真数组</span></span><br><span class="line">    aLis = <span class="built_in">Array</span>.from(aLis);</span><br><span class="line">    aLis.push(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(aLis);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><pre><code>find
    功能：在数组中查找符合条件的元素,只要找到第一个符合条件的元素,就终止遍历。
    返回值：找到的元素。
findIndex
    返回值：找到的元素下标。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.find(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">20</span>)); <span class="comment">// 30</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.findIndex(<span class="function"><span class="params">item</span> =&gt;</span> item &gt; <span class="number">20</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>
<h2 id="填充"><a href="#填充" class="headerlink" title="填充"></a>填充</h2><pre><code>arr.copyWithin()
    功能：将一定范围索引的数组元素修改为此数组另一指定范围索引的元素。
    第一个参数：从哪个下标开始
    第二个和第三个参数：范围 start end
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">2</span>, <span class="number">4</span>, <span class="number">9</span>)); <span class="comment">// [1, 2, 5, 6, 7, 8, 9, 8, 9, 10]</span></span><br></pre></td></tr></table></figure>
<h1 id="ES6-对象"><a href="#ES6-对象" class="headerlink" title="ES6 对象"></a>ES6 对象</h1><h2 id="合并对象"><a href="#合并对象" class="headerlink" title="合并对象"></a>合并对象</h2><pre><code>Object.assign()
    功能：将所有传入的对象,都合并到第一个对象中。
    浅拷贝：只拷贝地址
    深拷贝：将复合数据类型重新生成一份,进行拷贝
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    a: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    b: <span class="number">20</span>,</span><br><span class="line">    c: <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">    d: <span class="number">40</span>,</span><br><span class="line">    f: [<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>, <span class="literal">true</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(obj1, obj2, obj3));</span><br></pre></td></tr></table></figure>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><pre><code>集合：1.不重复。2.无序
</code></pre>
<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><pre><code>Set 对象允许你存储任何类型的唯一值，无论是原始值或者是对象引用。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> imgs = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"><span class="comment">// 添加元素</span></span><br><span class="line">imgs.add(<span class="number">100</span>);</span><br><span class="line">imgs.add(<span class="number">100</span>);</span><br><span class="line">imgs.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">imgs.add(<span class="literal">true</span>);</span><br><span class="line">imgs.add(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;world&quot;</span>));</span><br><span class="line">imgs.add(<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">&quot;world&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(imgs); <span class="comment">// Set(5) &#123;100, &quot;hello&quot;, true, String, String&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合遍历    for...of</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> imgs.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> imgs.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> imgs.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组变集合</span></span><br><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">5</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">6</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(set);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 集合变数组 将数据结构展开成数组</span></span><br><span class="line"><span class="keyword">var</span> arr = [...set];</span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><pre><code>map 映射关系
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">map.set(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;打渔的&quot;</span>);</span><br><span class="line">map.set(<span class="string">&quot;黄五&quot;</span>, <span class="string">&quot;种地的&quot;</span>);</span><br><span class="line">map.set(<span class="string">&quot;楠九&quot;</span>, <span class="string">&quot;打猎的&quot;</span>);</span><br><span class="line">map.set(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;开车的&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map); <span class="comment">// Map(3) &#123;&quot;张三&quot; =&gt; &quot;开车的&quot;, &quot;黄五&quot; =&gt; &quot;种地的&quot;, &quot;楠九&quot; =&gt; &quot;打猎的&quot;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 取值</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&quot;楠九&quot;</span>)); <span class="comment">// 打猎的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端响应式布局</title>
    <url>/2021/06/03/Mobile_layout/</url>
    <content><![CDATA[<h3 id="Viewport视口"><a href="#Viewport视口" class="headerlink" title="Viewport视口"></a>Viewport视口</h3><p>在移动端Viewport视口是浏览器显示页面内容的屏幕区域。在Viewport中有两种视口,分别表示为：visual viewport(可视视口)和layout viewport(布局视口)。</p>
<p>visual viewport固定大小跟屏幕大小相同,在上面。而layout viewport可改变大小,在下面。layout viewport默认大小为980像素,可通过document.documentElement.clientWidth获取。</p>
<p>网页需要将layout viewport设置成跟visual viewport等同大小,方便进行网页制作。</p>
<p>通过<meta>标签进行设置,name属性指定viewport值,content属性进行视口配置。<br><img src="Viewport.PNG" alt="Viewport视口"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0, user-scalable&#x3D;no&quot;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="移动端适配方案"><a href="#移动端适配方案" class="headerlink" title="移动端适配方案"></a>移动端适配方案</h3><p>1.百分比布局,也叫流式布局。<br>    通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充。<br>    流式布局方式是移动web开发使用的比较常见的布局方式。<br>    max-width 最大宽度(max-height最大高度)。<br>    min-width最小宽度（min-height最小高度）。<br>2.等比缩放布局,也叫rem布局。</p>
<pre><code>单位：
    em : 是一个相对单位,1em等于当前元素或父元素的font-size值。
    rem : 是一个相对单位,1rem等于根元素的font-size值。
    vw / vh : 把屏幕分为100份,1vw等于屏幕宽的1%。


动态设置font-size(要给body重置一下font-size: 16px;)：
    通过JS
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var fontsize &#x3D; document.documentElement.clientWidth &#x2F; 3.75;</span><br><span class="line">    document.documentElement.style.fontSize &#x3D; fontsize + &quot;px&quot;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
    通过VW
    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html&#123;font-size: 26.666667vw;&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
<h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p>利用媒体查询,即media queries,可以针对不同媒体类型定义不同的样式,从而实现响应式布局。<br>媒体类型：<br><img src="mtlx.PNG" alt="Viewport视口"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@media all and(min-width: 500px) and (max-width:700px) &#123;执行的CSS代码&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*  </span><br><span class="line">@media ： 响应式标识</span><br><span class="line">and ：选择条件    not ： 取反</span><br><span class="line">min-width max-width 最小和最大宽度</span><br><span class="line">orientation:portrait ：纵屏</span><br><span class="line">orientation:landscape ：横屏</span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 引入外部的css文件做响应式</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;.css&quot; media&#x3D;&quot;all and (min-width:400px)&quot;&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>响应式</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 正则表达式</title>
    <url>/2021/06/27/JS_RE/</url>
    <content><![CDATA[<h1 id="正则表达式概念"><a href="#正则表达式概念" class="headerlink" title="正则表达式概念"></a>正则表达式概念</h1><pre><code>正则表达式（Regular Expression）是一个描述字符模式的对象。
ECMAScript 的 RegExp 类 表示正则表达式,
而 String 和正则表达式都定义了进行强大的【模式匹配】和【文本检索】与【替换】的函数。
</code></pre>
<h1 id="创建正则表达式"><a href="#创建正则表达式" class="headerlink" title="创建正则表达式"></a>创建正则表达式</h1><p>1.通过new去声明正则表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;ig&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box1); <span class="comment">// /hello/gi</span></span><br></pre></td></tr></table></figure>
<p>2.省略new运算符去声明正则表达式</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="built_in">RegExp</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;ig&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(box1); <span class="comment">// /hello/gi</span></span><br></pre></td></tr></table></figure>
<p>3.通过常量赋值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box1 = <span class="regexp">/hello/gi</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box1); <span class="comment">// /hello/gi</span></span><br></pre></td></tr></table></figure>
<h1 id="正则表达式方法"><a href="#正则表达式方法" class="headerlink" title="正则表达式方法"></a>正则表达式方法</h1><p>正则表达式对象只有两个方法:</p>
<pre><code>test
    格式：正则.test(字符串)
    功能：在字符串中匹配这个正则是否存在
    返回值：如果匹配成功返回true,匹配失败返回false
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;how aRe you&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box = <span class="regexp">/are/i</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<pre><code>exec
    格式：正则.exec(字符串)
    功能：在字符串中匹配这个正则是否存在
    返回值：返回匹配到的串,匹配成功,返回一个装有字符串的数组。匹配失败,返回null
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;how aRe you&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box = <span class="regexp">/are/i</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box.exec(str)); <span class="comment">// [&quot;aRe&quot;, index: 4, input: &quot;how aRe you&quot;, groups: undefined]</span></span><br></pre></td></tr></table></figure>
<h1 id="字符串中使用正则的方法"><a href="#字符串中使用正则的方法" class="headerlink" title="字符串中使用正则的方法"></a>字符串中使用正则的方法</h1><p>字符串的函数：</p>
<h2 id="match"><a href="#match" class="headerlink" title="match()"></a>match()</h2><pre><code>格式：字符串.match(正则)
功能：在字符串匹配是否有符合正则表达式
返回值：匹配成功,返回装有匹配到子串的数组。匹配失败,返回null
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;how are Are ARE you&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box = <span class="regexp">/are/ig</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(box)); <span class="comment">// [&quot;are&quot;, &quot;Are&quot;, &quot;ARE&quot;]</span></span><br></pre></td></tr></table></figure>
<h2 id="replace"><a href="#replace" class="headerlink" title="replace()"></a>replace()</h2><pre><code>格式：字符串.replace(oldStr/正则, newStr);
功能：用newStr将oldStr替换
返回值：替换成功的新字符串
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;how are Are ARE you&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.replace(<span class="regexp">/are/ig</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr); <span class="comment">// how * * * you</span></span><br></pre></td></tr></table></figure>

<h2 id="split"><a href="#split" class="headerlink" title="split()"></a>split()</h2><pre><code>格式：字符串.split(分割符/正则);
功能：用分割符将原字符串进行分割
返回值：分割剩下的子串组成的数组
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;how are Are ARE you&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> arr = str.split(<span class="regexp">/are/i</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&quot;how &quot;, &quot; &quot;, &quot; &quot;, &quot; you&quot;]</span></span><br></pre></td></tr></table></figure>

<h2 id="search"><a href="#search" class="headerlink" title="search()"></a>search()</h2><pre><code>格式：字符串.search(子串/正则)
功能：找到符合条件的子串第一次出现的位置
返回值：如果找到,返回&gt;=0的下标。否则返回-1
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;how are Are ARE you&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/are/i</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<h1 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h1><pre><code>元字符：在正则表达式中有特殊含义的字符。
</code></pre>
<h2 id="单个数字和字符的元字符"><a href="#单个数字和字符的元字符" class="headerlink" title="单个数字和字符的元字符"></a>单个数字和字符的元字符</h2><pre><code>.       匹配单个的任意字符
[]      匹配单范围内的字符
[^]     匹配任意一个除括号范围内的字符
\w      匹配单个的数字,字母下划线 等价于[a-zA-Z0-9_]
\W      匹配单个非数字,字母下划线
\d      匹配单个数字,等价于[0-9] 
\D      匹配单个非数字,等价于[^0-9]
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;g_ogle&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box = <span class="regexp">/g.ogle/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box.test(str)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;g1ogle&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box1 = <span class="regexp">/g[^0-9]ogle/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box1.test(str1)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<h2 id="重复字符"><a href="#重复字符" class="headerlink" title="重复字符"></a>重复字符</h2><pre><code>x       任意的单个字符
x?      匹配0个或者1个x
x+      匹配至少一个x字符
x*      匹配任意个x字符
x&#123;m,n&#125;  匹配至少m个,最多n个x字符,包括n
x&#123;n&#125;    必须匹配n个x字符
(xyz)+  小括号括起来的部分是当做单个字符处理
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;googgle&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box = <span class="regexp">/goog?le/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box.test(str)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;goo18148148le&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box1 = <span class="regexp">/goo\d*le/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box1.test(str1)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">&quot;goo12le&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box2 = <span class="regexp">/goo\d&#123;2&#125;le/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box2.test(str2)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&quot;googabcabcle&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box3 = <span class="regexp">/goog(abc)+le/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box3.test(str3)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="空白字符"><a href="#空白字符" class="headerlink" title="空白字符"></a>空白字符</h2><pre><code>\s  匹配任意单个的空白字符
\S  匹配任意单个非空白字符
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;goog le&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box = <span class="regexp">/goog\sle/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="锚字符"><a href="#锚字符" class="headerlink" title="锚字符"></a>锚字符</h2><pre><code>^   行首匹配    必须以这个正则开头
$   行尾匹配    必须以这个正则结尾
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;google da adad&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box = <span class="regexp">/^google/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box.test(str)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&quot;da adad google&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box1 = <span class="regexp">/google$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box1.test(str1)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="替代字符"><a href="#替代字符" class="headerlink" title="替代字符"></a>替代字符</h2><pre><code>|   查找任何以 | 分隔的选项
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;google&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box = <span class="regexp">/google|baidu|bing/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(box.test(str)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><pre><code>i   忽略大小写
g   全局匹配
m   换行匹配

如果在字符串,遇到换行,重新开始计算行首。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;1.go15ogle\n2.ba55idu\n3.bi78ng&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> box = <span class="regexp">/^\d/gm</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(box, <span class="string">&quot;*&quot;</span>));</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*.go15ogle</span></span><br><span class="line"><span class="comment">*.ba55idu</span></span><br><span class="line"><span class="comment">*.bi78ng</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 遍历</title>
    <url>/2021/06/30/JS_Traversal/</url>
    <content><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;for循环：&quot;</span> + arr[i] + <span class="string">&quot;,&quot;</span> + i + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a>for…in</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;for...in遍历：&quot;</span> + arr[i] + <span class="string">&quot;,&quot;</span> + i + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;forEach遍历：&quot;</span> + arr[i] + <span class="string">&quot;,&quot;</span> + i + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a>for…of</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">of</span> arr) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;for...of遍历：&quot;</span> + item + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for...in</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    username: <span class="string">&quot;哪吒&quot;</span>,</span><br><span class="line">    age: <span class="number">20</span>,</span><br><span class="line">    sex: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;对象：&quot;</span> + attr + person[attr] + <span class="string">&quot;&lt;br/&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="set"><a href="#set" class="headerlink" title="set"></a>set</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> imgs.keys()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> imgs.values()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> imgs.entries()) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="map"><a href="#map" class="headerlink" title="map"></a>map</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> map) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>开发工具VScode</title>
    <url>/2021/04/19/Web%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h1 id="VScode"><a href="#VScode" class="headerlink" title="VScode"></a>VScode</h1><p>VScode官网下载地址：<a href="https://code.visualstudio.com/">点我下载</a><br>常用快捷键：<br>    ctrl + s : 保存 , ctrl + a : 全选<br>    ctrl + d : 选择选中的元素相同的下一个<br>    ctrl + z : 撤销 , ctrl + y : 前进<br>    ctrl+f ： 搜索本页 , ctrl+shift+f ： 全局搜索<br>    ctrl + / : 添加当前光标注释 , shift + alt + a : 选中的会注释,没选中的会添加一个空的注释<br>    shift + end : 从头选中一行 , shift + home : 从尾部选中一行 , shift + alt + ↓ ：快速复制一行<br>    alt + ↑或↓ ：快速移动一行<br>    tab : 向后缩进 , shift + tab ：向前缩进<br>    按住alt + 鼠标左键 ：多光标</p>
<h1 id="中文语言包"><a href="#中文语言包" class="headerlink" title="中文语言包"></a>中文语言包</h1><p>按住 Ctrl+Shift+X 在插件里搜索 Chinese (Simplified) Language Pack for Visual Studio Code  点击install进行下载。</p>
<p>下载完成后按住 Ctrl+Shift+P 搜索Language设置为zh-ch</p>
<h1 id="在编辑器右键打开HTML文件"><a href="#在编辑器右键打开HTML文件" class="headerlink" title="在编辑器右键打开HTML文件"></a>在编辑器右键打开HTML文件</h1><p>菜单右键打开插件 open in browser<br>在浏览器中查看 view in browser</p>
<h1 id="px单位自动转换rem单位"><a href="#px单位自动转换rem单位" class="headerlink" title="px单位自动转换rem单位"></a>px单位自动转换rem单位</h1><p>px to rem<br>设置里可定义fontsize的值,选中代码alt+z转换</p>
<h1 id="Bootstrap-4-代码提示插件"><a href="#Bootstrap-4-代码提示插件" class="headerlink" title="Bootstrap 4 代码提示插件"></a>Bootstrap 4 代码提示插件</h1><p>Bootstrap 4, Font awesome 4, Font Awesome 5 Free &amp; Pro snippets</p>
<h1 id="Sass和Less插件"><a href="#Sass和Less插件" class="headerlink" title="Sass和Less插件"></a>Sass和Less插件</h1><p>Easy LESS<br>Easy Sass</p>
]]></content>
      <tags>
        <tag>VScode</tag>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax</title>
    <url>/2021/07/03/ajax/</url>
    <content><![CDATA[<h1 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h1><p><a href="https://www.bejson.com/jsonviewernew/">JSON在线视图查看器</a></p>
<pre><code>ajax 异步的javascript和xml(数据传输格式)

ajax是前后端数据交互的搬运工,所有的操作都可以异步执行。前后端数据传输不会影响其他程序的运行。

xml数据传输格式
    优点：
        1.种类丰富
        2.传输量非常大
    缺点：
        1.解析麻烦
        2.不太适合轻量级数据

json数据传输格式(字符串)
    优点：
        1.轻量级数据
        2.解析比较轻松
    缺点：
        1.数据种类比较少
        2.传输数据量比较小
    
    JSON.parse()
    JSON.stringify()
</code></pre>
<h1 id="同步与异步"><a href="#同步与异步" class="headerlink" title="同步与异步"></a>同步与异步</h1><pre><code>任何一个程序都是由多个小程序组成的。同步与异步用来描述一个程序运行状态。

同步：阻塞。当前程序运行,必须等前一个程序运行完毕以后,才能运行。
异步：非阻塞。当前程序运行,和前面程序的运行没有任何关系。
</code></pre>
<h1 id="ajax语法"><a href="#ajax语法" class="headerlink" title="ajax语法"></a>ajax语法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 创建ajax对象 XMLHttpRequest  ie8以下不兼容</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用open </span></span><br><span class="line">            <span class="comment">// 第一个参数：请求方式 get post</span></span><br><span class="line">            <span class="comment">// 第二个参数：url</span></span><br><span class="line">            <span class="comment">// 第三个参数：是否异步 true(异步) false(同步)</span></span><br><span class="line">            xhr.open(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;1.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用send</span></span><br><span class="line">            xhr.send();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待数据响应</span></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;下载数据&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="ajax对象的兼容"><a href="#ajax对象的兼容" class="headerlink" title="ajax对象的兼容"></a>ajax对象的兼容</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">/* ie8以下声明ajax的方法    ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span></span><br><span class="line"><span class="comment">            var xhr = null;</span></span><br><span class="line"><span class="comment">            if (window.XMLHttpRequest) &#123;</span></span><br><span class="line"><span class="comment">                xhr = new XMLHttpRequest();</span></span><br><span class="line"><span class="comment">            &#125; else &#123;</span></span><br><span class="line"><span class="comment">                xhr = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;)</span></span><br><span class="line"><span class="comment">            &#125; </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/*  用于代码调试和后期维护</span></span><br><span class="line"><span class="comment">                try&#123;</span></span><br><span class="line"><span class="comment">                    尝试执行的代码</span></span><br><span class="line"><span class="comment">                &#125;catch(error)&#123;</span></span><br><span class="line"><span class="comment">                    error 错误对象,try括号中代码执行的异常信息;</span></span><br><span class="line"><span class="comment">                    补救代码;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                执行过程：</span></span><br><span class="line"><span class="comment">                    1.先去执行try中的代码</span></span><br><span class="line"><span class="comment">                    2.如果try中的代码执行正常,catch中的代码就不执行了</span></span><br><span class="line"><span class="comment">                    3.如果try中的代码执行异常,直接执行catch中的代码进行补救</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                try_throw_catch        throw手动抛出异常</span></span><br><span class="line"><span class="comment">                try&#123;</span></span><br><span class="line"><span class="comment">                    尝试执行的代码</span></span><br><span class="line"><span class="comment">                    throw new Error(&quot;异常信息文本&quot;)</span></span><br><span class="line"><span class="comment">                &#125;catch(error)&#123;</span></span><br><span class="line"><span class="comment">                    error 错误对象,try括号中代码执行的异常信息;</span></span><br><span class="line"><span class="comment">                    补救代码;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用open </span></span><br><span class="line">            xhr.open(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;1.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用send</span></span><br><span class="line">            xhr.send();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待数据响应</span></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;下载数据&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="ajax-onreadystatechange"><a href="#ajax-onreadystatechange" class="headerlink" title="ajax onreadystatechange"></a>ajax onreadystatechange</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用open </span></span><br><span class="line">            xhr.open(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;1.txt&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用send</span></span><br><span class="line">            xhr.send();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待数据响应</span></span><br><span class="line">            <span class="comment">/*  </span></span><br><span class="line"><span class="comment">                readystatechange 事件类型</span></span><br><span class="line"><span class="comment">                xhr.readyState 发生变化的时候调用</span></span><br><span class="line"><span class="comment">                0   调用open方法之前的值</span></span><br><span class="line"><span class="comment">                1   调用send方法之后,发送请求的值</span></span><br><span class="line"><span class="comment">                2   send方法完成,已经接受到所有的响应内容的值</span></span><br><span class="line"><span class="comment">                3   正在解析下载到的数据的值</span></span><br><span class="line"><span class="comment">                4   解析完成的值</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="comment">// 判断本次下载的状态码是多少</span></span><br><span class="line">                    <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;Error:&quot;</span> + xhr.status);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;下载数据&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="ajax-get和post"><a href="#ajax-get和post" class="headerlink" title="ajax get和post"></a>ajax get和post</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- action 点击提交后跳转到的url --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- method 表单的提交数据的方式 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    get(method默认)</span></span><br><span class="line"><span class="comment">        ?username=zhou&amp;age=18&amp;password=123456</span></span><br><span class="line"><span class="comment">        提交方式：直接将数据拼接在url后面进行提交,通过?进行拼接,查询字符串</span></span><br><span class="line"><span class="comment">        优点：简单</span></span><br><span class="line"><span class="comment">        缺点：不安全,最大2kb,没法实现上传。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;get.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;GET&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  </span></span><br><span class="line"><span class="comment">    post</span></span><br><span class="line"><span class="comment">        提交方式:post通过浏览器内部进行提交。</span></span><br><span class="line"><span class="comment">        优点：安全,理论上没有上限。</span></span><br><span class="line"><span class="comment">        缺点：比get复杂。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;post.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;application/x-www-form-urlencoded&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;年龄&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="ajax-get"><a href="#ajax-get" class="headerlink" title="ajax_get"></a>ajax_get</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用open </span></span><br><span class="line">            xhr.open(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;get.php?username=zhou&amp;age=18&amp;password=123456&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用send</span></span><br><span class="line">            xhr.send();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待数据响应</span></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="comment">// 判断本次下载的状态码是多少</span></span><br><span class="line">                    <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;Error:&quot;</span> + xhr.status);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;GET提交&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="ajax-post"><a href="#ajax-post" class="headerlink" title="ajax_post"></a>ajax_post</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">                xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用open </span></span><br><span class="line">            xhr.open(<span class="string">&quot;get&quot;</span>, <span class="string">&quot;get.php&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 必须在send方法之前,设置请求的格式</span></span><br><span class="line">            xhr.setRequestHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                post提交的数据,需要通过send方法进行提交</span></span><br><span class="line"><span class="comment">                </span></span><br><span class="line"><span class="comment">                ?name1=value&amp;name2=value2   search</span></span><br><span class="line"><span class="comment">                name1=value&amp;name2=value2    querystring</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 调用send</span></span><br><span class="line">            xhr.send(<span class="string">&quot;username=zhou&amp;age=18&amp;password=123456&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 等待数据响应</span></span><br><span class="line">            xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">                    <span class="comment">// 判断本次下载的状态码是多少</span></span><br><span class="line">                    <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">&quot;Error:&quot;</span> + xhr.status);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;POST提交&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="ajax函数的封装"><a href="#ajax函数的封装" class="headerlink" title="ajax函数的封装"></a>ajax函数的封装</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*  </span></span><br><span class="line"><span class="comment">method</span></span><br><span class="line"><span class="comment">url</span></span><br><span class="line"><span class="comment">data</span></span><br><span class="line"><span class="comment">success 数据下载成功以后执行的函数</span></span><br><span class="line"><span class="comment">error   数据下载失败以后执行的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$ajax</span>(<span class="params">&#123; method = <span class="string">&quot;get&quot;</span>, url, data, success, error &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建ajax对象</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断数据是否存在</span></span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        data = querystring(data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method == <span class="string">&quot;get&quot;</span> &amp;&amp; data) &#123;</span><br><span class="line">        url += <span class="string">&quot;?&quot;</span> + data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    xhr.open(method, url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (method == <span class="string">&quot;get&quot;</span>) &#123;</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 必须在send方法之前,设置请求的格式</span></span><br><span class="line">        xhr.setRequestHeader(<span class="string">&quot;content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>);</span><br><span class="line">        xhr.send(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 等待数据响应</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断本次下载的状态码是多少</span></span><br><span class="line">            <span class="keyword">if</span> (xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">                <span class="comment">// 回调函数</span></span><br><span class="line">                <span class="keyword">if</span> (success) &#123;</span><br><span class="line">                    success(xhr.responseText);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                    error(<span class="string">&quot;Error:&quot;</span> + xhr.status);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">querystring</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> obj) &#123;</span><br><span class="line">        str += attr + <span class="string">&quot;=&quot;</span> + obj[attr] + <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str.substring(<span class="number">0</span>, str.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="json对象"><a href="#json对象" class="headerlink" title="json对象"></a>json对象</h1><pre><code>json:数据传输格式(字符串的一种格式)
json对象：
    JSON.stringify()    数据结构 =&gt; 字符串
    JSON.parse()        json格式字符串 =&gt; 数据结构
</code></pre>
<h1 id="jsonp跨域"><a href="#jsonp跨域" class="headerlink" title="jsonp跨域"></a>jsonp跨域</h1><pre><code>ajax只能下载同源的数据,跨源的数据禁止下载。

同源策略：
    1.同协议
    2.同域名/同IP
    3.同端口号
跨源的方式：
    1.修改ajax同源协议(不建议使用)
    2.委托php文件进行跨源
    3.JSONP
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JSONP原理</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;下载的数据:&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;demo.js&quot;</span>&gt;&lt;<span class="regexp">/script&gt; /</span><span class="regexp">/ demo.js里的数据 download(&quot;I am String!&quot;);</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- src 这个属性是可以完成跨源,无限制。 --&gt;</span></span><br><span class="line"><span class="regexp">    &lt;img src=&quot;https:/</span><span class="regexp">/img2.baidu.com/i</span>t/u=<span class="number">1127718379</span>,<span class="number">2119002313</span>&amp;fm=<span class="number">26</span>&amp;fmt=auto&amp;gp=<span class="number">0.</span>jpg<span class="string">&quot;&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="jsonp跨域语法"><a href="#jsonp跨域语法" class="headerlink" title="jsonp跨域语法"></a>jsonp跨域语法</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">download</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;下载的数据:&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        对于计算机来说,文件后缀是没有任何用处的。</span></span><br><span class="line"><span class="comment">        后缀作用：用于给计算机的软件,快速识别应该用哪个软件打开。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        JSONP跨域的使用流程：</span></span><br><span class="line"><span class="comment">            1.先去声明一个函数,这个函数有一个形参,这个形参会拿到想要下载的数据,使用这个参数做后续数据的处理。</span></span><br><span class="line"><span class="comment">            2.在需要下载数据的时候,动态创建script标签,将标签src属性设置成下载数据的链接。</span></span><br><span class="line"><span class="comment">            3.当script插入到页面上的时候,就会调用已经封装好的函数,将需要的数据传过来。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> oScript = <span class="built_in">document</span>.createElement(script);</span><br><span class="line">            oScript.src = <span class="string">&quot;demo.txt&quot;</span>;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(oScript);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;下载数据&lt;/button&gt;</span><br><span class="line">    &lt;!-- src 这个属性是可以完成跨源,无限制。 --&gt;</span><br><span class="line">    &lt;img src=<span class="string">&quot;https://img2.baidu.com/it/u=1127718379,2119002313&amp;fm=26&amp;fmt=auto&amp;gp=0.jpg&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>BFC规范</title>
    <url>/2021/05/25/bfc/</url>
    <content><![CDATA[<p>Formatting context(格式化上下文)是W3C CSS2.1规范中的一个概念。它是页面中的一块渲染区域,并且有一套渲染规则,它决定了其子元素将如何定位,以及和其他元素的关系和互相作用。</p>
<h3 id="BFC规范"><a href="#BFC规范" class="headerlink" title="BFC规范"></a>BFC规范</h3><p>BFC即Block Formatting Contexts(块级格式化上下文)。具有BFC特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且BFC具有普通元素所没有的一些特性。</p>
<h3 id="触发BFC"><a href="#触发BFC" class="headerlink" title="触发BFC"></a>触发BFC</h3><p>1.浮动元素：float除none以外的值</p>
<p>2.绝对定位元素：position（absolute、fixed）</p>
<p>3.display 为 inline-block、table-cells、flex</p>
<p>4.overflow 除了visible以外的值（hidden、auto、scroll）</p>
<h3 id="BFC特性以及应用"><a href="#BFC特性以及应用" class="headerlink" title="BFC特性以及应用"></a>BFC特性以及应用</h3><h2 id="1-解决margin叠加问题"><a href="#1-解决margin叠加问题" class="headerlink" title="1.解决margin叠加问题"></a>1.解决margin叠加问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .div1 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: red;</span><br><span class="line">        margin-bottom: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .div2 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: blue;</span><br><span class="line">        margin-top: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .box &#123;</span><br><span class="line">        display: flex;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;div1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;div2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="2-解决margin传递问题"><a href="#2-解决margin传递问题" class="headerlink" title="2.解决margin传递问题"></a>2.解决margin传递问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .div1 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background: red;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .div2 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: blue;</span><br><span class="line">        margin-top: 50px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;div2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-解决浮动问题"><a href="#3-解决浮动问题" class="headerlink" title="3.解决浮动问题"></a>3.解决浮动问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .div1 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        border: 1px solid blue;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .div2 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: blue;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;div1&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;div2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="4-解决覆盖问题"><a href="#4-解决覆盖问题" class="headerlink" title="4.解决覆盖问题"></a>4.解决覆盖问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .div1 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: red;</span><br><span class="line">        float: left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .div2 &#123;</span><br><span class="line">        height: 400px;</span><br><span class="line">        background: blue;</span><br><span class="line">        overflow: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;div1&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;div2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>规范</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap框架</title>
    <url>/2021/06/05/bootstrap/</url>
    <content><![CDATA[<p>Bootstrap 是一个HTML CSS JS框架,用于开发响应式布局,移动设备的Web项目。<br>特色：<br>    1.响应式布局<br>    2.基于flex的栅格系统<br>    3.丰富的组件和工具方法<br>    4.常见交互使用<br>官网：<a href="https://www.bootcss.com/">Bootstrap中文文档</a></p>
<p>Bootstrap元素浮动及清除浮动的class<br>class=”clearfix”  清除浮动</p>
<p>Bootstrap设置文字的对齐方式</p>
<p>class=”text-center”  设置居中文本<br>class=”text-right”   设置向右对齐文本<br>class =”text-left”   设置向左对齐文本</p>
<p>Bootstrap设置各类尺寸的设备class前缀<br>超小设备手机（&lt;768px）：.col-xs-<br>小型设备平板电脑（&gt;=768px）：.col-sm-<br>中型设备台式电脑（&gt;=992px）：.col-md-<br>大型设备台式电脑（&gt;=1200px）：.col-lg-</p>
]]></content>
      <tags>
        <tag>bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>版本控制工具Git</title>
    <url>/2021/07/11/git/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><a href="https://git-scm.com/">Git官网</a><br>VScode安装插件(打开快捷键ctrl + ~)：</p>
<pre><code>git bash    支持linux命令的git控制台
git CMD     支持windows命令的git控制台
git GUI     git可视化界面
</code></pre>
<h1 id="命令操作"><a href="#命令操作" class="headerlink" title="命令操作"></a>命令操作</h1><pre><code>进入项目目录
    cd 路径

在本地进行初始化,建立暂存区
    git init

查看文件存储当前项目的所有版本信息
    .git

工作区 =&gt; 暂存区
    git add 文件名
    git add *       提交所有文件

    git commit -m &quot;这一次提交的描述&quot;

查看当前工作区的状态
    git status

从暂存区恢复文件到工作区
    git checkout 文件名

查看工作区和暂存区版本
    git diff

清屏操作
    clear

查看已经提交到暂存区的历史版本
    git log

恢复文件到指定的某一个版本
    git reset --hard 版本号

生成ssh密钥
    ssh-keygen -t rsa -C &quot;github邮箱&quot;

github配置密匙
    我的电脑 =&gt; 用户 =&gt; 用户文件夹 =&gt; .ssh =&gt; id_rsa.pub

暂存区 =&gt; 远程仓库
    git remote add origin 仓库地址
    git push -u origin master

远程仓库克隆项目到本地
    git clone

从远程仓库同步本地代码
    git pull
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>HTML标签 基础知识巩固笔记</title>
    <url>/2021/04/18/hello-world/</url>
    <content><![CDATA[<!-- Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues). -->

<p><a href="http://www.html5star.com/manual/html5label-meaning/">HTML5 标签含义之元素周期表</a></p>
<h2 id="基本的-HTML-标签"><a href="#基本的-HTML-标签" class="headerlink" title="基本的 HTML 标签"></a>基本的 HTML 标签</h2><h3 id="初始代码"><a href="#初始代码" class="headerlink" title="初始代码"></a>初始代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;  &lt;!-- 告诉浏览器这是一个html文件 --&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;  &lt;!-- html文件的最外层标签：包裹这所有Html标签代码  lang&#x3D;en 表示当前网页是一个英文网站 中文网站zh-CN--&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;  &lt;!-- 元信息：是编写网页中的一些赋值信息  charset&#x3D;&quot;UTF-8&quot;是国际编码:让网页不出现乱码--&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;  &lt;!-- 设置网页标题 --&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 显示网页的内容的区域 --&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h3 id="标题与段落"><a href="#标题与段落" class="headerlink" title="标题与段落"></a>标题与段落</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 在一个网页中,h1标题最为重要,并且一个.html文件中只能出现一个h1标签 --&gt;</span><br><span class="line">&lt;h1&gt;标题&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;h2&gt;标题&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;h3&gt;标题&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;h4&gt;标题&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;!-- h5和h6标签在网页中使用较少 --&gt;</span><br><span class="line">&lt;h5&gt;标题&lt;&#x2F;h5&gt;</span><br><span class="line">&lt;h6&gt;标题&lt;&#x2F;h6&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;这是一个段落&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<h3 id="文本修饰"><a href="#文本修饰" class="headerlink" title="文本修饰"></a>文本修饰</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;!-- 表示强调,会对文本进行加粗 --&gt;</span><br><span class="line">    &lt;strong&gt;这是一段强调的文本&lt;&#x2F;strong&gt;</span><br><span class="line">    &lt;b&gt;这是一段强调的文本&lt;&#x2F;b&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 表示强调,会对文本进行斜体 --&gt;</span><br><span class="line">    &lt;em&gt;这是一段强调的文本&lt;&#x2F;em&gt;</span><br><span class="line">    &lt;i&gt;这是一段强调的文本&lt;&#x2F;i&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 区别在于,strong和em具备语义化。而b和i不具备语义化。 --&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;!-- 下标文本,上标文本 --&gt;</span><br><span class="line">    H&lt;sub&gt;2&lt;&#x2F;sub&gt;O</span><br><span class="line">    a&lt;sup&gt;2&lt;&#x2F;sup&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 删除文本,插入文本 --&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    促销:原价&lt;del&gt;300&lt;&#x2F;del&gt;,现价&lt;ins&gt;100&lt;&#x2F;ins&gt;。</span><br><span class="line">&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<h3 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--  </span><br><span class="line">    src: 引入图片的地址。</span><br><span class="line">    alt: 当图片出现问题的时候,显示一段提示的文字。</span><br><span class="line">    title: 提示信息。</span><br><span class="line">    width: 设置图片的宽度。</span><br><span class="line">    height: 设置图片的高度。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;img src&#x3D;&quot;图片地址&quot; alt&#x3D;&quot;提示文字&quot; title&#x3D;&quot;提示信息&quot; width&#x3D;&quot;666&quot; height&#x3D;&quot;666&quot;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="跳转链接"><a href="#跳转链接" class="headerlink" title="跳转链接"></a>跳转链接</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--  </span><br><span class="line">    href: 链接的地址。</span><br><span class="line">    target: 可以改变链接的打开方式,默认在当前页面打开 _self   新窗口打开 _blank。</span><br><span class="line">    &lt;base target&#x3D;&quot;_blank&quot;&gt; : 改变链接的默认行为,添加在head标签内。</span><br><span class="line">--&gt;</span><br><span class="line">&lt;a href&#x3D;&quot;链接地址&quot; target&#x3D;&quot;链接打开方式&quot;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>
<h3 id="特殊符号"><a href="#特殊符号" class="headerlink" title="特殊符号"></a>特殊符号</h3><p><img src="html_tszf.png" alt="特殊符号"></p>
<h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 列表之间可进行嵌套 --&gt;</span><br><span class="line">&lt;!-- 无序列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;!-- 有序列表 --&gt;</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">    &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">    &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br><span class="line">&lt;!-- 定义列表 --&gt;</span><br><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;HTML&lt;&#x2F;dt&gt; &lt;!-- 定义专业术语或名词 --&gt;</span><br><span class="line">    &lt;dd&gt;超文本标记语言&lt;&#x2F;dd&gt; &lt;!-- 对名词进行解释和描述 --&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure>
<h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- </span><br><span class="line">    表格属性：</span><br><span class="line">    border : 表格边框</span><br><span class="line">    cellpadding : 单元格内的空间</span><br><span class="line">    cellspacing ： 单元格之间的空间</span><br><span class="line">    rowspan ： 合并行</span><br><span class="line">    colspan ： 合并列</span><br><span class="line">    align ： 左右对齐方式,left,center,right</span><br><span class="line">    valign ： 上下对齐方式,top,middle,bottom</span><br><span class="line">--&gt;</span><br><span class="line">&lt;table border&#x3D;&quot;1&quot; cellpadding&#x3D;&quot;30&quot; cellspacing&#x3D;&quot;30&quot;&gt; &lt;!-- 表格的最外层容器 --&gt;</span><br><span class="line">    &lt;caption&gt;天气预报&lt;&#x2F;caption&gt; &lt;!-- 定义表格标题 --&gt;</span><br><span class="line">    &lt;thead&gt; &lt;!-- 语义化标签 头部 --&gt;</span><br><span class="line">        &lt;tr&gt; &lt;!-- 定义表头 --&gt;</span><br><span class="line">            &lt;th colspan&#x3D;&quot;2&quot; align&#x3D;&quot;left&quot; valign&#x3D;&quot;&quot;&gt;日期&lt;&#x2F;th&gt; &lt;!-- 定义表格行 --&gt;</span><br><span class="line">            &lt;th&gt;天气情况&lt;&#x2F;th&gt;</span><br><span class="line">            &lt;th&gt;出行情况&lt;&#x2F;th&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt; </span><br><span class="line">    &lt;&#x2F;thead&gt;</span><br><span class="line">    &lt;tbody&gt; &lt;!-- 语义化标签 身体部分 --&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td rowspan&#x3D;&quot;2&quot;&gt;2021年&lt;&#x2F;td&gt; &lt;!-- 定义表格单元 --&gt;</span><br><span class="line">            &lt;td&gt;1月&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;晴天&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;适合出行&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;2月&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;晴天&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;适合出行&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">    &lt;&#x2F;tbody&gt;</span><br><span class="line">    &lt;tfoot&gt; &lt;!-- 语义化标签 尾部 --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;&#x2F;tfoot&gt;</span><br><span class="line">&lt;&#x2F;table&gt; </span><br></pre></td></tr></table></figure>
<h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&quot;&gt; &lt;!-- 表单的最外层容器 action:提交的地址--&gt;</span><br><span class="line">    &lt;!-- input标签用于搜集用户信息,根据不同的type属性值,展示不同的控件。 --&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; placeholder&#x3D;&quot;请输入用户名&quot; value&#x3D;&quot;&quot;&gt;</span><br><span class="line">    &lt;!-- label 辅助表单 --&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; id&#x3D;&quot;man&quot;&gt;&lt;label for&#x3D;&quot;man&quot;&gt;男&lt;&#x2F;label&gt; </span><br><span class="line">    &lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;gender&quot; id&#x3D;&quot;woman&quot;&gt;&lt;label for&#x3D;&quot;woman&quot;&gt;女&lt;&#x2F;label&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; checked&gt;葡萄</span><br><span class="line">    &lt;input type&#x3D;&quot;checkbox&quot; disabled&gt;香蕉</span><br><span class="line">    &lt;input type&#x3D;&quot;file&quot; multiple&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 多行文本框 --&gt;</span><br><span class="line">    &lt;textarea name&#x3D;&quot;&quot; id&#x3D;&quot;&quot; cols&#x3D;&quot;30&quot; rows&#x3D;&quot;10&quot;&gt;&lt;&#x2F;textarea&gt; </span><br><span class="line"></span><br><span class="line">    &lt;!-- 下拉菜单 --&gt;</span><br><span class="line">    &lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;&quot;&gt;北京&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;&quot;&gt;上海&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;&quot; selected&gt;广州&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;&quot;&gt;深圳&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br><span class="line">    </span><br><span class="line">&lt;&#x2F;form&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- input type属性:</span><br><span class="line">    text：普通输入框 password：密码输入框</span><br><span class="line">    radio：单选框 checkbox：多选框 file：文件</span><br><span class="line">    button：普通按钮 submit：提交按钮</span><br><span class="line">    reset：重置按钮 image：图片按钮</span><br><span class="line">    hidden：隐藏域 email：邮箱输入框</span><br><span class="line">    url：资源地址 search：搜索框</span><br><span class="line">    number：数值输入控件 tel：电话号码</span><br><span class="line">    range：数值选择范围控件 date：日期选择控件</span><br><span class="line">    month：月份选择控件 week：周选择控件</span><br><span class="line">    time：时间选择控件 datetime：日期时间选择控件</span><br><span class="line">    datetime-local：本地日期时间选择控件</span><br><span class="line">    color：颜色选择控件</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 表单属性：</span><br><span class="line">    autocomplete : 自动完成 默认值on &#x2F; off</span><br><span class="line">    autofocus : 获取焦点</span><br><span class="line">    required : 不能为空</span><br><span class="line">    pattern : 正则验证</span><br><span class="line">    method : 数据传输方式,默认GET &#x2F; POST</span><br><span class="line">    enctype : 数据传输类型</span><br><span class="line">    name&#x2F;value : 数据的键值对</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;fieldset&gt; &#x2F;&#x2F; fieldset ： 表单内元素分组</span><br><span class="line">    &lt;legend&gt;登录&lt;&#x2F;legend&gt; &#x2F;&#x2F; legend ： 为fieldset元素定义标题</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        用户名：&lt;input type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">        密码：&lt;input type&#x3D;&quot;password&quot;&gt;</span><br><span class="line">    &lt;&#x2F;p&gt;</span><br><span class="line">    &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;fieldset&gt;</span><br><span class="line"></span><br><span class="line">&lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;&quot;&gt;</span><br><span class="line">    &lt;optgroup label&#x3D;&quot;水果&quot;&gt;&lt;&#x2F;optgroup&gt; &#x2F;&#x2F; optgroup ：定义选项组</span><br><span class="line">    &lt;option value&#x3D;&quot;&quot;&gt;苹果&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;&quot;&gt;香蕉&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;optgroup label&#x3D;&quot;蔬菜&quot;&gt;&lt;&#x2F;optgroup&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;&quot;&gt;茄子&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;option value&#x3D;&quot;&quot;&gt;白菜&lt;&#x2F;option&gt;</span><br><span class="line">&lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure>
<h3 id="div与span"><a href="#div与span" class="headerlink" title="div与span"></a>div与span</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- div:做一个区域划分的块 --&gt;</span><br><span class="line">&lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;!-- span:对文字进行修饰,内联 --&gt;</span><br><span class="line">&lt;span&gt;&lt;&#x2F;span&gt;</span><br></pre></td></tr></table></figure>
<h3 id="br与wbr"><a href="#br与wbr" class="headerlink" title="br与wbr"></a>br与wbr</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; br标签表示换行操作,wbr标签表示软换行操作。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 如果单词太长,或者单词会在浏览器错误的位置换行,可以使用wbr元素来添加Word Break Opportunity(单词换行时机)。</span><br></pre></td></tr></table></figure>
<h3 id="pre与code"><a href="#pre与code" class="headerlink" title="pre与code"></a>pre与code</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; pre元素可定义预格式化的文本。被包围在per元素中的文本通常会保留空格和换行符。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 只应该在表示计算机程序源代码或者其他机器可以阅读的文本内容上使用code标签。虽然code标签通常只是把文本变成等宽字体,但它暗示着这段文本是源程序代码。</span><br><span class="line"></span><br><span class="line">&lt;pre&gt;&lt;code&gt;&lt;p&gt; 123 &lt;&#x2F;p&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;</span><br></pre></td></tr></table></figure>
<h3 id="map与area"><a href="#map与area" class="headerlink" title="map与area"></a>map与area</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 给特殊图形添加链接,area能添加的热区的形状：矩形rect 圆形cicr 多边形poly</span><br><span class="line">&lt;img src&#x3D;&quot;&quot; alt&#x3D;&quot;&quot; usemap&#x3D;&quot;#star&quot;&gt;</span><br><span class="line">&lt;map name&#x3D;&quot;star&quot;&gt;</span><br><span class="line">    &lt;area shape&#x3D;&quot;形状&quot; coords&#x3D;&quot;坐标&quot; href&#x3D;&quot;跳转&quot; alt&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;&#x2F;map&gt;</span><br></pre></td></tr></table></figure>
<h3 id="embed与object"><a href="#embed与object" class="headerlink" title="embed与object"></a>embed与object</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; embed与object能够嵌入一些多媒体,如flash动画,插件等。基本使用没有太多区别,主要是为了兼容不同的浏览器。object元素需要配合param元素使用。</span><br><span class="line"></span><br><span class="line">&lt;embed src&#x3D;&quot;.swf&quot; type&#x3D;&quot;&quot;&gt;</span><br><span class="line">&lt;object data&#x3D;&quot;&quot; type&#x3D;&quot;&quot;&gt;</span><br><span class="line">    &lt;param name&#x3D;&quot;movie&quot; value&#x3D;&quot;.swf&quot;&gt;</span><br><span class="line">&lt;&#x2F;object&gt;</span><br></pre></td></tr></table></figure>
<h3 id="audio与video"><a href="#audio与video" class="headerlink" title="audio与video"></a>audio与video</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; audio标签表示嵌入音频文件,video标签表示嵌入视频文件。默认控件是不显示的,可通过controls属性来显示控件。loop是否循环。autoplay自动播放。</span><br><span class="line"></span><br><span class="line">&lt;audio src&#x3D;&quot;&quot; controls loop autoplay&gt;&lt;&#x2F;audio&gt;</span><br><span class="line">&lt;video src&#x3D;&quot;&quot; controls&gt;&lt;&#x2F;video&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 为了能够支持多个备选文件的兼容支持,可以配合source标签。</span><br><span class="line">&lt;video&gt;</span><br><span class="line">    &lt;source src&#x3D;&quot;&quot; type&#x3D;&quot;video&#x2F;mp4&quot;&gt;</span><br><span class="line">    &lt;source src&#x3D;&quot;&quot; type&#x3D;&quot;video&#x2F;webm&quot;&gt;</span><br><span class="line">&lt;&#x2F;video&gt;</span><br></pre></td></tr></table></figure>
<h3 id="文字注解"><a href="#文字注解" class="headerlink" title="文字注解"></a>文字注解</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; ruby标签定义ruby注释(中文注音或字符),rt标签定义字符(中文注音或字符)的解释或发音。</span><br><span class="line">&lt;ruby&gt;</span><br><span class="line">    寒&lt;rt&gt;hán&lt;&#x2F;rt&gt;冬</span><br><span class="line">&lt;&#x2F;ruby&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; bdo标签可覆盖默认的文本方向。默认值为ltr。css实现文字方向改变：direction: rtl;unicode-bidi: bidi-override;</span><br><span class="line">&lt;p&gt;&lt;bdo dir&#x3D;&quot;rtl&quot;&gt;文字方向改变&lt;&#x2F;bdo&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<h3 id="引用标签"><a href="#引用标签" class="headerlink" title="引用标签"></a>引用标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;blockquote&gt;引用大段的段落解释&lt;&#x2F;blockquote&gt;</span><br><span class="line">&lt;q&gt;引用小段的短语解释&lt;&#x2F;q&gt;</span><br><span class="line">&lt;abbr title&#x3D;&quot;&quot;&gt;缩写或首字母缩略词&lt;&#x2F;abbr&gt;</span><br><span class="line">&lt;address&gt;引用文档地址信息&lt;&#x2F;address&gt;</span><br><span class="line">&lt;cite&gt;引用著作的标题&lt;&#x2F;cite&gt;</span><br></pre></td></tr></table></figure>
<h3 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 作用：引入外部的资源文件</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 引入css文件</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&quot;&gt; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 添加网址标题小图标</span><br><span class="line">&lt;link rel&#x3D;&quot;icon&quot; type&#x3D;&quot;&#x2F;image&#x2F;x-icon&quot; href&#x3D;&quot;.ico&quot;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; dns预解析</span><br><span class="line">&lt;link rel&#x3D;&quot;dns-prefetch&quot; href&#x3D;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; &lt;meta&gt; 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。</span><br><span class="line">&#x2F;&#x2F; &lt;meta&gt; 标签位于文档的头部，不包含任何内容。&lt;meta&gt; 标签的属性定义了与文档相关联的名称&#x2F;值对。</span><br></pre></td></tr></table></figure>
<h3 id="iframe标签"><a href="#iframe标签" class="headerlink" title="iframe标签"></a>iframe标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iframe元素会创建包含另外一个文档的内联框架(即行内框架)。</span><br><span class="line">可以引入其他的html到当前html中显示。</span><br><span class="line">应用场景：数据传输 共享代码 局部刷新 第三方介入等。</span><br><span class="line"></span><br><span class="line">&lt;iframe src&#x3D;&quot;&quot; frameborder&#x3D;&quot;0&quot; width&#x3D;&quot;&quot; height&#x3D;&quot;&quot; scrolling&#x3D;&quot;no&quot; srcdoc&#x3D;&quot;&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line"></span><br><span class="line">frameborder : 规定是否显示框架周围的边框</span><br><span class="line">width与height ：定义iframe的宽度与高度</span><br><span class="line">scrolling ：规定是否在iframe中显示滚动条</span><br><span class="line">src ：规定在iframe中引入的URL</span><br><span class="line">srcdoc ：规定在iframe中显示的页面内容,可以添加html代码</span><br></pre></td></tr></table></figure>

<h2 id="HTML标签类型分类"><a href="#HTML标签类型分类" class="headerlink" title="HTML标签类型分类"></a>HTML标签类型分类</h2><h3 id="使用类型分类标签"><a href="#使用类型分类标签" class="headerlink" title="使用类型分类标签"></a>使用类型分类标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">块级标签(block)：</span><br><span class="line">    标签独占一行，可指定宽、高。</span><br><span class="line">特性：</span><br><span class="line">    1.独占一行</span><br><span class="line">    2.支持所有样式</span><br><span class="line">    3.不写宽的时候,跟父元素的宽相同</span><br><span class="line">    4.多个块状元素标签写在一起，默认排列方式为从上至下</span><br><span class="line">    5.所占区域是一个矩形</span><br><span class="line">常用的块状元素有：</span><br><span class="line">    &lt;div&gt;、&lt;p&gt;、&lt;h1&gt;...&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt;、&lt;form&gt;、&lt;li&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">内联标签(inline)：</span><br><span class="line">    内联(行级)标签：标签在一行内，宽度与高度由内容决定，只有在内容超过HTML的宽度时，才会换行。</span><br><span class="line">特性：</span><br><span class="line">    1.多个内联标签写在一起，默认排列方式为从左至右</span><br><span class="line">    2.有些样式不支持,例如：width height margin padding</span><br><span class="line">    3.不写宽的时候,宽度由内容决定</span><br><span class="line">    4.内联标签之间会有空隙,原因是换行产生的</span><br><span class="line">常用的内联元素有：</span><br><span class="line">    &lt;a&gt;、&lt;span&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">内联块状标签(inline-block)：</span><br><span class="line">    内联块状元素（inline-block）就是同时具备内联元素、块状元素的特点，代码display:inline-block就是将元素设置为内联块状元素。(css2.1新增)，&lt;img&gt;、&lt;input&gt;标签就是这种内联块状标签。</span><br><span class="line">特性：</span><br><span class="line">    1.不会自动换行</span><br><span class="line">    2.能够设置宽高</span><br><span class="line">    3.默认排列方式为从左到右</span><br><span class="line">    4.可以使用text-align:center使内容相对于父盒子水平居中对齐，例如img标签，可以使用text-align:center，相对父盒子居中对齐、margin:0 auto无效</span><br><span class="line">    5.水平排列，但所有元素默认会有1个空格的间隙，因为元素之间在html中书写有回车换行，浏览器解析会将其解析成一个空格。</span><br><span class="line">常用的内联块状元素有：</span><br><span class="line">    &lt;img&gt;、&lt;input&gt;、&lt;select&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注：布局一般使用块标签,修饰文本一般使用内联标签。</span><br></pre></td></tr></table></figure>
<h3 id="使用内容分类标签"><a href="#使用内容分类标签" class="headerlink" title="使用内容分类标签"></a>使用内容分类标签</h3><p><a href="https://html.spec.whatwg.org/multipage/dom.html">HTML 标准网站</a><br><img src="htmlgf.PNG" alt="HTML标准"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flow : 流内容,表示网页中可以感知到的标签</span><br><span class="line">Metadata : 元数据,比如网页中的编码,base link meta style title等</span><br><span class="line">Sectioning : 分区,表示划分区域,比如nav aside article section</span><br><span class="line">Heading : 标题,h1到h6</span><br><span class="line">Phrasing : 措辞,对文本的一些修饰,基本都是内联的标签</span><br><span class="line">Embedded : 嵌入的,比如图片,视频,音频</span><br><span class="line">Interactive : 互动的,比如用户可以跟界面进行交互的操作</span><br></pre></td></tr></table></figure>
<h3 id="使用显示分类标签"><a href="#使用显示分类标签" class="headerlink" title="使用显示分类标签"></a>使用显示分类标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">替换元素：浏览器根据元素的标签和属性,来决定元素的具体显示内容。</span><br><span class="line">    img input ...</span><br><span class="line"></span><br><span class="line">非替换元素：将内容直接告诉浏览器,将其显示出来。</span><br><span class="line">    h1 div p ...</span><br></pre></td></tr></table></figure>
<h2 id="HTML标签嵌套规范"><a href="#HTML标签嵌套规范" class="headerlink" title="HTML标签嵌套规范"></a>HTML标签嵌套规范</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">块标签可以嵌套内联标签：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;span&gt;&lt;&#x2F;span&gt;&lt;a&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">块标签不一定能嵌套块标签：</span><br><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">错误的写法：</span><br><span class="line">&lt;p&gt;</span><br><span class="line">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">内联不能嵌套块,特殊情况下a标签可以：</span><br><span class="line">错误的写法：</span><br><span class="line">&lt;span&gt;</span><br><span class="line">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;span&gt;</span><br><span class="line"></span><br><span class="line">特殊情况写法：</span><br><span class="line">&lt;a&gt;</span><br><span class="line">    &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>html5新语义化标签</title>
    <url>/2021/05/23/html5xyyh/</url>
    <content><![CDATA[<p>header : 页眉<br>footer : 页脚<br>main : 主体<br>hgroup : 标题组合<br>nav : 导航</p>
<p>article : 独立的内容<br>aside : 辅助信息的内容<br>section : 区域<br>figure : 描述图像或视频<br>figcaption : 描述图像或视频的标题部分</p>
<p>datalist : 选项列表<br>details/summary : 文档细节/文档标题<br>progress/meter : 定义进度条/定义度量范围<br>time : 定义日期或时间<br>mark : 带有记号的文本</p>
<p>video ：定义视频,支持三种格式Ogg、MPEG4、WebM </p>
]]></content>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 构造函数</title>
    <url>/2021/06/30/jsgzhs/</url>
    <content><![CDATA[<h1 id="不使用new创建对象"><a href="#不使用new创建对象" class="headerlink" title="不使用new创建对象"></a>不使用new创建对象</h1><pre><code>工厂模式(满足下面三个步骤创建对象的函数,叫做工厂方法)：
    1.原料
    2.加工
    3.出厂
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, sex</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.原料</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.加工</span></span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.sex = sex;</span><br><span class="line">    obj.showName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    obj.showSex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.sex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.出厂</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = createPerson(<span class="string">&quot;blue&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">p1.showName();</span><br><span class="line">p1.showSex();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = createPerson(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line">p2.showName();</span><br><span class="line">p2.showSex();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Array</span>); <span class="comment">// function</span></span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1.push === arr2.push); <span class="comment">// true,push的地址一样</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.showName === p2.showName); <span class="comment">// false,没有new,每一个新创建出来的对象独有一套函数。</span></span><br></pre></td></tr></table></figure>
<h1 id="使用new创建对象"><a href="#使用new创建对象" class="headerlink" title="使用new创建对象"></a>使用new创建对象</h1><pre><code>某一个函数,使用new运算符去调用
    1.当前函数中的this指向新创建的对象
    2.自动去完成1,原料和3,出厂
这种通过new调用的函数,叫做构造函数,构造函数可以构造对象,构造函数一般情况下首字母大写。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, sex</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.原料</span></span><br><span class="line">    <span class="comment">// var obj = new Object();</span></span><br><span class="line">    <span class="comment">// this = new Object();</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.加工</span></span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    <span class="built_in">this</span>.showName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.showSex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.sex);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.出厂</span></span><br><span class="line">    <span class="comment">// return obj;</span></span><br><span class="line">    <span class="comment">// return this;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> createPerson(<span class="string">&quot;blue&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">p1.showName();</span><br><span class="line">p1.showSex();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> createPerson(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line">p2.showName();</span><br><span class="line">p2.showSex();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.showName === p2.showName); <span class="comment">// false,没有new,每一个新创建出来的对象独有一套函数。</span></span><br></pre></td></tr></table></figure>
<h1 id="prototype-原型对象"><a href="#prototype-原型对象" class="headerlink" title="prototype 原型对象"></a>prototype 原型对象</h1><pre><code>prototype 每一个函数上,都有一个原型对象

用在构造函数上,可以给构造函数的原型prototype添加方法。
将方法添加到构造函数的原型prototype对象上,构造函数构造出来的对象共享原型上所有的方法。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">alert(show.prototype); <span class="comment">// [object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, sex</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Person构造函数的添加方法添加在构造函数的原型上prototype</span></span><br><span class="line">Person.prototype.showName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.showSex = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.sex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> Person(<span class="string">&quot;blue&quot;</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">p1.showName();</span><br><span class="line">p1.showSex();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> Person(<span class="string">&quot;red&quot;</span>, <span class="string">&quot;女&quot;</span>);</span><br><span class="line">p2.showName();</span><br><span class="line">p2.showSex();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.showName === p2.showName); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Node.js基础操作</title>
    <url>/2021/07/23/nodeJS/</url>
    <content><![CDATA[<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p><a href="https://nodejs.org/zh-cn/">Node.js官网下载</a></p>
<p><a href="https://github.com/nvm-sh/nvm/blob/master/README.md">nvm安装与维护多个Node.js的版本</a><br>查看当前node版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br></pre></td></tr></table></figure>
<p>键入node进入命令交互模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node</span><br><span class="line">&gt; console.log(&#39;Hello World!&#39;);</span><br><span class="line">Hello World!</span><br></pre></td></tr></table></figure>
<p>安装<a href="https://www.jianshu.com/p/f60e14db0b4e">nodemon</a>实时监测</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cnpm install nodemon -g</span><br></pre></td></tr></table></figure>
<h1 id="模块-包与CommonJS"><a href="#模块-包与CommonJS" class="headerlink" title="模块/包与CommonJS"></a>模块/包与CommonJS</h1><h2 id="内置的模块"><a href="#内置的模块" class="headerlink" title="内置的模块"></a>内置的模块</h2><p><a href="http://nodejs.cn/api/">Node.js API 文档</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const os &#x3D; require(&quot;os&quot;);</span><br><span class="line">&#x2F;&#x2F; 查看主机名</span><br><span class="line">console.log(os.hostname());</span><br></pre></td></tr></table></figure>
<h2 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h2><h2 id="自定义模块"><a href="#自定义模块" class="headerlink" title="自定义模块"></a>自定义模块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 一个js文件就是一个模块</span><br><span class="line">const hello &#x3D; () &#x3D;&gt; &#123;</span><br><span class="line">    console.log(&quot;hello&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 暴露接口</span><br><span class="line">module.exports.hello &#x3D; hello</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 调用模块</span><br><span class="line">const greeting &#x3D; require(&#39;.&#x2F;src&#x2F;greeting.js&#39;)</span><br><span class="line"></span><br><span class="line">greeting.hello()</span><br></pre></td></tr></table></figure>
<h1 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h1><h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; url</span><br><span class="line">&#123;</span><br><span class="line">  Url: [Function: Url],</span><br><span class="line">  parse: [Function: urlParse],</span><br><span class="line">  resolve: [Function: urlResolve],</span><br><span class="line">  resolveObject: [Function: urlResolveObject],</span><br><span class="line">  format: [Function: urlFormat],</span><br><span class="line">  URL: [class URL],</span><br><span class="line">  URLSearchParams: [class URLSearchParams],</span><br><span class="line">  domainToASCII: [Function: domainToASCII],</span><br><span class="line">  pathToFileURL: [Function: pathToFileURL],</span><br><span class="line">  fileURLToPath: [Function: fileURLToPath]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="url-parse"><a href="#url-parse" class="headerlink" title="url.parse"></a>url.parse</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; url.parse(&#39;https:&#x2F;&#x2F;www.baidu.com:8080&#x2F;api.php?from&#x3D;zhou&amp;course&#x3D;node#level1&#39;,true,true)    </span><br><span class="line">Url &#123;</span><br><span class="line">  protocol: &#39;https:&#39;,</span><br><span class="line">  slashes: true,</span><br><span class="line">  auth: null,</span><br><span class="line">  host: &#39;www.baidu.com:8080&#39;,</span><br><span class="line">  port: &#39;8080&#39;,</span><br><span class="line">  hostname: &#39;www.baidu.com&#39;,</span><br><span class="line">  hash: &#39;#level1&#39;,</span><br><span class="line">  search: &#39;?from&#x3D;zhou&amp;course&#x3D;node&#39;,</span><br><span class="line">  query: [Object: null prototype] &#123; from: &#39;zhou&#39;, course: &#39;node&#39; &#125;,</span><br><span class="line">  pathname: &#39;&#x2F;api.php&#39;,</span><br><span class="line">  path: &#39;&#x2F;api.php?from&#x3D;zhou&amp;course&#x3D;node&#39;,</span><br><span class="line">  href: &#39;https:&#x2F;&#x2F;www.baidu.com:8080&#x2F;api.php?from&#x3D;zhou&amp;course&#x3D;node#level1&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>项目工具PostCss</title>
    <url>/2021/06/08/postcss/</url>
    <content><![CDATA[<p>PostCss是一个功能单一的工具,提供了使用JavaScript代码来处理CSS,利用PostCss可以实现工程化操作。<br>如：自动添加浏览器前缀,代码合并,代码压缩等。<br>官方网址：<a href="https://postcss.org/">PostCss</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1.安装node环境<br>2.安装PostCss ：npm install postcss-cli -g<br>3.-o 、-w<br>4.配置文件：postcss.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> pcImport = <span class="built_in">require</span>(<span class="string">&#x27;postcss-import&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cssnano = <span class="built_in">require</span>(<span class="string">&#x27;cssnano&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cssnext = <span class="built_in">require</span>(<span class="string">&#x27;postcss-cssnext&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        autoprefixer(&#123;</span><br><span class="line">            browsers: [<span class="string">&#x27; &gt; 0%&#x27;</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">        pcImport,</span><br><span class="line">        cssnano,</span><br><span class="line">        cssnext,</span><br><span class="line">        stylelint(&#123;</span><br><span class="line">            <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;color-no-invalid-hex&quot;</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        sprites(&#123;</span><br><span class="line">            sprites: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h1 id="常用的postcss插件"><a href="#常用的postcss插件" class="headerlink" title="常用的postcss插件"></a>常用的postcss插件</h1><p>1 . Autoprefixer : 自动添加浏览器前缀<br>安装：cnpm install Autoprefixer</p>
<p>2 . postcss-import : 对CSS文件进行合并<br>安装：cnpm install postcss-import</p>
<p>3 . cssnano : 对CSS文件进行代码压缩<br>安装：cnpm install cssnano</p>
<p>4 . postcss-cssnext : 处理比较高级的CSS语法,降级操作<br>安装：cnpm install postcss-cssnext</p>
<p>5 . stylelint : 代码规范 语法检测<br>安装：cnpm install stylelint</p>
<p>6 . postcss-sprites ： 自动生成精灵图<br>安装：cnpm install postcss-sprites</p>
]]></content>
      <tags>
        <tag>PostCss</tag>
        <tag>项目工具</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习笔记</title>
    <url>/2021/09/13/react/</url>
    <content><![CDATA[<h1 id="React-初识"><a href="#React-初识" class="headerlink" title="React 初识"></a>React 初识</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><blockquote><p>React是Facebook开发出的一款声明式，高效且灵活的用于构建用户界面的JavaScript库。使用React可以将一些简短、独立的代码片段组合成复杂的UI界面，这些代码片段被称为”组件”。</p>
</blockquote>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><blockquote><ol>
<li>React拥有较高的性能，代码逻辑非常简单。</li>
<li>声明式设计（采用声明范式）。</li>
<li>高效，通过对DOM的模拟，最大限度地减少与DOM的交互。</li>
<li>灵活，React可以与已知的库或框架很好地配合。</li>
<li>JSX语法，JSX是JavaScript和xml的结合。</li>
<li>组件，通过React构建组件，使得代码更加容易得到复用，能够很好的应用在大项目的开发中。</li>
<li>单向响应的数据流，React实现了单向相应的数据流，从而减少了重复代码。</li>
</ol>
</blockquote>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>……</p>
<h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote><ol>
<li>react.js (核心文件)</li>
<li>react-dom.js (渲染页面中的DOM，依赖于react核心文件)</li>
<li>babel.js (将ES6转换成ES5，JSX语法转换成JavaScript)</li>
</ol>
</blockquote>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><pre><code>npm i react --s
npm i react-dom --s
npm i babel-standalone --s
</code></pre>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><pre><code>#定义项目所需要的各种模块及配置信息
    cnpm init -y 
#安装react
    cnpm i react react-dom babel-standalone -S
#在项目中引入react
    &lt;script src=&quot;node_modules/react/umd/react.development.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;node_modules/react-dom/umd/react-dom.development.js&quot;&gt;&lt;/script&gt;
    &lt;script src=&quot;node_modules/babel-standalone/babel.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv&#x3D;&quot;X-UA-Compatible&quot; content&#x3D;&quot;IE&#x3D;edge&quot;&gt;</span><br><span class="line">    &lt;meta name&#x3D;&quot;viewport&quot; content&#x3D;&quot;width&#x3D;device-width, initial-scale&#x3D;1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;&#x2F;title&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;node_modules&#x2F;react&#x2F;umd&#x2F;react.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;node_modules&#x2F;react-dom&#x2F;umd&#x2F;react-dom.development.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;script src&#x3D;&quot;node_modules&#x2F;babel-standalone&#x2F;babel.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 创建dom根节点 一个页面中需要有一个根节点 这个节点下的内容就会被react所管理 --&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;demoReact&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;script type&#x3D;&quot;text&#x2F;babel&quot;&gt;</span><br><span class="line">        &#x2F;&#x2F; jsx中HTML标签必须按照w3c的规范来写，标签必须闭合</span><br><span class="line">        let myDom &#x3D; &lt;h1&gt;你好，世界！&lt;&#x2F;h1&gt;; </span><br><span class="line">        ReactDOM.render(myDom,document.getElementById(&quot;demoReact&quot;));</span><br><span class="line">    &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<h1 id="jsx语法"><a href="#jsx语法" class="headerlink" title="jsx语法"></a>jsx语法</h1>]]></content>
  </entry>
  <entry>
    <title>sass和less CSS预处理器</title>
    <url>/2021/06/07/sass-less/</url>
    <content><![CDATA[<p>Sass和Less都属于CSS预处理器,CSS预处理器定义了一种新的语言,其基本思想是,用一种专门的编程语言,为CSS增加了一些编程的特性,如：变量,语句,函数,继承等概念。将CSS作为目标生成文件,然后开发者就只要使用这种语言进行CSS的编码工作。</p>
<p>官网地址 <a href="https://lesscss.org/">Less</a></p>
<p>官网地址 <a href="https://www.sass.hk/">Sass</a></p>
<h1 id="注释-变量-插值-作用域"><a href="#注释-变量-插值-作用域" class="headerlink" title="注释,变量,插值,作用域"></a>注释,变量,插值,作用域</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注释 */</span></span><br><span class="line"><span class="comment">// 单行注释,不会被编译出来</span></span><br><span class="line"><span class="comment">/* 多行注释,会被编译出来 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 变量,插值,作用域 */</span></span><br><span class="line"><span class="variable">@number :</span> <span class="number">123px</span>;</span><br><span class="line"><span class="variable">@key :</span> margin;</span><br><span class="line"><span class="variable">@i :</span> <span class="number">2</span>;</span><br><span class="line"><span class="selector-class">.box</span><span class="variable">@&#123;i&#125;</span>&#123;</span><br><span class="line">    <span class="attribute">width </span>: <span class="variable">@number</span>;</span><br><span class="line">    <span class="attribute">height </span>: <span class="variable">@number</span>;</span><br><span class="line">    @&#123;key&#125; : <span class="selector-tag">auto</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 变量查找,就近原则 */</span></span><br><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line">    <span class="attribute">height </span>: <span class="variable">@number</span>;</span><br><span class="line">    <span class="variable">@number :</span> <span class="number">456px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 注释 */</span></span><br><span class="line"><span class="comment">// 单行注释,不会被编译出来</span></span><br><span class="line"><span class="comment">/* 多行注释,会被编译出来 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 变量,插值,作用域 */</span></span><br><span class="line"><span class="variable">$number</span> : <span class="number">123px</span>;</span><br><span class="line"><span class="variable">$key</span> : margin;</span><br><span class="line"><span class="variable">$i</span> : <span class="number">3</span>;</span><br><span class="line"><span class="selector-class">.box</span>#&#123;<span class="variable">$i</span>&#125;&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$number</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$number</span>;</span><br><span class="line">    #&#123;<span class="variable">$key</span>&#125; : auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Sass的作用域有顺序 */</span></span><br><span class="line"><span class="selector-class">.box3</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">$number</span>;</span><br><span class="line">    <span class="variable">$number</span> : <span class="number">465px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$number</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="选择器嵌套-伪类嵌套-属性嵌套"><a href="#选择器嵌套-伪类嵌套-属性嵌套" class="headerlink" title="选择器嵌套,伪类嵌套,属性嵌套"></a>选择器嵌套,伪类嵌套,属性嵌套</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="selector-tag">li</span>&#123;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;<span class="attribute">margin</span>: <span class="number">10px</span>;&#125;</span><br><span class="line">        <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>: <span class="number">20px</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">        <span class="comment">// less没有这种属性嵌套的写法</span></span><br><span class="line">        <span class="comment">/* font: &#123;</span></span><br><span class="line"><span class="comment">            size: 10px;</span></span><br><span class="line"><span class="comment">            weight: bold;</span></span><br><span class="line"><span class="comment">            family: 宋体;</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span>&#123;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">    <span class="selector-tag">li</span>&#123;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;<span class="attribute">margin</span>: <span class="number">10px</span>;&#125;</span><br><span class="line">        <span class="selector-tag">p</span>&#123;<span class="attribute">margin</span>: <span class="number">20px</span>;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;<span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">        <span class="attribute">font</span>: &#123;</span><br><span class="line">            size: <span class="number">10px</span>;</span><br><span class="line">            weight: bold;</span><br><span class="line">            family: 宋体;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="SASS数据类型"><a href="#SASS数据类型" class="headerlink" title="SASS数据类型"></a>SASS数据类型</h1><pre><code>sass支持7种主要的数据类型
    1.数字,如：1.2  13  10px
    2.字符串,如：&quot;foo&quot;,&#39;bar&#39;,baz
    3.颜色,如：blue,#04a3f9,rgb(255,0,0,0.5)
    4.布尔值,如：true,false
    5.空值,如：null
    6.列表(list),用空格或逗号分隔,如：c 1.5em 1em 0 2em, Helvetica, Arial， sans-serif
    7.映射,如：key1:value1,key2:value2
</code></pre>
<h1 id="运算-单位-转义-颜色"><a href="#运算-单位-转义-颜色" class="headerlink" title="运算,单位,转义,颜色"></a>运算,单位,转义,颜色</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="variable">@num :</span> <span class="number">100px</span>;   <span class="comment">// 顺序决定单位</span></span><br><span class="line"><span class="selector-class">.box4</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@num</span> * <span class="number">3</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@num</span> + <span class="number">10em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10em</span> + <span class="variable">@num</span>;</span><br><span class="line">    <span class="attribute">font </span>: <span class="number">20px</span> / <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="string">~&quot;20px / 1.5&quot;</span>; <span class="comment">// 不想转义使用~&quot; &quot;</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#010203</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$num</span> : <span class="number">100px</span>; </span><br><span class="line"><span class="selector-class">.box4</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">$num</span> * <span class="number">3</span>;</span><br><span class="line">    <span class="comment">// height: $num + 20em; sass中单位不同不能运算</span></span><br><span class="line">    <span class="attribute">font</span> : <span class="number">20px</span> / <span class="number">1.5</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> / <span class="number">1.5</span>; <span class="comment">// sass默认 / 是分割的操作,不是运算</span></span><br><span class="line">    <span class="attribute">padding</span>: (<span class="number">20px</span> / <span class="number">1.5</span>); <span class="comment">//使用()为运算</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#010203</span> * <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数演示,其他函数文档查看使用</span></span><br><span class="line"><span class="selector-class">.box5</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: round(<span class="number">3.5px</span>); <span class="comment">// 四舍五入</span></span><br><span class="line">    <span class="attribute">height</span>: percentage(<span class="number">0.2</span>); <span class="comment">// 自动转为百分比</span></span><br><span class="line">    <span class="attribute">padding</span>: sqrt(<span class="number">25%</span>); <span class="comment">// 开平方</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义函数</span></span><br><span class="line"><span class="keyword">@function</span> sum(<span class="variable">$n</span>,<span class="variable">$m</span>)&#123;</span><br><span class="line">    <span class="keyword">@return</span> <span class="variable">$n</span> + <span class="variable">$m</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box5</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: round(<span class="number">3.5px</span>); <span class="comment">// 四舍五入</span></span><br><span class="line">    <span class="attribute">height</span>: percentage(<span class="number">0.2</span>); <span class="comment">// 自动转为百分比</span></span><br><span class="line">    <span class="attribute">margin</span>: random(); <span class="comment">// 生成0到1的随机数</span></span><br><span class="line">    <span class="attribute">font-size</span>: sum(<span class="number">4px</span> , <span class="number">5px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="混入-命名空间-less-继承"><a href="#混入-命名空间-less-继承" class="headerlink" title="混入,命名空间(less),继承"></a>混入,命名空间(less),继承</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 混入操作</span></span><br><span class="line"><span class="selector-class">.show</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.hide</span>(<span class="variable">@color</span>)&#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box6</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="selector-class">.show</span>;</span><br><span class="line">    <span class="selector-class">.hide</span>(blue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 命名空间</span></span><br><span class="line"><span class="selector-id">#QQ</span>()&#123;</span><br><span class="line">    <span class="selector-class">.show</span>&#123;<span class="attribute">display</span>: inline-block;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box7</span>&#123;</span><br><span class="line">    <span class="selector-id">#QQ</span><span class="selector-class">.show</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box8</span>&#123;</span><br><span class="line">    <span class="selector-id">#QQ</span><span class="selector-class">.show</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 继承</span></span><br><span class="line"><span class="selector-class">.line</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box7</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span>:<span class="selector-tag">extend</span>(.line);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box8</span>&#123;</span><br><span class="line">    <span class="selector-tag">&amp;</span>:<span class="selector-tag">extend</span>(.line);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 混入操作</span></span><br><span class="line"><span class="keyword">@mixin</span> show &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@mixin</span> hide(<span class="variable">$color</span>) &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box6</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="keyword">@include</span> show;</span><br><span class="line">    <span class="keyword">@include</span> hide(red);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 样式继承</span></span><br><span class="line">%line&#123;</span><br><span class="line">    <span class="attribute">display</span>: inline;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box7</span>&#123;</span><br><span class="line">    <span class="keyword">@extend</span> %line;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box8</span>&#123;</span><br><span class="line">    <span class="keyword">@extend</span> %line;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="合并-媒体查询"><a href="#合并-媒体查询" class="headerlink" title="合并,媒体查询"></a>合并,媒体查询</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 样式合并</span></span><br><span class="line"><span class="selector-class">.box9</span>&#123;</span><br><span class="line">    <span class="comment">// 样式的逗号分隔</span></span><br><span class="line">    <span class="selector-tag">background</span>+: <span class="selector-tag">url</span>(a.png);</span><br><span class="line">    <span class="selector-tag">background</span>+: <span class="selector-tag">url</span>(b.png);</span><br><span class="line">    <span class="comment">// 样式的复合</span></span><br><span class="line">    <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">scale</span>(<span class="number">2</span>);</span><br><span class="line">    <span class="selector-tag">transform</span>+<span class="selector-tag">_</span>: <span class="selector-tag">rotate</span>(<span class="number">30deg</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 媒体查询</span></span><br><span class="line"><span class="selector-class">.box10</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="keyword">@media</span> all <span class="keyword">and</span>(<span class="attribute">min-width</span>:<span class="number">768px</span>) &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@media</span> all <span class="keyword">and</span>(<span class="attribute">min-width</span>:<span class="number">1440px</span>) &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$background</span> : (</span><br><span class="line">    a : url(a.png),</span><br><span class="line">    b : url(b.png)</span><br><span class="line">);</span><br><span class="line"><span class="variable">$tranform</span> : (</span><br><span class="line">    a : scale(<span class="number">2</span>),</span><br><span class="line">    b : rotate(<span class="number">30deg</span>)</span><br><span class="line">);</span><br><span class="line"><span class="selector-class">.box9</span>&#123;</span><br><span class="line">    <span class="attribute">background</span> : map-values(<span class="variable">$background</span>); <span class="comment">// 样式的逗号分隔</span></span><br><span class="line">    <span class="attribute">transform</span> : zip(map-values(<span class="variable">$tranform</span>)...); <span class="comment">// 样式的复合</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 媒体查询</span></span><br><span class="line"><span class="selector-class">.box10</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="keyword">@media</span> all <span class="keyword">and</span>(<span class="attribute">min-width</span>:<span class="number">768px</span>) &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">600px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@media</span> all <span class="keyword">and</span>(<span class="attribute">min-width</span>:<span class="number">1440px</span>) &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">900px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="条件-循环-导入"><a href="#条件-循环-导入" class="headerlink" title="条件,循环,导入"></a>条件,循环,导入</h1><figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件</span></span><br><span class="line"><span class="variable">@count :</span> <span class="number">3</span>;</span><br><span class="line"><span class="selector-class">.get</span>(<span class="variable">@cn</span>) <span class="keyword">when</span> (<span class="variable">@cn</span> &gt; <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span> + <span class="variable">@cn</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.get</span>(<span class="variable">@cn</span>) <span class="keyword">when</span> (<span class="variable">@cn</span> &lt; <span class="number">4</span>)&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span> + <span class="variable">@cn</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box11</span>&#123;</span><br><span class="line">    <span class="selector-class">.get</span>(<span class="variable">@count</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="variable">@count2 :</span> <span class="number">0</span>;</span><br><span class="line"><span class="selector-class">.get2</span>(<span class="variable">@cn</span>) <span class="keyword">when</span> (<span class="variable">@cn</span> &lt; <span class="number">3</span>)&#123;</span><br><span class="line">    <span class="selector-class">.get2</span>((<span class="variable">@cn</span>+<span class="number">1</span>));</span><br><span class="line">    <span class="selector-class">.box-</span><span class="variable">@&#123;cn&#125;</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span> + <span class="variable">@cn</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.get2</span>(<span class="variable">@count2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// @import &#x27;引入的less文件地址&#x27;;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件</span></span><br><span class="line"><span class="variable">$count</span> : <span class="number">5</span>;</span><br><span class="line"><span class="selector-class">.box11</span>&#123;</span><br><span class="line">    <span class="keyword">@if</span>(<span class="variable">$count</span> &gt; <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span> + <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">@else</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span> + <span class="variable">$count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 循环</span></span><br><span class="line"><span class="keyword">@for</span> <span class="variable">$i</span> from <span class="number">0</span> through <span class="number">2</span>&#123;</span><br><span class="line">    <span class="selector-class">.box-</span>#&#123;<span class="variable">$i</span>&#125;&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100px</span> + <span class="variable">$i</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @import &#x27;引入的scss文件地址&#x27;;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>sass</tag>
        <tag>less</tag>
      </tags>
  </entry>
  <entry>
    <title>项目工具Gulp</title>
    <url>/2021/07/11/tool-Gulp/</url>
    <content><![CDATA[<p>官网地址 <a href="https://www.gulpjs.com.cn/">gulp.js</a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>1.下载和安装<a href="https://nodejs.org/zh-cn/">Node.js</a></p>
<pre><code>node -v 查看node.js的版本
</code></pre>
<p>2.启动Node.js控制台</p>
<pre><code>npm     下载源是国外网站
cnpm    [淘宝镜像](https://npm.taobao.org/)
    安装：npm install cnpm -g --registry=https://registry.npm.taobao.org
</code></pre>
<p>3.安装gulp到本地</p>
<pre><code>安装：cnpm install gulp -g
gulp -v 查看gulp的版本
</code></pre>
<p>4.初始化当前目录,生成package.json文件,存放项目的配置信息</p>
<pre><code>cnpm init
</code></pre>
<p>5.在项目里面安装gulp到本地</p>
<pre><code>cnpm install gulp@3.9.1 --save-dev
    --save   将文件安装到本地的文件夹
    -dev    将安装gulp的信息保存在package.json里面

简写：cnpm i gulp@3.9.1 -D
</code></pre>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>6.创建一个gulpfile.js的文件来编写任务</p>
<pre><code>gulp hello(第一个参数名字) 运行编写的任务
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// require() 引入模块,使用模块函数</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// gulp.task() 编写任务</span></span><br><span class="line"><span class="comment">// 第一个参数：自定义的执行任务名字</span></span><br><span class="line"><span class="comment">// 第二个参数：回调函数,任务执行的功能</span></span><br><span class="line">gulp.task(<span class="string">&quot;hello&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// gulp.src()      找到源文件路径</span></span><br><span class="line"><span class="comment">// gulp.dest()     找到目标文件路径,如果路径不存在,自动创建</span></span><br><span class="line"><span class="comment">// pipe()          理解程序运行管道</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 整理.html文件</span></span><br><span class="line">gulp.task(<span class="string">&quot;copy-html&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&quot;index.html&quot;</span>)</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;dist/&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝图片</span></span><br><span class="line">gulp.task(<span class="string">&quot;images&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src(<span class="string">&quot;img/**/*&quot;</span>).pipe(gulp.dest(<span class="string">&quot;dist/images&quot;</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拷贝多个文件到一个目录</span></span><br><span class="line">gulp.task(<span class="string">&quot;data&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> gulp.src([<span class="string">&quot;json/*.json&quot;</span>, <span class="string">&quot;xml/*.xml&quot;</span>, <span class="string">&quot;!xml/06.xml&quot;</span>])</span><br><span class="line">        .pipe(gulp.dest(<span class="string">&quot;dist/data&quot;</span>))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次执行多个任务</span></span><br><span class="line">gulp.task(<span class="string">&quot;build&quot;</span>, [<span class="string">&quot;copy-html&quot;</span>, <span class="string">&quot;images&quot;</span>, <span class="string">&quot;data&quot;</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;执行完毕&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="监听"><a href="#监听" class="headerlink" title="监听"></a>监听</h1><p>7.监听到文件有改变,会自动去执行对应的任务,更新数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gulp.watch()</span></span><br><span class="line"><span class="comment">// 第一个参数,文件监听的路径 </span></span><br><span class="line"><span class="comment">// 第二个参数,执行的任务</span></span><br><span class="line">gulp.task(<span class="string">&quot;watch&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">&quot;index.html&quot;</span>, [<span class="string">&quot;copy-html&quot;</span>]);</span><br><span class="line">    gulp.watch(<span class="string">&quot;img/**/*&quot;</span>, [<span class="string">&quot;images&quot;</span>]);</span><br><span class="line">    gulp.watch([<span class="string">&quot;json/*.json&quot;</span>, <span class="string">&quot;xml/*.xml&quot;</span>, <span class="string">&quot;!xml/06.xml&quot;</span>],[<span class="string">&quot;data&quot;</span>]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 启动一个服务器 gulp-connect</span></span><br><span class="line"><span class="comment">// 需要在每一条任务后面加上 .pipe(connect.reload()); 来实时刷新</span></span><br><span class="line"><span class="keyword">const</span> GulpClient = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> connect = <span class="built_in">require</span>(<span class="string">&quot;gulp-connect&quot;</span>);</span><br><span class="line">GulpClient.task(<span class="string">&quot;server&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    connect.server(&#123;</span><br><span class="line">        root: <span class="string">&quot;dist&quot;</span>,</span><br><span class="line">        port: <span class="number">8887</span>,  <span class="comment">//0~65535</span></span><br><span class="line">        livereload: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 启动一个默认的任务,同时启动监听和服务器,直接使用gulp命令启动</span></span><br><span class="line">gulp.task(<span class="string">&quot;default&quot;</span>, [<span class="string">&quot;watch&quot;</span>, <span class="string">&quot;server&quot;</span>]);</span><br></pre></td></tr></table></figure>
<h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p><a href="https://gulpjs.com/plugins/">gulp插件</a></p>
<pre><code>commonJS规范：
    1.安装插件
        cnpm install 插件名字 --save-dev
        cnpm i 插件名字 -D

    2.通过require()引入文件

    3.查阅文档,插件的用法
</code></pre>
]]></content>
      <tags>
        <tag>项目工具</tag>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue进阶</title>
    <url>/2021/08/11/vue-Advanced/</url>
    <content><![CDATA[<h1 id="slot插槽-内容分发"><a href="#slot插槽-内容分发" class="headerlink" title="slot插槽(内容分发)"></a>slot插槽(内容分发)</h1><pre><code>1.单个slot
2.具名slot
    混合父组件的内容与子组件自己的模板
    父组件模板的内容在父组件作用域内编译,子组件模板的内容在子组件作用域编译
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;child&gt;</span><br><span class="line">            &lt;!-- <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>使用slot才会显示<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span> --&gt;</span><br><span class="line">            &lt;div slot=<span class="string">&quot;a&quot;</span>&gt;aaaaa&lt;/div&gt;</span><br><span class="line">            &lt;div slot=<span class="string">&quot;b&quot;</span>&gt;bbbbb&lt;/div&gt;</span><br><span class="line">        &lt;/child&gt;</span><br><span class="line"></span><br><span class="line">        &lt;swiper&gt;</span><br><span class="line">            &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;data in datalist&quot;</span>&gt;</span><br><span class="line">                &#123;&#123;data&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/swiper&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.component(<span class="string">&quot;child&quot;</span>, &#123;</span><br><span class="line">            <span class="comment">// 具名slot</span></span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">                &lt;div&gt;</span></span><br><span class="line"><span class="string">                    &lt;slot name=&quot;a&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">                    child  </span></span><br><span class="line"><span class="string">                    &lt;slot name=&quot;b&quot;&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        Vue.component(<span class="string">&quot;swiper&quot;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">                &lt;div&gt;</span></span><br><span class="line"><span class="string">                    &lt;ul&gt;</span></span><br><span class="line"><span class="string">                        &lt;slot&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="string">                    &lt;/ul&gt; </span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                datalist: [<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="string">&quot;333&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="transition过渡"><a href="#transition过渡" class="headerlink" title="transition过渡"></a>transition过渡</h1><pre><code>Vue在插入,更新或者移除DOM时,提供多种不同方式的应用过渡效果。
1.单元素/组件过渡
    css过渡
    css动画
    结合animate.css动画库
2.多个元素过渡(设置key)
    当有相同标签名的元素切换时,需要通过key特性设置唯一的值来标记以让Vue区分它们,否则Vue为了效率只会替换相同标签内部的内容。
    mode:in-out(先来在走);out-in(先走在来)
3.多个组件过渡
4.列表过渡(设置key)
    &lt;transition-group&gt;不同于transition,它会以一个真实元素呈现：默认为一个&lt;span&gt;,也可以通过tag特性更换为其他元素。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .kerwinfade-enter-active,</span><br><span class="line">    .kerwinfade-leave-active &#123;</span><br><span class="line">        transition: all <span class="number">1.</span>5s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .kerwinfade-enter,</span><br><span class="line">    .kerwinfade-leave-to &#123;</span><br><span class="line">        opacity: <span class="number">0</span>;</span><br><span class="line">        transform: translateX(100px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .kerwinbounce-enter-active &#123;</span><br><span class="line">        animation: bounce-<span class="keyword">in</span> .5s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .kerwinbounce-leave-active &#123;</span><br><span class="line">        animation: bounce-<span class="keyword">in</span> .5s reverse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @keyframes bounce-<span class="keyword">in</span> &#123;</span><br><span class="line">        <span class="number">0</span>% &#123;</span><br><span class="line">            opacity: <span class="number">0</span>;</span><br><span class="line">            transform: translateX(100px);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="number">100</span>% &#123;</span><br><span class="line">            opacity: <span class="number">1</span>;</span><br><span class="line">            transform: translateX(0px);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;isShow=!isShow&quot;</span>&gt;click&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 单元素/组件过渡 --&gt;</span><br><span class="line">        &lt;transition name=<span class="string">&quot;kerwinfade&quot;</span>&gt;</span><br><span class="line">            &lt;div v-show=<span class="string">&quot;isShow&quot;</span>&gt;<span class="number">11111111</span>&lt;/div&gt;</span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">        &lt;transition name=<span class="string">&quot;kerwinbounce&quot;</span>&gt;</span><br><span class="line">            &lt;div v-show=<span class="string">&quot;isShow&quot;</span>&gt;<span class="number">22222222</span>&lt;/div&gt;</span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 多个元素过渡 --&gt;</span><br><span class="line">        &lt;transition name=<span class="string">&quot;kerwinbounce&quot;</span> mode=<span class="string">&quot;in-out&quot;</span>&gt;</span><br><span class="line">            &lt;div v-<span class="keyword">if</span>=<span class="string">&quot;isShow&quot;</span>&gt;<span class="number">11111111</span>&lt;/div&gt;</span><br><span class="line">            &lt;div v-<span class="keyword">else</span>=<span class="string">&quot;isShow&quot;</span>&gt;<span class="number">22222222</span>&lt;/div&gt;</span><br><span class="line">        &lt;/transition&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 列表过渡 --&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;mytext&quot;</span>&gt;&#123;&#123;mytext&#125;&#125;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;handleAddClick&quot;</span>&gt;add&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;transition-group tag=<span class="string">&quot;ul&quot;</span> name=<span class="string">&quot;kerwinbounce&quot;</span>&gt;</span><br><span class="line">            &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(data,index) in datalist&quot;</span> :key=<span class="string">&quot;data + index&quot;</span>&gt;</span><br><span class="line">                &#123;&#123;data&#125;&#125;---&#123;&#123;index&#125;&#125;</span><br><span class="line">                &lt;button @click=<span class="string">&quot;handleDelClick(index)&quot;</span>&gt;del&lt;/button&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/transition-group&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                isShow: <span class="literal">false</span>,</span><br><span class="line">                datalist: [],</span><br><span class="line">                mytext: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">handleAddClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.datalist.push(<span class="built_in">this</span>.mytext);</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="title">handleDelClick</span>(<span class="params">index</span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.datalist.splice(index, <span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="自定义指令-操作底层DOM"><a href="#自定义指令-操作底层DOM" class="headerlink" title="自定义指令,操作底层DOM"></a>自定义指令,操作底层DOM</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;div v-hello=<span class="string">&quot;&#x27;red&#x27;&quot;</span>&gt;<span class="number">666</span>&lt;/div&gt;</span><br><span class="line">        &lt;div v-hello=<span class="string">&quot;&#x27;yellow&#x27;&quot;</span>&gt;<span class="number">666</span>&lt;/div&gt;</span><br><span class="line">        &lt;div v-hello=<span class="string">&quot;color&quot;</span>&gt;<span class="number">666</span>&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.directive(<span class="string">&quot;hello&quot;</span>, &#123;</span><br><span class="line">            <span class="function"><span class="title">inserted</span>(<span class="params">el, bind</span>)</span> &#123;</span><br><span class="line">                <span class="comment">// 指令-生命周期-创建阶段</span></span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;当前节点插入到父节点了&quot;</span>)</span><br><span class="line">                <span class="built_in">console</span>.log(el)</span><br><span class="line">                <span class="built_in">console</span>.log(bind)</span><br><span class="line">                <span class="comment">// el.style.background = &quot;red&quot;</span></span><br><span class="line">                el.style.background = bind.value</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">update</span>(<span class="params">el, bind</span>)</span> &#123;</span><br><span class="line">                <span class="comment">// 指令-生命周期-更新阶段</span></span><br><span class="line">                el.style.background = bind.value</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                color: <span class="string">&quot;blue&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<pre><code>自定义指令-轮播
    inserted 插入最后一个元素时调用(vnode.context.datalist.length-1)
    this.$nextTick()
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;X-UA-Compatible&quot;</span> content=<span class="string">&quot;IE=edge&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://unpkg.com/swiper/swiper-bundle.min.css&quot;</span>&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://unpkg.com/swiper/swiper-bundle.min.js&quot;</span>&gt; &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .swiper-container &#123;</span><br><span class="line">        width: 600px;</span><br><span class="line">        height: 300px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;swiper-container a&quot;</span>&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;swiper-wrapper&quot;</span>&gt;</span><br><span class="line">                &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;swiper-slide&quot;</span> v-<span class="keyword">for</span>=<span class="string">&quot;(data,index) in list&quot;</span> v-swipe=<span class="string">&quot;&#123;</span></span><br><span class="line"><span class="string">                    index:index,length:list.length</span></span><br><span class="line"><span class="string">                &#125;&quot;</span>&gt;</span><br><span class="line">                    &#123;&#123;data&#125;&#125;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;swiper-pagination&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        Vue.directive(<span class="string">&quot;swipe&quot;</span>, &#123;</span><br><span class="line">            <span class="function"><span class="title">inserted</span>(<span class="params">el, bind</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(bind.value)</span><br><span class="line">                <span class="keyword">if</span> (bind.value.index === bind.value.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">new</span> Swiper(<span class="string">&#x27;.a&#x27;</span>, &#123;</span><br><span class="line">                        loop: <span class="literal">true</span>,</span><br><span class="line">                        pagination: &#123;</span><br><span class="line">                            el: <span class="string">&#x27;.swiper-pagination&#x27;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                list: []</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.list = [<span class="string">&quot;111&quot;</span>, <span class="string">&quot;222&quot;</span>, <span class="string">&quot;333&quot;</span>]</span><br><span class="line">                &#125;, <span class="number">2000</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="脚手架"><a href="#脚手架" class="headerlink" title="脚手架"></a>脚手架</h1><p><a href="https://cli.vuejs.org/zh/guide/">Vue CLI</a></p>
<pre><code>一次安装：npm install -g @vue/cli  
创建：vue create 名字
安装的工具：
    (Vue和ES6解析) Babel
    (ES6 ES7超集语言) TypeScript
    (离线开发方式) Progressive Web App (PWA) Support
    (引入Vue路由) Router
    (复杂状态管理) Vuex
    (CSS预处理器sass/less) CSS Pre-processors
    (开发规范) Linter / Formatter
    (测试) Unit Testing
    (测试) E2E Testing

npm run serve 开发环境构建
npm run build 生产环境构建
npm run lint  代码检测工具(自动修正)

使用axios:cnpm install --save axios
</code></pre>
<h2 id="文件组件"><a href="#文件组件" class="headerlink" title="文件组件"></a>文件组件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    html代码,最多可以包含一个</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    js代码,最多可以包含一个</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">        mounted() &#123;&#125;,</span><br><span class="line">        &#x2F;&#x2F; 局部注册组件</span><br><span class="line">        components: &#123;</span><br><span class="line">            navbar: navbar,</span><br><span class="line">            sidebar: sidebar,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    css代码,可以包含多个,src的路径是相对的</span><br><span class="line">    加上scoped属性,css局部生效</span><br><span class="line">    加上lang&#x3D;&quot;scss&quot;,支持scss</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    html代码</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;相对路径的外部的js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style src&#x3D;&quot;相对路径的外部的js&quot;&gt;&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 全局注册组件</span><br><span class="line">&#x2F;* import Vue from &quot;vue&quot;;</span><br><span class="line">Vue.component(&quot;navbar&quot;, navbar);</span><br><span class="line">Vue.component(&quot;sidebar&quot;, sidebar); *&#x2F;</span><br></pre></td></tr></table></figure>
<h2 id="反向代理配置-跨域"><a href="#反向代理配置-跨域" class="headerlink" title="反向代理配置-跨域"></a>反向代理配置-跨域</h2><pre><code>设置成功需要重启终端才会生效
</code></pre>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; vue.config.js</span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        proxy: &#123;</span><br><span class="line">            &#39;&#x2F;ajax&#39;: &#123;</span><br><span class="line">                target: &#39;https:&#x2F;&#x2F;m.maoyan.com&#x2F;&#39;,</span><br><span class="line">                &#x2F;&#x2F; ws: true,</span><br><span class="line">                changeOrigin: true</span><br><span class="line">            &#125;,</span><br><span class="line">            &#x2F;* &#39;&#x2F;foo&#39;: &#123;</span><br><span class="line">              target: &#39;&lt;other_url&gt;&#39;</span><br><span class="line">            &#125; *&#x2F;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; app.vue</span><br><span class="line">&#x2F;&#x2F; 引入模块</span><br><span class="line">import axios from &quot;axios&quot;;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    axios.get(&quot;&#x2F;ajax&#x2F;movieOnInfoList?token&#x3D;&quot;).then((res) &#x3D;&gt; &#123;</span><br><span class="line">      console.log(res.data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h2><pre><code>路由原理
    1.hash路由
        location.hash 切换
        window.onhashchange 监听路径的切换
    2.history路由
        history.pushState 切换
        window.onpopstate 监听路径的切换

&lt;!-- 声明式导航 --&gt;
&lt;router-link to=&quot;/&quot; tag=&quot;li&quot; activeClass=&quot;style&quot;&gt;&lt;/router-link&gt;
    to 跳转的路由地址
    tag 渲染的标签
    activeClass 点击添加的样式

重定向和别名,不符合其他路径,会跳转到预制好的路径
    &#123;
        path:&quot;*&quot;,
        redirect:&quot;/home&quot;
    &#125;

嵌套路由：
    const router = new Router(&#123;
    routes: [
        &#123;
            path: &#39;/film&#39;,
            component: Film,
            children: [
                &#123;
                    path: &#39;/film/nowplaying&#39;,
                    component: Nowplaying,
                &#125;,
                &#123;
                    path: &#39;&#39;,
                    redirect: &#39;/film/nowplaying&#39;,
                &#125;
            ]
        &#125;,
    ]
&#125;);
</code></pre>
<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    Home</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for&#x3D;&quot;data in datalist&quot; :key&#x3D;&quot;data&quot; @click&#x3D;&quot;handleChangePage(data)&quot;&gt;</span><br><span class="line">        &#123;&#123; data &#125;&#125;</span><br><span class="line">      &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      datalist: [&quot;111&quot;, &quot;222&quot;, &quot;333&quot;],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleChangePage(id) &#123;</span><br><span class="line">      console.log(id);</span><br><span class="line">      &#x2F;* 编程式导航-路径跳转 *&#x2F;</span><br><span class="line">      &#x2F;&#x2F; this.$router.push(&#96;&#x2F;home&#x2F;$&#123;id&#125;&#96;);</span><br><span class="line"></span><br><span class="line">      &#x2F;* 编程式导航-名字跳转 *&#x2F;</span><br><span class="line">      this.$router.push(&#123;name:&quot;kerwindetail&quot;,params:&#123;id:id&#125;&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router &#x3D; new Router(&#123;</span><br><span class="line">    mode:&#39;history&#39;, &#x2F;&#x2F; 去掉URL#号,需要后端配置支持</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path: &#39;&#x2F;home&#x2F;:id&#39;, &#x2F;&#x2F; 动态路由</span><br><span class="line">            name:&quot;kerwindetail&quot;, &#x2F;&#x2F; 命名路由</span><br><span class="line">            component: Home</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="状态管理-Vuex"><a href="#状态管理-Vuex" class="headerlink" title="状态管理 Vuex"></a>状态管理 Vuex</h1><pre><code>Vuex是一个专为Vue.js应用程序开发的状态管理模式,采用集中式存储管理应用的所有组件的状态,并以相应的规则保证状态以一种可预测的方式方式变化。
   
</code></pre>
]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vue2+vue3学习笔记</title>
    <url>/2021/09/01/vue2-vue3-study/</url>
    <content><![CDATA[<h1 id="Vue拦截的原理"><a href="#Vue拦截的原理" class="headerlink" title="Vue拦截的原理"></a>Vue拦截的原理</h1><blockquote><p>当你把一个普通的JavaScript对象传入Vue实例作为data选项，Vue将遍历此对象所有的属性，并使用Object.defineProperty把这些属性全部转为getter/setter。Object.defineProperty是ES5中一个无法shim的特性，这也就是Vue不支持IE8以及更低版本浏览器的原因。</p>
<p>每个组件实例都对应一个watcher实例，它会在组件渲染的过程中把”接触”过的数据属性记录为依赖。之后当依赖的setter触发时,会通知watcher，从而使它关联的组件重新渲染。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var obj &#x3D; &#123;&#125;;</span><br><span class="line">    var oBox &#x3D; document.getElementById(&quot;box&quot;);</span><br><span class="line"></span><br><span class="line">    Object.defineProperty(obj,&quot;myname&quot;,&#123;</span><br><span class="line">        get()&#123;</span><br><span class="line">            console.log(&quot;被访问了&quot;);</span><br><span class="line">            return oBox.innerHTML</span><br><span class="line">        &#125;,</span><br><span class="line">        set(value)&#123;</span><br><span class="line">            console.log(&quot;修改为&quot;,value);</span><br><span class="line">            oBox.innerHTML &#x3D; value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight console"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> obj.myname = <span class="string">&quot;vue拦截原理&quot;</span></span></span><br><span class="line">  修改为 vue拦截原理</span><br><span class="line">&lt; &quot;vue拦截原理&quot;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> obj.myname = <span class="string">&quot;再次改变&quot;</span></span></span><br><span class="line">  修改为 再次改变</span><br><span class="line">&lt; &quot;再次改变&quot;</span><br></pre></td></tr></table></figure>
<div class="note orange icon flat"><i class="note-icon fas fa fa-ban"></i><p>Object.defineProperty有以下缺点：</p>
<ol>
<li>无法监听ES6的Set，Map变化；</li>
<li>无法监听Class类型的数据；</li>
<li>属性的新加或者删除也无法监听；</li>
<li>数组元素的增加和删除也无法监听；</li>
</ol>
<ul>
<li>针对Object.defineProperty的缺点，ES6 Proxy都能够完美得解决，它唯一的缺点就是，对IE不友好，所以Vue3在检测到如果是使用IE的情况下(IE11都不支持Proxy)，会自动降级为Object.defineProperty的数据监听系统。</li>
<li>vue2对象后期添加属性拦截不到，使用Vue.set(对象,属性,true)。Vue3支持动态增加属性的拦截。</li>
</ul>
</div>
<h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">    &lt;!-- &#123;&#123;&#125;&#125; 为Vue定义的标签内部绑定语法 --&gt;</span><br><span class="line">    &#123;&#123;myname&#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- @ 为Vue定义的事件绑定语法 v-on简写 --&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;handleMyClick()&quot;&gt;click&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- : 为Vue定义的标签属性绑定语法 v-bind简写 --&gt;</span><br><span class="line">    &lt;div :class&#x3D;&quot;mycolor&quot;&gt;动态切换class&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div :style&#x3D;&quot;isStyle ? &#39;color:red&#39;:&#39;color:blue&#39; &quot;&gt;动态切换style&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- v- Vue封装的指令 --&gt;</span><br><span class="line">    &lt;div v-show&#x3D;&quot;isShow&quot;&gt;动态显示与隐藏&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div v-if&#x3D;&quot;isShow&quot;&gt;动态创建与删除&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;!-- datalist for in 循环遍历 --&gt;</span><br><span class="line">        &lt;li v-for&#x3D;&quot;(item,index) in datalist&quot;&gt;</span><br><span class="line">            &#123;&#123; item &#125;&#125;--&#123;&#123; index &#125;&#125;</span><br><span class="line">        &lt;&#x2F;li&gt;</span><br><span class="line">    &lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;vue@2&#x2F;dist&#x2F;vue.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&quot;#box&quot;,</span><br><span class="line">        &#x2F;&#x2F; 所有状态，状态改变页面自动更新</span><br><span class="line">        data:&#123;</span><br><span class="line">            myname:&quot;zhou&quot;,</span><br><span class="line">            mycolor:&quot;red&quot;,</span><br><span class="line">            isStyle:true,</span><br><span class="line">            isShow:true,</span><br><span class="line">            datalist:[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,&#39;5&#39;]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#x2F;&#x2F; 事件处理函数</span><br><span class="line">        methods:&#123;</span><br><span class="line">            &#x2F;&#x2F; ES6对象简写</span><br><span class="line">            &#x2F;&#x2F; 定义的方法</span><br><span class="line">            handleMyClick()&#123;</span><br><span class="line">                this.myname &#x3D; &quot;link&quot;,</span><br><span class="line">                this.mycolor &#x3D; &quot;blue&quot;,</span><br><span class="line">                this.isStyle &#x3D; !this.isStyle,</span><br><span class="line">                this.isShow &#x3D; !this.isShow</span><br><span class="line">                &#x2F;&#x2F; console.log(&quot;click&quot;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>
<h1 id="Vue常用指令"><a href="#Vue常用指令" class="headerlink" title="Vue常用指令"></a>Vue常用指令</h1><table>
<thead>
<tr>
<th align="center">Vue常用指令</th>
<th align="center">作用</th>
<th align="center">简写</th>
</tr>
</thead>
<tbody><tr>
<td align="center">v-show</td>
<td align="center">动态显示/隐藏</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">v-if</td>
<td align="center">动态创建/删除</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">v-else</td>
<td align="center">配合v-if使用，相当于if(){}else{}</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">v-else-if</td>
<td align="center">多条件情况下配合v-if和v-else使用</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">v-for</td>
<td align="center">根据遍历数组来进行渲染</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">v-bind</td>
<td align="center">动态绑定属性</td>
<td align="center">v-bind:src =&gt; :src</td>
</tr>
<tr>
<td align="center">v-on</td>
<td align="center">绑定事件</td>
<td align="center">@事件名=”表达式”</td>
</tr>
<tr>
<td align="center">v-model</td>
<td align="center">双向绑定表单</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">v-text</td>
<td align="center">给元素的innerText赋值</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">v-html</td>
<td align="center">给元素的innerHTML赋值，能解析标签</td>
<td align="center"></td>
</tr>
</tbody></table>
<h1 id="vue2和vue3的变化"><a href="#vue2和vue3的变化" class="headerlink" title="vue2和vue3的变化"></a>vue2和vue3的变化</h1><h2 id="声明式渲染"><a href="#声明式渲染" class="headerlink" title="声明式渲染"></a>声明式渲染</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    &#x2F;* vue2</span><br><span class="line">    new Vue(&#123;</span><br><span class="line">        el:&quot;#box&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;) </span><br><span class="line">    *&#x2F;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F; vue3</span><br><span class="line">   var obj &#x3D; &#123;</span><br><span class="line">    &#x2F;&#x2F; 函数式</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            property: &#39;value&#39;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   Vue.createApp(obj).mount(&quot;#box&quot;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题</title>
    <url>/2021/08/24/web-interview/</url>
    <content><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><pre><code>⭐⭐⭐
DIV水平垂直有几种方式？
    1.
    2.
    3.
</code></pre>
<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><pre><code>⭐⭐⭐⭐⭐
JavaScript中什么是基本数据类型,什么是引用数据类型？
以及各个数据类型是如何存储的？

答：
    基本数据类型：
        数字(Number)
        字符串(String)
        布尔(Boolean)
        对空(Null)
        未定义(Undefined)
        Symbol 是ES6新增的数据类型,表示独一无二的值。
        BigInt 是ES10新增的数据类型,可以表示任意大的整数。

    引用数据类型:
        对象(Object)
        数组(Array)
        日期(Date)
        函数(Function)
        正则(RegExp)

基本数据类型的数据直接存储在栈中;引用数据类型的数据存储在堆中,在栈中保存数据的引用地址。
这个地址指向的是对应的数据,以便快速查找到堆内存中的对象。

栈内存是自动分配内存的,而堆内存是动态分配内存的,不会自动释放。
所以每次使用完对象的时候都要把它设置为null,从而减少无用内存的消耗。
</code></pre>
<h1 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h1><pre><code>⭐⭐⭐⭐⭐
var let const有什么区别？

答：
    var 
        1.var声明的变量可进行变量提升,let和const定义的变量也会被提升,但是不会被初始化,不能被引用
        2.var可重复声明
        3.var在非函数作用域中定义是挂载到window上的

    let
        1.let声明的变量只在局部起作用
        2.let防止变量污染
        3.不可在重复声明
    
    const
        1.具有let的所有特征
        2.不可被改变,如果使用const声明的是对象的话,是可以修改对象里面的值的
</code></pre>
<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h1><pre><code>⭐⭐⭐⭐
Vue中双向数据绑定是如何实现的？
</code></pre>
]]></content>
  </entry>
  <entry>
    <title>网页布局的方法</title>
    <url>/2021/05/30/wybj/</url>
    <content><![CDATA[<h3 id="等高布局"><a href="#等高布局" class="headerlink" title="等高布局"></a>等高布局</h3><p>利用margin-bottom负值和padding-bottom配合使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    *&#123;margin: 0;padding: 0;&#125;</span><br><span class="line">    #parent&#123;border: 10px black solid;overflow: hidden;&#125;</span><br><span class="line">    #box1&#123;float: left;width: 100px;background: red;margin-bottom: -2000px;padding-bottom: 2000px;&#125;</span><br><span class="line">    #box2&#123;float: right;width: 100px;background: blue;margin-bottom: -2000px;padding-bottom: 2000px;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;parent&quot;&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;box1&quot;&gt;</span><br><span class="line">            &lt;p&gt;1&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;1&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;1&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;1&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;1&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;1&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;1&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;div id&#x3D;&quot;box2&quot;&gt;</span><br><span class="line">            &lt;p&gt;2&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;2&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;2&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;2&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;2&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;p&gt;2&lt;&#x2F;p&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="三列布局"><a href="#三列布局" class="headerlink" title="三列布局"></a>三列布局</h3><p>左右固定,中间自适应：<br>    1.BFC方式<br>    2.定位<br>    3.浮动(双飞翼布局,圣杯布局),margin负值<br>    4.flex弹性</p>
<h4 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;margin: 0;padding: 0;&#125;</span><br><span class="line">    .header&#123;height: 100px;background: red;&#125;</span><br><span class="line">    .container .center&#123;height: 200px;float: left;width: 100%;&#125;</span><br><span class="line">    .container .center p&#123;background: yellow;height: 100%;margin: 0 150px 0 100px;&#125;</span><br><span class="line">    .container .left&#123;float: left;width: 100px;height: 200px;background: blue;margin-left: -100%;&#125;</span><br><span class="line">    .container .right&#123;float: left;width: 150px;height: 200px;background: green;margin-left: -150px;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;container&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;center&quot;&gt;</span><br><span class="line">                &lt;p&gt;内容部分&lt;&#x2F;p&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;left&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;right&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h4 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;margin: 0;padding: 0;&#125;</span><br><span class="line">    .clear::after&#123;content: &quot;&quot;;display: block;clear: both;&#125;</span><br><span class="line">    .header&#123;height: 100px;background: red;&#125;</span><br><span class="line">    .container&#123;background: yellow;margin: 0 150px 0 100px;&#125;</span><br><span class="line">    .container .center&#123;height: 200px;float: left;width: 100%;&#125;</span><br><span class="line">    .container .left&#123;float: left;width: 100px;height: 200px;background: blue;margin-left: -100%;position: relative;left: -100px;&#125;</span><br><span class="line">    .container .right&#123;float: left;width: 150px;height: 200px;background: green;margin-left: -150px;position: relative;right: -150px;&#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;header&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;container clear&quot;&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;center&quot;&gt;</span><br><span class="line">                内容部分</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;left&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;div class&#x3D;&quot;right&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="flex弹性布局"><a href="#flex弹性布局" class="headerlink" title="flex弹性布局"></a>flex弹性布局</h3><p><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程</a></p>
<p><img src="flex.PNG" alt="flex弹性布局"></p>
<h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p>flex-direction用来控制子项整体布局方向,是从左往右还是从右往左,是从上往下还是从下往上。<br><img src="flex-direction.PNG" alt="flex弹性布局"></p>
<h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><p>flex-wrap用来控制子项整体单行显示还是换行显示。<br><img src="flex-wrap.PNG" alt="flex弹性布局"></p>
<h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p>flex-flow属性是flex-direction和flex-wrap的复合写法,表示flex布局的flow流动特性。<br>第一个值表示方向,第二个值表示换行,中间使用空格隔开。</p>
<h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p>justify-content属性决定了主轴方向上子项的对齐和分布方式。<br><img src="justify-content.PNG" alt="flex弹性布局"></p>
<h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p>align-items中的items指的是flex子项,因此align-items指的是fiex子项相对于flex容器在侧轴方向上的对齐方式。<br><img src="align-items.PNG" alt="flex弹性布局"></p>
<h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p>align-content可以看成和justify-content是相似且对立的属性,如果所有flex子项只有一行,则align-content属性没有任何效果。<br><img src="align-content.PNG" alt="flex弹性布局"></p>
<h4 id="作用在flex子项的属性"><a href="#作用在flex子项的属性" class="headerlink" title="作用在flex子项的属性"></a>作用在flex子项的属性</h4><p><img src="flexzixiang.PNG" alt="flex弹性布局"></p>
<h3 id="grid网格布局"><a href="#grid网格布局" class="headerlink" title="grid网格布局"></a>grid网格布局</h3><p>grid网格布局是一个二维的布局方法,纵横两个方向总是同时存在。</p>
<p><img src="grid.PNG" alt="grid网格布局"></p>
<h4 id="grid-template-columns和grid-template-rows"><a href="#grid-template-columns和grid-template-rows" class="headerlink" title="grid-template-columns和grid-template-rows"></a>grid-template-columns和grid-template-rows</h4><p>对网格进行横纵划分,形成二维布局。单位可以是像素,百分比,自适应以及fr单位(网格剩余空间比列单位)。<br>有时候,网格的划分是很规律的,如果需要添加多个横纵网格时,可以利用repeat(个数,单位)语法进行简化操作。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">        display: grid;</span><br><span class="line">        grid-template-columns: repeat(3, 1fr);</span><br><span class="line">        grid-template-rows: repeat(3, 1fr);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="grid-template-areas和grid-template"><a href="#grid-template-areas和grid-template" class="headerlink" title="grid-template-areas和grid-template"></a>grid-template-areas和grid-template</h4><p>area是区域的意思,grid-template-areas就是给网格划分区域的。此时grid子项只要使用grid-area属性指定其隶属于哪个区域。<br>grid-template是grid-template-rows,grid-template-columns和grid-template-areas属性的复合写法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">        display: grid;</span><br><span class="line">        grid-template-areas:</span><br><span class="line">            &#39;a1 a1 a1&#39; 1fr</span><br><span class="line">            &#39;a2 a2 a3&#39; 1fr</span><br><span class="line">            &#39;a2 a2 a3&#39; 1fr</span><br><span class="line">            &#x2F;1fr 1fr 1fr</span><br><span class="line">        ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div:nth-child(1) &#123;</span><br><span class="line">        grid-area: a1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div:nth-child(2) &#123;</span><br><span class="line">        grid-area: a2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    div:nth-child(3) &#123;</span><br><span class="line">        grid-area: a3;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="grid-column-gap和grid-row-gap"><a href="#grid-column-gap和grid-row-gap" class="headerlink" title="grid-column-gap和grid-row-gap"></a>grid-column-gap和grid-row-gap</h4><p>grid-column-gap和grid-row-gap属性用来定义网格中网格间隙的尺寸。<br>CSS grid-gap:row column;属性是grid-column-gap和grid-row-gap属性的复合写法。</p>
<h4 id="justify-items和align-items"><a href="#justify-items和align-items" class="headerlink" title="justify-items和align-items"></a>justify-items和align-items</h4><p>justify-items指定了网格元素的水平呈现方式,是水平拉伸显示还是左中右对齐。<br>align-items指定了网格元素的垂直呈现方式,是垂直拉伸显示,还是上中下对齐。</p>
<p>place-items是align-items和justify-items属性的复合写法。</p>
<p><img src="place-items.PNG" alt="grid网格布局"></p>
<h4 id="justify-content和align-content"><a href="#justify-content和align-content" class="headerlink" title="justify-content和align-content"></a>justify-content和align-content</h4><p>justify-content指定了网格元素的垂直分布方式。align-content指定了网格元素的水平分布方式。<br>place-content是align-content和justify-content属性的复合写法。<br><img src="place-content.PNG" alt="grid网格布局"></p>
<h4 id="作用在grid子项的属性"><a href="#作用在grid子项的属性" class="headerlink" title="作用在grid子项的属性"></a>作用在grid子项的属性</h4><p><img src="gridzx.PNG" alt="grid网格布局"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #box &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        border: 1px gray dotted;</span><br><span class="line">        display: grid;</span><br><span class="line">        grid-template-rows: repeat(3, 1fr);</span><br><span class="line">        grid-template-columns: repeat(3, 1fr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #box div &#123;</span><br><span class="line">        background: red;</span><br><span class="line">        border: 1px black solid;</span><br><span class="line">        &#x2F;* </span><br><span class="line">        grid-column-start: 2;</span><br><span class="line">        grid-column-end: 3;</span><br><span class="line">        grid-row-start: 2;</span><br><span class="line">        grid-row-end: span 2; </span><br><span class="line">        *&#x2F;</span><br><span class="line"></span><br><span class="line">        &#x2F;* </span><br><span class="line">        grid-column: 2 &#x2F; 3;</span><br><span class="line">        grid-row: 2 &#x2F; span 2; </span><br><span class="line">        *&#x2F;</span><br><span class="line"></span><br><span class="line">        &#x2F;* grid-area 第一个值是水平的起始位置,第二个值是垂直的起始位置,第三个值是水平的结束位置,第四个值是垂直的结束位置。 *&#x2F;</span><br><span class="line">        grid-area: 3&#x2F;2&#x2F;4&#x2F;4;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;box&quot;&gt;</span><br><span class="line">        &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="CSS布局生成工具"><a href="#CSS布局生成工具" class="headerlink" title="CSS布局生成工具"></a>CSS布局生成工具</h3><p><a href="https://cssgrid-generator.netlify.app/">CSS Grid Generator</a><br><a href="https://csslayout.io/">CSS Layout</a><br><a href="https://loading.io/flexbox/">Flexbox Generator</a><br><a href="https://grid.layoutit.com/">行数列数快速布局：cssgr.id</a></p>
]]></content>
      <tags>
        <tag>布局</tag>
        <tag>flex</tag>
        <tag>grid</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS样式 基础知识巩固笔记</title>
    <url>/2021/04/22/CSS/</url>
    <content><![CDATA[<h3 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式：选择器&#123;属性1：值1;属性2：值2;&#125;</span><br><span class="line">单位：px -&gt; 像素(pixel), % -&gt; 百分比</span><br><span class="line">基本样式：width(宽),height(高),background-color(背景颜色)</span><br></pre></td></tr></table></figure>
<h3 id="样式引入"><a href="#样式引入" class="headerlink" title="样式引入"></a>样式引入</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 内联(行内,行间)样式：在html标签上添加style属性来实现。*&#x2F;</span><br><span class="line">&lt;div style&#x3D;&quot;width:100px;height:100px;background-color:red;&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;* 内部样式：在&lt;style&gt;标签内添加的样式,可以复用代码。*&#x2F;</span><br><span class="line">&lt;style&gt; div&#123;width:100px;height:100px;background-color:red;&#125; &lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;* 外部样式：使用link引入.css文件或@import引入。 *&#x2F;</span><br><span class="line">&lt;!-- rel:引入的类型 href:引入的地址。 --&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&quot;&gt; </span><br><span class="line">&lt;style&gt; @import url(.css); &lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="颜色表示"><a href="#颜色表示" class="headerlink" title="颜色表示"></a>颜色表示</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">单词表示法：red blue green yellow ...</span><br><span class="line">十六进制表示法：#000000 #ffffff</span><br><span class="line">rgb三原色表示法：rgb(255,255,255);</span><br><span class="line"></span><br><span class="line">&#x2F;* CSS3新增渐变效果 *&#x2F;</span><br><span class="line">&#x2F;* 渐变的0度在页面下边,正值按照顺时针旋转,负值按照逆时针旋转 *&#x2F;</span><br><span class="line">background-image: linear-gradient(); 线型渐变</span><br><span class="line">    point || angle</span><br><span class="line">    color</span><br><span class="line">    percentage</span><br><span class="line">background-image: radial-gradient(); 径向渐变</span><br><span class="line">    point</span><br><span class="line">    color</span><br><span class="line">    percentage</span><br></pre></td></tr></table></figure>
<h3 id="背景样式"><a href="#背景样式" class="headerlink" title="背景样式"></a>背景样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 背景颜色 *&#x2F;</span><br><span class="line">background-color: ; </span><br><span class="line"></span><br><span class="line">&#x2F;* 背景图片,默认水平垂直铺满背景图 *&#x2F;</span><br><span class="line">background-image: url(); </span><br><span class="line"></span><br><span class="line">&#x2F;* 背景图片的平铺方式 repeat-x repeat-y repeat(x,y都平铺,默认值) no-repeat *&#x2F;</span><br><span class="line">background-repeat: ; </span><br><span class="line"></span><br><span class="line">&#x2F;* 背景图片的位置 </span><br><span class="line">    值(number:px %)：x y </span><br><span class="line">    x: left center right</span><br><span class="line">    y: top center bottom</span><br><span class="line">*&#x2F;</span><br><span class="line">background-position: ; </span><br><span class="line"></span><br><span class="line">&#x2F;* 背景图随滚动条的移动方式 </span><br><span class="line">scroll(默认值,背景位置按照当前元素进行偏移) </span><br><span class="line">fixed(背景位置按照浏览器进行偏移)</span><br><span class="line">*&#x2F;</span><br><span class="line">background-attachment: ; </span><br><span class="line"></span><br><span class="line">&#x2F;* 复合写法 *&#x2F;</span><br><span class="line">background: red url() repeat 0 0; &#x2F;* 顺序可随意 *&#x2F;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;* CSS3新增背景样式 复合样式:第一个是填充位置 第二个是裁切方式 *&#x2F;</span><br><span class="line">background-size: ; 背景图的尺寸大小 cover覆盖 contain包含</span><br><span class="line">background-origin: ; 背景图的填充位置 padding-box(默认) border-box content-box</span><br><span class="line">background-clip: ; 背景图的裁切方式 padding-box border-box(默认) content-box</span><br></pre></td></tr></table></figure>
<h3 id="边框样式"><a href="#边框样式" class="headerlink" title="边框样式"></a>边框样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 边框的样式 </span><br><span class="line">solid : 实线</span><br><span class="line">dashed : 虚线</span><br><span class="line">dotted : 点线</span><br><span class="line">*&#x2F;</span><br><span class="line">border-style: ; </span><br><span class="line"></span><br><span class="line">&#x2F;* 边框的大小 *&#x2F;</span><br><span class="line">border-width: ; </span><br><span class="line"></span><br><span class="line">&#x2F;* 边框的颜色 *&#x2F;</span><br><span class="line">border-color: ; </span><br><span class="line"></span><br><span class="line">&#x2F;* 单独设置某一边(中间是方向) left right top bottom *&#x2F;</span><br><span class="line">border-top-style: ;</span><br><span class="line">border-right-width: ; </span><br><span class="line">border-left-color: ;</span><br><span class="line"></span><br><span class="line">&#x2F;* 复合写法 *&#x2F;</span><br><span class="line">border: 1px solid red; &#x2F;* 顺序可随意 *&#x2F;</span><br></pre></td></tr></table></figure>
<h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">font-family: ; &#x2F;* 字体类型 *&#x2F;</span><br><span class="line">font-size: ; &#x2F;* 字体大小,默认16px,字体大小一般为偶数 *&#x2F;</span><br><span class="line">font-weight: ; &#x2F;* 字体粗细 bold(加粗 600~900) normal(默认 100~500) *&#x2F;</span><br><span class="line">font-style: ; &#x2F;* 字体样式 normal(默认) italic(斜体) oblique(斜体,没有倾斜属性的字体也可设置倾斜操作) *&#x2F;</span><br><span class="line">color: ; &#x2F;* 字体颜色 *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;* 复合写法 *&#x2F;</span><br><span class="line">font: ; &#x2F;* 最少要有两个值: size(size&#x2F;line-height) family *&#x2F;</span><br><span class="line"></span><br><span class="line">&#x2F;* CSS3新增文字阴影,阴影的默认颜色和文字颜色相同,通过多逗号的方式分割,可以设置多阴影。 *&#x2F;</span><br><span class="line">text-shadow: x y blur color,多阴影</span><br><span class="line"></span><br><span class="line">&#x2F;* CSS3新增字体图标 *&#x2F;</span><br><span class="line">font-face可自定义Web字体嵌入到网页中。</span><br><span class="line"></span><br><span class="line">应用场景：</span><br><span class="line">    1.可以非常方便的改变大小(font-size)和颜色(color)。</span><br><span class="line">    2.放大后不会失真。</span><br><span class="line">    3.减少请求次数和提高加载速度。</span><br><span class="line">    4.简化网页布局。</span><br><span class="line">    5.减少设计师和前端工程师的工作量。</span><br><span class="line">    6.可使用计算机没有提供的字体。</span><br></pre></td></tr></table></figure>
<p><a href="https://www.iconfont.cn/">iconfont-阿里巴巴矢量图标库</a><br><a href="https://icomoon.io/">icomoon-在线自定义字体图标</a></p>
<h3 id="段落样式"><a href="#段落样式" class="headerlink" title="段落样式"></a>段落样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 文本装饰 underline(下划线) line-through(删除线) overline(上划线) none(不添加任何装饰) 使用空格可添加多个文本修饰 *&#x2F;</span><br><span class="line">text-decoration: ; </span><br><span class="line"></span><br><span class="line">&#x2F;* 文本大小写(针对英文段落) lowercase(小写) uppercase(大写) capitalize(只针对首字母大写) *&#x2F;</span><br><span class="line">text-transform: ; </span><br><span class="line"></span><br><span class="line">&#x2F;* 文本缩进(首行缩进) em单位 1em等于当前字体大小 *&#x2F;</span><br><span class="line">text-indent: ;</span><br><span class="line"></span><br><span class="line">&#x2F;* 文本对齐方式 left right center justify(两端对齐) *&#x2F;</span><br><span class="line">text-align: ;</span><br><span class="line"></span><br><span class="line">&#x2F;* 定义行高 取值：number(px) scale(比例值,跟文字大小成比例) *&#x2F;</span><br><span class="line">line-height: ;</span><br><span class="line"></span><br><span class="line">&#x2F;* 定义字间距 *&#x2F;</span><br><span class="line">letter-spacing: ; </span><br><span class="line"></span><br><span class="line">&#x2F;* 定义词间距(针对英文) *&#x2F;</span><br><span class="line">word-spacing: ; </span><br><span class="line"></span><br><span class="line">&#x2F;* 强制折行(针对英文) *&#x2F;</span><br><span class="line">word-break: break-all; &#x2F;* 非常强烈的折行 *&#x2F;</span><br><span class="line">word-wrap: break-word; &#x2F;* 不是那么强烈的折行,会产生一些空白区域 *&#x2F;</span><br></pre></td></tr></table></figure>
<h3 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h3><h4 id="ID选择器"><a href="#ID选择器" class="headerlink" title="ID选择器"></a>ID选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">    css: #elem&#123;&#125;</span><br><span class="line">    html: id &#x3D; &quot;elem&quot;</span><br><span class="line">注:</span><br><span class="line">    1.在一个页面中,ID值是唯一的。</span><br><span class="line">    2.命名规范,字母 _ - 数字(命名的第一位不能是数字)。</span><br><span class="line">    3.命名方式,驼峰式,下划线,短线式。</span><br></pre></td></tr></table></figure>
<h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">    css: .elem&#123;&#125;</span><br><span class="line">    html: class &#x3D; &quot;elem&quot;</span><br><span class="line">注:</span><br><span class="line">    1.class选择器是可以复用的。</span><br><span class="line">    2.可以添加多个class样式。</span><br><span class="line">    3.多个样式的时候,样式的优先级根据CSS决定,而不是class属性中的顺序。</span><br><span class="line">    4.标签+类的写法。</span><br></pre></td></tr></table></figure>
<h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">    css: div&#123;&#125;</span><br><span class="line">    html: &lt;div&gt;&lt;&#x2F;div&gt;</span><br><span class="line">使用场景:</span><br><span class="line">    1.去掉某些标签的默认样式时。</span><br><span class="line">    2.复杂的选择器中,如：层次选择器。</span><br></pre></td></tr></table></figure>
<h4 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">    css: div , p , span&#123;&#125;</span><br><span class="line">注:</span><br><span class="line">    可以通过逗号的方式,给多个不同的选择器添加统一的CSS样式,来达到代码的复用。</span><br></pre></td></tr></table></figure>
<h4 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">    *&#123;&#125;</span><br><span class="line">注:</span><br><span class="line">    为所有的标签添加样式</span><br></pre></td></tr></table></figure>
<h4 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">    后代： M N &#123;&#125;</span><br><span class="line">    父子： M &gt; N &#123;&#125;</span><br><span class="line">    兄弟： M ~ N &#123;&#125; 当前M下面所有兄弟N标签</span><br><span class="line">    相邻:  M + N &#123;&#125; 当前M下面相邻的N标签</span><br></pre></td></tr></table></figure>
<h4 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">格式:</span><br><span class="line">    M[attr] : M元素选择指定为attr属性的集合</span><br><span class="line">    M[attr&#x3D;value] : M元素选择指定为attr属性和value值的集合</span><br><span class="line">    M[attr*&#x3D;value] : M元素选择指定为attr属性并且包含值为value的集合</span><br><span class="line">    M[attr^&#x3D;value] : M元素选择指定为attr属性并且起始值为value的集合</span><br><span class="line">    M[attr$&#x3D;value] : M元素选择指定为attr属性并且结束值为value的集合</span><br><span class="line">    M[attr1][attr2] : M元素选择满足多个属性的集合</span><br></pre></td></tr></table></figure>
<h4 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">CSS伪类用于向某些元素添加特殊的效果,一般用于初始样式添加不上的时候,用伪类来添加。</span><br><span class="line">格式:</span><br><span class="line">    M : 伪类</span><br><span class="line"></span><br><span class="line">    M :link     访问前的样式(只能添加给a标签)</span><br><span class="line">    M :visited  访问后的样式(只能添加给a标签)</span><br><span class="line">    M :hover    鼠标移入时的样式(可以添加给所有的标签)</span><br><span class="line">    M :active   鼠标按下时的样式(可以添加给所有的标签)</span><br><span class="line">注:</span><br><span class="line">    如果四个伪类都生效,顺序为: L V H A  一般网站设置：a&#123;&#125; a:hover&#123;&#125;</span><br><span class="line"></span><br><span class="line">    :after :before 通过伪类的方式给元素添加一段文本内容和添加样式,使用content:&quot; &quot;属性</span><br><span class="line">    :checked :disabled :focus 表单元素设置</span><br><span class="line"></span><br><span class="line">    M :focus    选择器用于选取获得焦点的元素。</span><br><span class="line">    M :empty    选择器匹配没有子元素（包括文本节点）的每个元素。</span><br></pre></td></tr></table></figure>
<h4 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">:nth-of-type() 当前元素的兄弟元素的第n个</span><br><span class="line">:nth-child() 当前元素的兄弟节点的第n个当前元素。</span><br><span class="line"></span><br><span class="line">:first-of-type 匹配的是某父元素下相同类型子元素中的第一个</span><br><span class="line">:last-of-type 匹配的是某父元素下相同类型子元素中的最后一个</span><br><span class="line">:only-of-type 用来选择一个元素是它的父元素的唯一一个相同类型的子元素。</span><br><span class="line"></span><br><span class="line">:first-child 向元素的第一个子元素添加样式。</span><br><span class="line">:last-child 向元素的最后一个子元素添加样式。</span><br><span class="line">:only-child 匹配父元素仅有的一个子元素。</span><br></pre></td></tr></table></figure>
<h3 id="样式继承"><a href="#样式继承" class="headerlink" title="样式继承"></a>样式继承</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文字相关的样式可以被继承</span><br><span class="line">如：</span><br><span class="line">    azimuth, border-collapse, border-spacing,</span><br><span class="line">    caption-side, color, cursor, direction, elevation,</span><br><span class="line">    empty-cells, font-family, font-size, font-style,</span><br><span class="line">    font-variant, font-weight, font, letter-spacing,</span><br><span class="line">    line-height, list-style-image, list-style-position,</span><br><span class="line">    list-style-type, list-style, orphans, pitch-range,</span><br><span class="line">    pitch, quotes, richness, speak-header, speaknumeral,</span><br><span class="line">    speak-punctuation, speak, speechrate,</span><br><span class="line">    stress, text-align, text-indent, texttransform,</span><br><span class="line">    visibility, voice-family, volume, whitespace,</span><br><span class="line">    widows, word-spacing</span><br><span class="line"></span><br><span class="line">布局相关的样式不能被继承(默认不能被继承,可以设置继承属性 inherit值)</span><br></pre></td></tr></table></figure>
<h3 id="CSS优先级"><a href="#CSS优先级" class="headerlink" title="CSS优先级"></a>CSS优先级</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.相同样式优先级:当设置相同样式时,后面的优先级较高。</span><br><span class="line"></span><br><span class="line">2.内部样式与外部样式:内部样式与外部样式优先级相同,如果都设置了相同样式,那么后写的引入方式优先级高。</span><br><span class="line"></span><br><span class="line">3.单一样式优先级:style行间(权重1000) &gt; id(权重100) &gt; class(权重10) &gt; tag(权重1) &gt; * &gt; 继承。</span><br><span class="line"></span><br><span class="line">4. !important:提升样式优先级,非规范方式。(不能针对继承的属性进行优先级的提升)。</span><br><span class="line"></span><br><span class="line">5.标签+类与单类:标签+类 &gt; 单类。</span><br><span class="line"></span><br><span class="line">6.群组优先级:群组选择器与单一选择器的优先级相同,靠后写的优先级高。</span><br><span class="line"></span><br><span class="line">7.层次优先级</span><br><span class="line">    权重比较</span><br><span class="line">        ul li .box p input&#123;&#125;    1 + 1 + 10 + 1 + 1</span><br><span class="line">        .hello span #elem&#123;&#125;     10 + 1 + 100</span><br><span class="line">    约分比较</span><br><span class="line">        ul li .box p input&#123;&#125;    li p input&#123;&#125;</span><br><span class="line">        .hello span #elem&#123;&#125;     #elem&#123;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><p><img src="hzmx.jpg" alt="盒子模型"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">content : 内容区域,width和height组成。</span><br><span class="line">padding : 内边距(上右下左,auto自适应)。</span><br><span class="line">    padding-left</span><br><span class="line">    padding-right</span><br><span class="line">    padding-top</span><br><span class="line">    padding-bottom</span><br><span class="line">margin : 外边距(上右下左,auto自适应)。</span><br><span class="line">    margin-left</span><br><span class="line">    margin-right</span><br><span class="line">    margin-top</span><br><span class="line">    margin-bottom</span><br><span class="line">注:</span><br><span class="line">    1.背景颜色会填充到margin以内的区域(不包括margin区域)。</span><br><span class="line">    2.文字会在content区域。</span><br><span class="line">    3.padding不能出现负值,margin可以出现负值。</span><br><span class="line">    4.当给两个盒子同时添加上下外边距的时候,就会出现叠加的问题,这个问题只在上下有(上下同时存在的时候,会取最大的做为叠加的值),左右没有这个叠加的问题。(解决方案：BFC规范或只给一个元素添加间距)</span><br><span class="line">    5.margin传递的问题只会出现在嵌套的结构中,且只有margin-top会有传递的问题,其他三个方向是没有传递问题的。(解决方案：BFC规范,给父容器加边框,margin换成padding)</span><br><span class="line">    6.margin的自适应居中:margin:0 auto; 左右自适应可以,上下自适应不行。</span><br><span class="line">    7.width,height不设置的时候,对盒子模型的影响,会自动去计算容器的大小,节省代码。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">box-sizing(盒尺寸,可以改变盒子模型的展示形态)  属性可以以特定的方式定义匹配某个区域的特定元素。取值为content-box(默认值)和border-box。</span><br><span class="line">content-box : width height -&gt; content</span><br><span class="line">border-box : width height -&gt; content padding border</span><br><span class="line"></span><br><span class="line">&#x2F;* CSS3新增盒子阴影,设置的阴影默认颜色是黑色和外阴影,如果设置outset不起作用,可设置inset来表示内阴影。 *&#x2F;</span><br><span class="line">box-shadow: x y blur spread color inset 多阴影; </span><br></pre></td></tr></table></figure>
<h3 id="显示类型"><a href="#显示类型" class="headerlink" title="显示类型"></a>显示类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">标签类型转换:</span><br><span class="line">display</span><br><span class="line">    block           转换为块级元素</span><br><span class="line">    inline          转换为行内元素</span><br><span class="line">    inline-block    转换为行内块元素</span><br><span class="line">    none            隐藏元素</span><br><span class="line">    flex            弹性盒模型</span><br><span class="line"></span><br><span class="line">扩展：</span><br><span class="line">    display：none与visibility：hidden的区别在于：</span><br><span class="line">        display：none 不占空间的隐藏</span><br><span class="line">        visibility：hidden 占空间的隐藏</span><br></pre></td></tr></table></figure>
<h3 id="溢出隐藏"><a href="#溢出隐藏" class="headerlink" title="溢出隐藏"></a>溢出隐藏</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">overflow :</span><br><span class="line">    visible</span><br><span class="line">    hidden</span><br><span class="line">    scroll</span><br><span class="line">    auto</span><br><span class="line">    x轴 y轴</span><br><span class="line">        overflow-x overflow-y 针对x和y轴进行设置</span><br></pre></td></tr></table></figure>
<h3 id="透明度与手势"><a href="#透明度与手势" class="headerlink" title="透明度与手势"></a>透明度与手势</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">opacity: 0(透明) ~ 0.5(半透明) ~ 1(不透明)</span><br><span class="line">注：占空间,所有的子内容也会透明</span><br><span class="line"></span><br><span class="line">background：rgba(); 0 ~ 1</span><br><span class="line">注：可以让指定的样式透明,而不影响其他样式</span><br><span class="line"></span><br><span class="line">cursor 自定义鼠标手势</span><br><span class="line">    default 默认箭头</span><br><span class="line">    pointer </span><br><span class="line">    move</span><br><span class="line">    help</span><br><span class="line">    url(),auto 自定义手势</span><br></pre></td></tr></table></figure>
<h3 id="最小和最大宽高"><a href="#最小和最大宽高" class="headerlink" title="最小和最大宽高"></a>最小和最大宽高</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">min-width min-height</span><br><span class="line">max-width max-height</span><br><span class="line"></span><br><span class="line">%单位 ： 以父容器的大小进行换算</span><br><span class="line"></span><br><span class="line">一个容器怎么适应屏幕的高 ： 容器加height:100%;</span><br><span class="line">html,body&#123; height: 100%;&#125;</span><br><span class="line">.contrainer&#123; height: 100%;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="默认样式"><a href="#默认样式" class="headerlink" title="默认样式"></a>默认样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">有些标签有默认样式,有些标签没有默认样式。</span><br><span class="line">    没有默认样式：div span ...</span><br><span class="line">    有默认样式的：body h1~h6 p ul ...</span><br><span class="line"></span><br><span class="line">重置样式(css reset)例：</span><br><span class="line">    * &#123; margin: 0; padding: 0;&#125;</span><br><span class="line">    ul &#123; list-style: none;&#125;</span><br><span class="line">    a &#123; text-decoration: none; color: #666;&#125;</span><br><span class="line">    a:hover&#123; color: red;&#125;</span><br><span class="line">    img &#123; display: block;&#125;  图片跟容器底部有一些空隙</span><br><span class="line">        内联元素的对齐方式是按照文字基线对齐的,而不是文字底线对齐的。</span><br><span class="line">        vertical-align: baseline; 基线对齐方式,默认值</span><br><span class="line">                        bottom    基线底部对齐</span><br></pre></td></tr></table></figure>
<h3 id="浮动样式"><a href="#浮动样式" class="headerlink" title="浮动样式"></a>浮动样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">文档流：是文档中可显示对象在排列时所占用的位置。</span><br><span class="line"></span><br><span class="line">float特性：加浮动的元素,会脱离文档流,会沿着父容器靠左或靠右排列,如果之前已经有浮动的元素,会挨着浮动的元素进行排列。</span><br><span class="line"></span><br><span class="line">float取值：left   right   none(默认)</span><br><span class="line"></span><br><span class="line">注意点：</span><br><span class="line">    1.只会影响后面的元素。</span><br><span class="line">    2.内容默认提示半层。</span><br><span class="line">    3.默认宽根据内容决定。</span><br><span class="line">    4.换行排列。</span><br><span class="line">    5.主要给块元素添加,但也可以给内联元素添加。</span><br><span class="line"></span><br><span class="line">清除浮动：</span><br><span class="line">    上下排列: clear属性 表示清除浮动, left right both(左右都清除)。</span><br><span class="line">        注：clear属性只会操作块标签,对内联标签不起作用。</span><br><span class="line">    嵌套排列: </span><br><span class="line">        1.固定宽高：不推荐,不能把高度固定死,不适合做自适应的效果。</span><br><span class="line">        2.父元素浮动：不推荐,因为父容器浮动也会影响到后面的元素。</span><br><span class="line">        3.overflow: hidden（BFC规范）,如果有子元素想溢出,那么会受到影响。</span><br><span class="line">        4.display: inline-block（BFC规范）,不推荐,父容器会影响到后面的元素。</span><br><span class="line">        5.设置空标签: 不推荐,会多添加一个标签。</span><br><span class="line">        6.after伪类: 推荐,是空标签的加强版。 :after&#123;content: &quot;&quot;;clear:both;display:block;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="定位样式"><a href="#定位样式" class="headerlink" title="定位样式"></a>定位样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">position特性：</span><br><span class="line">    css position属性用于指定一个元素在文档中的定位方式。</span><br><span class="line">    top right bottom left 属性决定了该元素的位置。</span><br><span class="line"></span><br><span class="line">position取值：</span><br><span class="line">    1.static(默认)</span><br><span class="line">    2.relative(相对定位)</span><br><span class="line">        如果没有定位偏移量,对元素本身没有任何影响</span><br><span class="line">        不使元素脱离文档流</span><br><span class="line">        不影响其他元素布局</span><br><span class="line">        top right bottom left是相对于当前元素自身进行偏移的</span><br><span class="line">    3.absolute(绝对定位)</span><br><span class="line">        使元素完全脱离文档流</span><br><span class="line">        使内联元素支持宽高(让内联具备块特性)</span><br><span class="line">        使块元素默认宽根据内容决定(让块具备内联的特性)</span><br><span class="line">        如果有定位祖先元素相对于定位祖先元素发生偏移,没有定位祖先元素相对于整个文档发生偏移(绝对,相对,固定)</span><br><span class="line">    4.fixed(固定定位)</span><br><span class="line">        使元素完全脱离文档流</span><br><span class="line">        使内联元素支持宽高(让内联具备块特性)</span><br><span class="line">        使块元素默认宽根据内容决定(让块具备内联的特性)</span><br><span class="line">        相对于整个浏览器窗口进行偏移,不受浏览器滚动条的影响</span><br><span class="line">    5.sticky(粘性定位)</span><br><span class="line">        在指定的位置,进行黏性操作。</span><br><span class="line"></span><br><span class="line">z-index定位层级</span><br><span class="line">    默认层级为0</span><br><span class="line">    嵌套时候的层级问题,可用来提升定位层级</span><br></pre></td></tr></table></figure>
<h3 id="表格样式"><a href="#表格样式" class="headerlink" title="表格样式"></a>表格样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">添加单线 ： border-collapse: collapse;</span><br><span class="line">隐藏空单元 ： empty-cells: hide;</span><br><span class="line">斜线分类 ： border &#x2F; rotate</span><br><span class="line">列分组 ： colgroup &#x2F; col</span><br></pre></td></tr></table></figure>
<h3 id="CSS-Sprite"><a href="#CSS-Sprite" class="headerlink" title="CSS Sprite"></a>CSS Sprite</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">特性：</span><br><span class="line">    CSS精灵图是一种网页图片应用处理方式。它可以将一个页面涉及到的所有零星图片都包含到一张大图中去加载。</span><br><span class="line">好处：</span><br><span class="line">    可以减少图片的质量,网页的图片加载速度快,减少图片的请求次数,加快网页的打开。</span><br><span class="line">使用方法：</span><br><span class="line">    利用背景的定位</span><br></pre></td></tr></table></figure>
<h3 id="圆角样式"><a href="#圆角样式" class="headerlink" title="圆角样式"></a>圆角样式</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">border-radius: 5px;  设置四个角5像素圆角效果</span><br><span class="line">border-radius:5px 0; 设置左上角和右下角5px圆角，其它两个角为0不圆角</span><br><span class="line">border-radius:3px 4px 5px 6px; 设置左上角3px圆角、右上角4px圆角、右下角5px圆角、左下角6px圆角。</span><br></pre></td></tr></table></figure>
<h3 id="浏览器引擎前缀"><a href="#浏览器引擎前缀" class="headerlink" title="浏览器引擎前缀"></a>浏览器引擎前缀</h3><p>主流浏览器引擎前缀:<br>    -webkit- （谷歌，Safari，新版Opera浏览器，以及几乎所有iOS系统中的浏览器（包括 iOS 系统中的火狐浏览器）；基本上所有基于WebKit 内核的浏览器）<br>    -moz- （火狐浏览器）<br>    -o- （旧版Opera浏览器）<br>    -ms- （IE浏览器 和 Edge浏览器）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">示例:</span><br><span class="line">    -webkit-transition: all 4s ease;</span><br><span class="line">    -moz-transition: all 4s ease;</span><br><span class="line">    -ms-transition: all 4s ease;</span><br><span class="line">    -o-transition: all 4s ease;</span><br><span class="line">    transition: all 4s ease; </span><br></pre></td></tr></table></figure>
<h3 id="transform过渡"><a href="#transform过渡" class="headerlink" title="transform过渡"></a>transform过渡</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transition-property: all; 规定设置过渡效果的CSS属性的名称。</span><br><span class="line">transition-duration: 1s; 规定完成过渡效果需要多少秒或毫秒。</span><br><span class="line">transition-delay: 2s;    定义过渡效果何时开始(延迟数值为正数,也可以提前数值为负数)。</span><br><span class="line">transition-timing-function: ; 规定速度效果的速度曲线。cubic-bezier(https:&#x2F;&#x2F;cubic-bezier.com&#x2F;)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 复合写法 transition-property不写默认为all</span><br><span class="line">transition: 1s 2s linear; </span><br></pre></td></tr></table></figure>
<h3 id="transform变形"><a href="#transform变形" class="headerlink" title="transform变形"></a>transform变形</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">transform: translate(100px, 0); translateX translateY translateZ(3D,正值向前,负值向后) 位移属性</span><br><span class="line"></span><br><span class="line">transform: scale(2, .5); scaleX scaleY scaleZ(3d,立体元素的厚度) 缩放(以元素中心点缩放,值是一个比列值,正常大小是1,2个值相同可写一个值,值为-1可实现翻转效果)</span><br><span class="line"></span><br><span class="line">transform: rotate(45deg); rotateX(3D,正值向上翻转) rotateY(3D,正值向右翻转) rotateZ(和rotate是等价关系,正值按顺时针旋转) 旋转(值为度 deg)</span><br><span class="line"></span><br><span class="line">transform: skew(30deg, 0); skewX skewY 斜切,单位为角度,正值向左倾斜</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">    1.变形操作不会影响到其他元素。</span><br><span class="line">    2.变形操作只能添加给块元素,不能添加给内联元素。</span><br><span class="line">    3.复合写法执行顺序：先执行后面的操作,再执行前面的操作。</span><br><span class="line">    4.translate会受到 rotate scale skew的影响。</span><br><span class="line">    5.transform-origin: center center -50px; x y z基点的位置,Z轴只能写数值,不能写单词。</span><br><span class="line">    6.transform-style: 3D空间 flat(默认值2d) preserve-3d(3d,产生一个三维空间)。</span><br><span class="line">    7.perspective(景深) : 离屏幕多远的距离去观察元素,值越大幅度越小。 </span><br><span class="line">    8.perspective-origin ：景深-基点位置,观察元素的角度。</span><br><span class="line">    9.backface-visibility: 背面隐藏 hidden visible(默认值)。</span><br></pre></td></tr></table></figure>
<h3 id="animation动画"><a href="#animation动画" class="headerlink" title="animation动画"></a>animation动画</h3><p>好用的CSS动画库：<a href="https://animate.style/">Animate.css</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .box1 &#123;</span><br><span class="line">        width: 300px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        border: 1px black solid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .box2 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background: red;</span><br><span class="line">        &#x2F;* 设置动画的名字(名字自定义) *&#x2F;</span><br><span class="line">        animation-name: myBox;</span><br><span class="line"></span><br><span class="line">        &#x2F;* 动画的持续时间 *&#x2F;</span><br><span class="line">        animation-duration: 4s;</span><br><span class="line"></span><br><span class="line">        &#x2F;* 动画的延迟时间 *&#x2F;</span><br><span class="line">        animation-delay: 2s;</span><br><span class="line"></span><br><span class="line">        &#x2F;* 动画的重复次数,默认值为1,infinite无限次数 *&#x2F;</span><br><span class="line">        animation-iteration-count: infinite;</span><br><span class="line"></span><br><span class="line">        &#x2F;* 动画的运动形式 *&#x2F;</span><br><span class="line">        animation-timing-function: linear;</span><br><span class="line"></span><br><span class="line">        &#x2F;* 复合写法 *&#x2F;</span><br><span class="line">        animation: myBox 4s 2s infinite linear;</span><br><span class="line"></span><br><span class="line">        &#x2F;*</span><br><span class="line">        animation-fill-mode: ; 规定动画播放之前或之后,其动画效果是否可见。</span><br><span class="line">            none默认值 ： 在运动结束之后回到初始位置,在延迟的情况下,让0%在延迟后生效。</span><br><span class="line">            backwards ： 在延迟的情况下,让0%在延迟前生效。</span><br><span class="line">            forwards ： 在运动结束的之后,停到结束位置。</span><br><span class="line">            both : backwards和forwards同时生效。</span><br><span class="line"></span><br><span class="line">        animation-duration: ; 定义是否应该轮流反向播放动画。</span><br><span class="line">            alternate : 一次正向(0%~100%),一次反向(100%~0%)</span><br><span class="line">            reverse  : 永远都是反向,从100%~0%</span><br><span class="line">            normal(默认值) ： 永远都是正向,从0%~100%</span><br><span class="line">        *&#x2F;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;* from &#x3D; 0%  to &#x3D; 100% *&#x2F;</span><br><span class="line">    @keyframes myBox &#123;</span><br><span class="line">        0% &#123;</span><br><span class="line">            transform: translate(0, 0);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        100% &#123;</span><br><span class="line">            transform: translate(200px, 0);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;box1&quot;&gt;</span><br><span class="line">        &lt;div class&#x3D;&quot;box2&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="CSS3-mask遮罩"><a href="#CSS3-mask遮罩" class="headerlink" title="CSS3 mask遮罩"></a>CSS3 mask遮罩</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-webkit-mask: url() repeat x y w h 多遮罩;</span><br><span class="line">&#x2F;&#x2F; 注：需要添加浏览器前缀,默认x y都平铺。</span><br></pre></td></tr></table></figure>
<h3 id="CSS3-倒影效果"><a href="#CSS3-倒影效果" class="headerlink" title="CSS3 倒影效果"></a>CSS3 倒影效果</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-webkit-box-reflect: ;  取值：above,below,left,right 距离 遮罩|渐变(只能针对透明度的渐变,不能支持颜色的渐变)</span><br></pre></td></tr></table></figure>
<h3 id="模糊与计算"><a href="#模糊与计算" class="headerlink" title="模糊与计算"></a>模糊与计算</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter: blur(10px); 设置模糊效果</span><br><span class="line"></span><br><span class="line">width: calc(100% - 100px); 四则运算,支持加减乘除</span><br></pre></td></tr></table></figure>
<h3 id="分栏标签"><a href="#分栏标签" class="headerlink" title="分栏标签"></a>分栏标签</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">column-count: 1; 分栏的个数</span><br><span class="line">column-width: 100px; 分栏的宽度</span><br><span class="line">column-gap: 50px; 分栏的间距</span><br><span class="line">column-rule: 1px red dashed; 分栏的边线</span><br><span class="line">column-span: all; 合并分栏</span><br><span class="line"></span><br><span class="line">注：column-count与column-width不要一起设置</span><br></pre></td></tr></table></figure>
<h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; css3中规定伪类由一个冒号开始,为伪类的名称。伪元素由两个冒号开始,为伪元素的名称。</span><br><span class="line">&#x2F;&#x2F; 伪元素是创建了一个有内容的虚拟容器。这个容器不包含任何DOM元素,但是可以包含内容。还可以为伪元素定制样式。</span><br><span class="line">::selection ::first-line &#x2F; first-letter ::before &#x2F; after</span><br></pre></td></tr></table></figure>
<h3 id="CSS-Hack"><a href="#CSS-Hack" class="headerlink" title="CSS Hack"></a>CSS Hack</h3><p>// CSS Hack用来解决浏览器的兼容性问题,为不同版本的浏览器定制编写不同的CSS效果,使用每个浏览器单独识别的样式代码,控制浏览器的显示样式。</p>
<pre><code>Hack分类：
    1.CSS属性前缀法：在CSS样式属性名前加上一些只有特定浏览器才能识别的hack前缀。
    2.选择器前缀法：针对一些页面表现不一致或者需要特殊对待的浏览器,在CSS选择器前加上一些只有某些特定浏览器才能识别的前缀进行hack。
    3.IE条件注释法：IE浏览器专有的Hack方法,微软官方推荐使用的方式。IE10以上不支持。
</code></pre>
<p>渐进增强：针对低版本浏览器进行构建页面,保证最基本的功能,然后再针对高级浏览器进行效果,交互等改进和追加功能达到更好的用户体验。</p>
<p>优雅降级：一开始就构建完整的功能,然后再针对低版本浏览器进行兼容。</p>
]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>辅助工具JQuery</title>
    <url>/2021/07/05/JQuery/</url>
    <content><![CDATA[<p><a href="https://www.w3school.com.cn/jquery/jquery_reference.asp">jQuery文档</a></p>
<pre><code>版本区别：
    1.0   兼容到IE8以下
    2.0   只兼容IE8以上
    3.0
</code></pre>
<h1 id="选择网页元素"><a href="#选择网页元素" class="headerlink" title="选择网页元素"></a>选择网页元素</h1><h2 id="模拟CSS选择元素"><a href="#模拟CSS选择元素" class="headerlink" title="模拟CSS选择元素"></a>模拟CSS选择元素</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// #id </span></span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// .class</span></span><br><span class="line">    $(<span class="string">&quot;.box&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// tagName</span></span><br><span class="line">    $(<span class="string">&quot;ul li&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;pink&quot;</span>);</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;[name=hello]&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;yello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="独有的表达式"><a href="#独有的表达式" class="headerlink" title="独有的表达式"></a>独有的表达式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 选择所有li</span></span><br><span class="line">    $(<span class="string">&quot;li&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择第一个</span></span><br><span class="line">    $(<span class="string">&quot;li:first&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">    <span class="comment">// 选择最后一个</span></span><br><span class="line">    $(<span class="string">&quot;li:last&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择偶数</span></span><br><span class="line">    $(<span class="string">&quot;li:even&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">    <span class="comment">// 选择奇数</span></span><br><span class="line">    $(<span class="string">&quot;li:odd&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择下标为2的li</span></span><br><span class="line">    $(<span class="string">&quot;li:eq(2)&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="多种筛选方式"><a href="#多种筛选方式" class="headerlink" title="多种筛选方式"></a>多种筛选方式</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 选择下标为2的li</span></span><br><span class="line">$(<span class="string">&quot;li:eq(2)&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;li&quot;</span>).eq(<span class="number">2</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选择li里class为box的标签</span></span><br><span class="line">$(<span class="string">&quot;li.box&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">$(<span class="string">&quot;li&quot;</span>).filter(<span class="string">&quot;.box&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br></pre></td></tr></table></figure>
<h1 id="JQuery写法"><a href="#JQuery写法" class="headerlink" title="JQuery写法"></a>JQuery写法</h1><h2 id="方法函数化"><a href="#方法函数化" class="headerlink" title="方法函数化"></a>方法函数化</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 在JQ中所有的赋值操作都是函数传参的操作</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;$(里面加函数相当于window.onload)&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一个点击事件</span></span><br><span class="line">    $(<span class="string">&quot;h1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;我被点击了&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="链式操作"><a href="#链式操作" class="headerlink" title="链式操作"></a>链式操作</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/*         </span></span><br><span class="line"><span class="comment">    $(&quot;h1&quot;).click(function () &#123;</span></span><br><span class="line"><span class="comment">        console.log(&quot;单击&quot;);</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    $(&quot;h1&quot;).css(&quot;backgroundColor&quot;, &quot;orange&quot;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    $(&quot;h1&quot;).mouseover(function () &#123;</span></span><br><span class="line"><span class="comment">        this.style.backgroundColor = &quot;red&quot;;</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    $(&quot;h1&quot;).mouseout(function () &#123;</span></span><br><span class="line"><span class="comment">        this.style.backgroundColor = &quot;blue&quot;;</span></span><br><span class="line"><span class="comment">    &#125;) </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 操作同一个选择器可以通过链式操作简化</span></span><br><span class="line">    $(<span class="string">&quot;h1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;单击&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">        .css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;orange&quot;</span>)</span><br><span class="line">        .mouseover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.style.backgroundColor = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">        .mouseout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.style.backgroundColor = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="取值赋值合体"><a href="#取值赋值合体" class="headerlink" title="取值赋值合体"></a>取值赋值合体</h1><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// innerHTML</span></span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div&quot;</span>).html());</span><br><span class="line">    $(<span class="string">&quot;#div&quot;</span>).html(<span class="string">&quot;&lt;h2&gt;新的内容&lt;/h2&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// value</span></span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;input&quot;</span>).val());</span><br><span class="line">    $(<span class="string">&quot;input&quot;</span>).val(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="JQuery常用方法"><a href="#JQuery常用方法" class="headerlink" title="JQuery常用方法"></a>JQuery常用方法</h1><pre><code>ready 事件
$(document).ready() 事件触发在当前的document加载完成以后执行
document加载完毕在window加载完毕之前
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 先输出1 再输出2 最后输出onload</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;onload&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 相当于window.onload</span></span><br><span class="line">    alert(<span class="number">1</span>);</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="筛选"><a href="#筛选" class="headerlink" title="筛选"></a>筛选</h2><pre><code>filter  对获取到的网页元素进行过滤
not     filter的反义
has     判定子节点中是否有符合条件的元素
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 选择div里class为box的标签</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).filter(<span class="string">&quot;.box&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择div里class不为box的标签</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).not(<span class="string">&quot;.box&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择div里所有class为box的标签</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).has(<span class="string">&quot;.box&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="查找节点"><a href="#查找节点" class="headerlink" title="查找节点"></a>查找节点</h2><pre><code>prev    查找当前兄弟节点中的上一个节点
next    查找当前兄弟节点中的下一个节点
find    查找子节点
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 选择h3上一个兄弟节点</span></span><br><span class="line">    $(<span class="string">&quot;h3&quot;</span>).prev(<span class="string">&quot;.box&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择h3下一个兄弟节点</span></span><br><span class="line">    $(<span class="string">&quot;h3&quot;</span>).next(<span class="string">&quot;.box&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 选择ul里li的节点</span></span><br><span class="line">    $(<span class="string">&quot;ul&quot;</span>).find(<span class="string">&quot;li&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<pre><code>index   获取当前节点在兄弟节点中的下标
eq      通过下标获取指定的元素节点
attr    设置和修改行间属性
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;h3&quot;</span>).index());</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;li&quot;</span>).eq(<span class="number">3</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&#x27;orange&#x27;</span>);</span><br><span class="line">    $(<span class="string">&quot;li:eq(4)&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&#x27;yellow&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获取行间属性</span></span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).attr(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).attr(<span class="string">&quot;title&quot;</span>));</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).attr(<span class="string">&quot;class&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置属性值</span></span><br><span class="line">    <span class="comment">// $(&quot;#div1&quot;).attr(&quot;title&quot;, &quot;world&quot;);</span></span><br><span class="line">    <span class="comment">// $(&quot;#div1&quot;).attr(&quot;class&quot;, &quot;box2&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 一次性修改多条属性</span></span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).attr(&#123;</span><br><span class="line">        title: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">        class: &#x27;xxx&#x27;,</span><br><span class="line">        yyy: <span class="string">&#x27;zzz&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="添加和删除class样式"><a href="#添加和删除class样式" class="headerlink" title="添加和删除class样式"></a>添加和删除class样式</h2><pre><code>addClass()      添加class样式
removeClass()   删除class样式
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// addClass()      添加class样式</span></span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).addClass(<span class="string">&quot;box2 box3 box4&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// removeClass()   删除class样式</span></span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).removeClass(<span class="string">&quot;box2 box3&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box1 box2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<pre><code>remove() 删除元素节点,返回值是删除的节点,删除后不会保留元素节点上的事件和行为
detach() 删除元素节点,返回值是删除的节点,删除后保留元素节点上的事件和行为
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #div1 &#123;<span class="attr">width</span>: 100px;height: 100px;background-color: red;&#125;</span><br><span class="line">    #div2 &#123;<span class="attr">width</span>: 200px;height: 200px;border: 1px solid black;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">/* $(&quot;button&quot;).click(function () &#123;</span></span><br><span class="line"><span class="comment">            var node = $(&quot;#div1&quot;).remove();</span></span><br><span class="line"><span class="comment">            node.appendTo($(&quot;#div2&quot;));</span></span><br><span class="line"><span class="comment">        &#125;) */</span></span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> node = $(<span class="string">&quot;#div1&quot;</span>).detach();</span><br><span class="line">            node.appendTo($(<span class="string">&quot;#div2&quot;</span>));</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;删除节点&lt;/button&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span> title=<span class="string">&quot;hello&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="克隆节点"><a href="#克隆节点" class="headerlink" title="克隆节点"></a>克隆节点</h2><pre><code>clone() 默认克隆节点本身,不会克隆元素节点行为和事件
clone(true) 即会克隆节点本身,还会克隆元素节点的行为和事件
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #div1 &#123;<span class="attr">width</span>: 100px;height: 100px;background-color: red;&#125;</span><br><span class="line">    #div2 &#123;<span class="attr">width</span>: 200px;height: 200px;border: 1px solid black;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> node = $(<span class="string">&quot;#div1&quot;</span>).clone(<span class="literal">true</span>);</span><br><span class="line">            node.appendTo($(<span class="string">&quot;#div2&quot;</span>));</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;删除节点&lt;/button&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span> title=<span class="string">&quot;hello&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="包装"><a href="#包装" class="headerlink" title="包装"></a>包装</h2><pre><code>wrap()      给每一个获取到的元素节点单独包装
wrapAll()   整体包装
wrapInner() 内部包装
unwrap()    删除上面一层包装,不包括body节点
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// $(&quot;span&quot;).wrap(&quot;&lt;p class=&#x27;box&#x27; title = &#x27;hello&#x27;&gt;&lt;/p&gt;&quot;);</span></span><br><span class="line">        <span class="comment">// $(&quot;span&quot;).wrapAll(&quot;&lt;p class=&#x27;box&#x27; title = &#x27;hello&#x27;&gt;&lt;/p&gt;&quot;);</span></span><br><span class="line">        <span class="comment">// $(&quot;span&quot;).wrapInner(&quot;&lt;p class=&#x27;box&#x27; title = &#x27;hello&#x27;&gt;&lt;/p&gt;&quot;);</span></span><br><span class="line">        $(<span class="string">&quot;span&quot;</span>).unwrap();</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;span&gt;span&lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;span&gt;span&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;span&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;span&lt;/span&gt;</span><br><span class="line">    &lt;span&gt;span&lt;/span&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><pre><code>html()  标签间的内容,相当于innerHTML
text()  标签间纯文本,相当于innerText
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 先输出1 再输出2 最后输出onload</span></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).html()); <span class="comment">//&lt;em&gt;em&lt;/em&gt;div文本&lt;strong&gt;strong&lt;/strong&gt;</span></span><br><span class="line">        <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).text()); <span class="comment">//emdiv文本strong</span></span><br><span class="line">        <span class="comment">//$(&quot;#div1&quot;).html(&quot;&lt;h1&gt;hello world&lt;/h1&gt;&quot;); //会解析标签</span></span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).text(<span class="string">&quot;&lt;h1&gt;hello world&lt;/h1&gt;&quot;</span>); <span class="comment">// 不会解析标签</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">em</span>&gt;</span>em<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span>div文本&lt;strong&gt;strong&lt;<span class="regexp">/strong&gt;&lt;/</span>div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<pre><code>parent()    获取父节点
parents()   获取父节点们
closest()   必须传入参数,参数为选择器,只获取第一个符合条件的元素,从自己去查找
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// $(&quot;#div2&quot;).parent().css(&quot;backgroundColor&quot;, &quot;red&quot;);</span></span><br><span class="line">        <span class="comment">// $(&quot;#div2&quot;).parents().css(&quot;backgroundColor&quot;, &quot;red&quot;);</span></span><br><span class="line">        $(<span class="string">&quot;#div2&quot;</span>).closest(<span class="string">&quot;.box&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        div1</span><br><span class="line">        &lt;div id=<span class="string">&quot;div2&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">            div2</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<pre><code>width       获取宽度width
innerWidth  获取宽度width + padding
outerWidth  获取宽度width + border + padding

height
innerHeight
outerHeight
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).width()); <span class="comment">// width</span></span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).innerWidth()); <span class="comment">// width + padding</span></span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).outerWidth()); <span class="comment">// width + border + padding</span></span><br><span class="line">    <span class="built_in">console</span>.log($(<span class="string">&quot;#div1&quot;</span>).outerWidth(<span class="literal">true</span>)); <span class="comment">// width + border + padding + margin</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<pre><code>val() value 获取/设置表单元素的值
size() 输出,获取网页元素的个数
each() 为每个匹配元素规定运行的函数
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//alert($(&quot;input&quot;).val()); // aaa JQ取值只能去取第一个符合条件的元素的值</span></span><br><span class="line">        <span class="comment">//$(&quot;input&quot;).val(&quot;hello world&quot;); // JQ赋值批量操作,会对所有获取的元素进行赋值</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//alert($(&quot;input&quot;).size()); //3</span></span><br><span class="line">        <span class="comment">//alert($(&quot;input&quot;).length); //3</span></span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;input&quot;</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params">index, item</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// tem.value = index;</span></span><br><span class="line">            $(item).val(index);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;aaa&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;bbb&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;ccc&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><pre><code>insertBefore    before
insertAfter     after
appendTo        append
prependTo       prepend
remove  
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 找到span节点放到div的前面</span></span><br><span class="line">    $(<span class="string">&quot;span&quot;</span>).insertBefore($(<span class="string">&quot;div&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到div节点放到span的后面</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).insertAfter($(<span class="string">&quot;span&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到span节点,放到div节点的子节点末尾</span></span><br><span class="line">    $(<span class="string">&quot;span&quot;</span>).appendTo($(<span class="string">&quot;div&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到span节点,放到div节点的子节点首位</span></span><br><span class="line">    $(<span class="string">&quot;span&quot;</span>).prependTo($(<span class="string">&quot;div&quot;</span>));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除div节点</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).remove();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到span节点放到div的前面,操作的是span</span></span><br><span class="line">    $(<span class="string">&quot;span&quot;</span>).insertBefore($(<span class="string">&quot;div&quot;</span>)).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">    <span class="comment">// div节点前面是span,操作的是div</span></span><br><span class="line">    $(<span class="string">&quot;div&quot;</span>).before($(<span class="string">&quot;span&quot;</span>)).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<pre><code>节点选择器：
siblings()  用来选择除当前节点外,所有的兄弟节点

nextAll()   用来选择当前节点往上所有的兄弟节点,(可传选择器参数)
prevAll()   用来选择当前节点往下所有的兄弟节点,(可传选择器参数)

parentsUntil()  用来选择当前节点到括号里的参数所有祖先元素
nextUntil()     用来选择当前节点往下到括号里的参数中间所有的兄弟节点
prevUntil()     用来选择当前节点往上到括号里的参数中间所有的兄弟节点
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// $(&quot;#p1&quot;).siblings().css(&quot;backgroundColor&quot;, &quot;blue&quot;);</span></span><br><span class="line">        <span class="comment">// $(&quot;#p1&quot;).nextAll().css(&quot;backgroundColor&quot;, &quot;blue&quot;);</span></span><br><span class="line">        <span class="comment">// $(&quot;#p1&quot;).prevAll(&quot;h1&quot;).css(&quot;backgroundColor&quot;, &quot;blue&quot;);</span></span><br><span class="line">        <span class="comment">// $(&quot;#p1&quot;).nextUntil(&quot;strong&quot;).css(&quot;backgroundColor&quot;, &quot;blue&quot;);</span></span><br><span class="line">        <span class="comment">// $(&quot;#p1&quot;).prevUntil(&quot;h1&quot;).css(&quot;backgroundColor&quot;, &quot;blue&quot;);</span></span><br><span class="line">        $(<span class="string">&quot;#p1&quot;</span>).parentsUntil(<span class="string">&quot;html&quot;</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;blue&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">        &lt;h1&gt;h1&lt;/h1&gt;</span><br><span class="line">        &lt;h2&gt;h2&lt;/h2&gt;</span><br><span class="line">        &lt;p id=<span class="string">&quot;p1&quot;</span>&gt;p&lt;/p&gt;</span><br><span class="line">        &lt;em&gt;em&lt;/em&gt;</span><br><span class="line">        &lt;h3&gt;h3&lt;/h3&gt;</span><br><span class="line">        &lt;strong&gt;strong&lt;/strong&gt;</span><br><span class="line">        &lt;h6&gt;h6&lt;/h6&gt;</span><br><span class="line">        &lt;h2&gt;h2&lt;/h2&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;h5&gt;h5&lt;/h5&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="on和off"><a href="#on和off" class="headerlink" title="on和off"></a>on和off</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* 普通的事件绑定</span></span><br><span class="line"><span class="comment">    $(&quot;#div1&quot;).click(function () &#123;</span></span><br><span class="line"><span class="comment">        alert(1);</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">    $(&quot;#div1&quot;).click(function () &#123;</span></span><br><span class="line"><span class="comment">        alert(2);</span></span><br><span class="line"><span class="comment">    &#125;) </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给一个事件添加一个函数</span></span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同时给多个事件添加一个函数</span></span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).on(<span class="string">&quot;click mouseover&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="built_in">this</span>).html(i++);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给不同的事件添加不同的函数</span></span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).on(&#123;</span><br><span class="line">        click: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;点击&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        mouseover: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;orange&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        mouseout: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实现事件委托,第二个参数是触发对象的选择器</span></span><br><span class="line">    $(<span class="string">&quot;ul&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="string">&quot;li&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新增li节点</span></span><br><span class="line">    <span class="keyword">var</span> j = <span class="number">6</span>;</span><br><span class="line">    $(<span class="string">&quot;#btn1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">`&lt;li&gt;<span class="subst">$&#123;j++ * <span class="number">111</span>&#125;</span>&lt;/li&gt;`</span>).appendTo($(<span class="string">&quot;ul&quot;</span>));</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取消事件</span></span><br><span class="line">    $(<span class="string">&quot;#cancel&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// $(&quot;#div1&quot;).off(); // 取消所有事件上的所有函数</span></span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).off(<span class="string">&quot;click&quot;</span>); <span class="comment">// 取消某一个事件下的所有函数</span></span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).off(<span class="string">&quot;click&quot;</span>, show); <span class="comment">// 取消某一个事件下指定的函数</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    $(<span class="string">&quot;#div1&quot;</span>).click(show);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="scrollTop获取滚动高度"><a href="#scrollTop获取滚动高度" class="headerlink" title="scrollTop获取滚动高度"></a>scrollTop获取滚动高度</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert($(<span class="built_in">window</span>).scrollTop()); <span class="comment">// 输出滚动高度</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h2><pre><code>ev  
pageX   
which
    用在鼠标事件：代表js的button
    用在keydown：代表keyCode 键码
    用在keypress：代表charCode 字符码
preventDefault
stopPropagation
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div &#123;<span class="attr">padding</span>: 30px;&#125;</span><br><span class="line">    #div1 &#123;background-color: red;&#125;</span><br><span class="line">    #div2 &#123;background-color: blue;&#125;</span><br><span class="line">    #div3 &#123;background-color: orange;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            alert(<span class="built_in">this</span>.id); <span class="comment">// js</span></span><br><span class="line">            <span class="comment">// alert($(this).attr(&quot;id&quot;)); // jq</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// jq 阻止事件冒泡</span></span><br><span class="line">            ev.stopPropagation();</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="string">&quot;a&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 阻止事件冒泡和默认行为</span></span><br><span class="line">            <span class="comment">// ev.preventDefault();</span></span><br><span class="line">            <span class="comment">// ev.stopPropagation();</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">&quot;div2&quot;</span>&gt;</span><br><span class="line">            &lt;div id=<span class="string">&quot;div3&quot;</span>&gt;</span><br><span class="line">                &lt;a href=<span class="string">&quot;https://baidu.com&quot;</span>&gt;百度&lt;/a&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="built_in">document</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            alert(ev.pageX + <span class="string">&quot;,&quot;</span> + ev.pageY); <span class="comment">// 带滚动距离</span></span><br><span class="line">            alert(ev.clientX + <span class="string">&quot;,&quot;</span> + ev.clientY); <span class="comment">// 可视窗口为原点</span></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        $(<span class="built_in">document</span>).mousedown(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            alert(ev.which);</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="built_in">window</span>).keydown(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            alert(ev.which);</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="built_in">window</span>).keypress(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            alert(ev.which);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body style=<span class="string">&quot;height: 2000px;&quot;</span>&gt;&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<pre><code>offset()    获取当前元素,距离最左边的距离,不加margin
position()  获取当前元素,距离第一个有定位父节点的距离,加margin
offsetParent() 查找第一个有定位的父节点,如果父节点没有定位就往上找,最终找到html节点
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    * &#123;<span class="attr">margin</span>: <span class="number">0</span>;padding: <span class="number">0</span>;&#125;</span><br><span class="line">    #div1 &#123;<span class="attr">width</span>: 200px;height: 200px;background-color: red;margin: 30px;position: relative;&#125;</span><br><span class="line">    #div2 &#123;<span class="attr">width</span>: 100px;height: 100px;background-color: blue;margin: 20px;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// alert($(&quot;#div2&quot;).offset().left);</span></span><br><span class="line">        <span class="comment">// alert($(&quot;#div2&quot;).position().top);</span></span><br><span class="line">        $(<span class="string">&quot;#div2&quot;</span>).offsetParent().css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;yellow&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">&quot;div2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="事件细节"><a href="#事件细节" class="headerlink" title="事件细节"></a>事件细节</h2><pre><code>trigger() 主动触发,可触发官方定义事件,还可以触发自定义的事件
ev.data 拿到参数

ev.target(兼容后触发对象)
ev.type(输出事件类型)
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* $(&quot;button&quot;).click(function (ev) &#123;</span></span><br><span class="line"><span class="comment">            console.log(ev.type);</span></span><br><span class="line"><span class="comment">            console.log(ev.target);</span></span><br><span class="line"><span class="comment">        &#125;) */</span></span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).on(<span class="string">&quot;click&quot;</span>, &#123; <span class="attr">username</span>: <span class="string">&quot;哪吒&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            <span class="comment">/* console.log(ev.data); // 拿到传入的参数</span></span><br><span class="line"><span class="comment">            console.log(ev.data.username);</span></span><br><span class="line"><span class="comment">            console.log(ev.data.age); */</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主动触发</span></span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).on(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).trigger(<span class="string">&quot;click&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自定义事件</span></span><br><span class="line">        $(<span class="string">&quot;#play&quot;</span>).on(<span class="string">&quot;play&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;开始播放音乐&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="string">&quot;#play&quot;</span>).on(<span class="string">&quot;next&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;切换到下一首歌曲&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">0</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#play&quot;</span>).trigger(<span class="string">&quot;play&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#play&quot;</span>).trigger(<span class="string">&quot;next&quot;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;下一首&lt;/button&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;play&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="多个添加"><a href="#多个添加" class="headerlink" title="多个添加"></a>多个添加</h2><pre><code>add()   将多个选择器拼接在一起
slice(start, end) 获取指定范围内获取到的元素节点
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* $(&quot;div,span,ul li&quot;)</span></span><br><span class="line"><span class="comment">            .css(&quot;backgroundColor&quot;, &quot;red&quot;)</span></span><br><span class="line"><span class="comment">            .click(function () &#123;</span></span><br><span class="line"><span class="comment">                alert(&quot;单击&quot;);</span></span><br><span class="line"><span class="comment">            &#125;)</span></span><br><span class="line"><span class="comment">            .mouseover(function () &#123;</span></span><br><span class="line"><span class="comment">                $(this).css(&quot;backgroundColor&quot;, &quot;orange&quot;);</span></span><br><span class="line"><span class="comment">            &#125;)</span></span><br><span class="line"><span class="comment">            .mouseout(function () &#123;</span></span><br><span class="line"><span class="comment">                $(this).css(&quot;backgroundColor&quot;, &quot;blue&quot;);</span></span><br><span class="line"><span class="comment">            &#125;) */</span></span><br><span class="line">        $(<span class="string">&quot;ul li&quot;</span>).slice(<span class="number">1</span>, <span class="number">4</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;red&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;div&lt;/div&gt;</span><br><span class="line">    &lt;span&gt;span&lt;/span&gt;</span><br><span class="line">    &lt;p&gt;p&lt;/p&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">111</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">111</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">111</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">111</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">111</span>&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="表单拼接"><a href="#表单拼接" class="headerlink" title="表单拼接"></a>表单拼接</h2><pre><code>serialize() 将表单中的数据拼接成querystring 
serializeArray() 将表单数据拼接成数组
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//alert($(&quot;input&quot;).serialize()); //a=1&amp;b=2&amp;c=3</span></span><br><span class="line">        <span class="built_in">console</span>.log($(<span class="string">&quot;input&quot;</span>).serializeArray());</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;a&quot;</span> value=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;b&quot;</span> value=<span class="string">&quot;2&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;c&quot;</span> value=<span class="string">&quot;3&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="特效函数"><a href="#特效函数" class="headerlink" title="特效函数"></a>特效函数</h1><h2 id="动画方法"><a href="#动画方法" class="headerlink" title="动画方法"></a>动画方法</h2><pre><code>hover(funcOver, funcOut)   第一个参数：移入,第二个参数：移出
hide()  隐藏
    第一个参数：动画持续的毫秒数
    第二个参数：回调函数,动画结束的时候执行
show()  显示
    动画效果从左上角收起,从左上角展开

slidedown()
slideup()       卷闸效果

fadeIn()
fadeOut()       淡入淡出 
fadeTo(动画持续时间,透明度0~1,回调函数)
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div &#123;<span class="attr">width</span>: 100px;height: 100px;&#125;</span><br><span class="line">    #div1 &#123;background-color: red;&#125;</span><br><span class="line">    #div2 &#123;background-color: blue;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// $(this).html(&quot;移入&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* $(&quot;#div2&quot;).hide(2000, function () &#123;</span></span><br><span class="line"><span class="comment">                $(&quot;#div1&quot;).html(&quot;移入&quot;);</span></span><br><span class="line"><span class="comment">            &#125;); */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* $(&quot;#div2&quot;).slideUp(2000, function () &#123;</span></span><br><span class="line"><span class="comment">                $(&quot;#div1&quot;).html(&quot;移入&quot;);</span></span><br><span class="line"><span class="comment">            &#125;); */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* $(&quot;#div2&quot;).fadeOut(2000, function () &#123;</span></span><br><span class="line"><span class="comment">                $(&quot;#div1&quot;).html(&quot;移入&quot;);</span></span><br><span class="line"><span class="comment">            &#125;); */</span></span><br><span class="line"></span><br><span class="line">            $(<span class="string">&quot;#div2&quot;</span>).fadeTo(<span class="number">2000</span>, <span class="number">0.5</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&quot;#div1&quot;</span>).html(<span class="string">&quot;移入&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// $(this).html(&quot;移出&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* $(&quot;#div2&quot;).show(2000, function () &#123;</span></span><br><span class="line"><span class="comment">                $(&quot;#div1&quot;).html(&quot;移出&quot;);</span></span><br><span class="line"><span class="comment">            &#125;); */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* $(&quot;#div2&quot;).slideDown(2000, function () &#123;</span></span><br><span class="line"><span class="comment">                $(&quot;#div1&quot;).html(&quot;移出&quot;);</span></span><br><span class="line"><span class="comment">            &#125;); */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">/* $(&quot;#div2&quot;).fadeIn(2000, function () &#123;</span></span><br><span class="line"><span class="comment">                $(&quot;#div1&quot;).html(&quot;移出&quot;);</span></span><br><span class="line"><span class="comment">            &#125;); */</span></span><br><span class="line"></span><br><span class="line">            $(<span class="string">&quot;#div2&quot;</span>).fadeTo(<span class="number">2000</span>, <span class="number">1</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&quot;#div1&quot;</span>).html(<span class="string">&quot;移出&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="animate"><a href="#animate" class="headerlink" title="animate"></a>animate</h2><pre><code>animate
    第一个参数：变化的CSS样式和值
    第二个参数：动画的时间
    第三个参数：回调函数
默认运动形式 慢快慢 swing
            匀速  linear
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div &#123;<span class="attr">width</span>: 100px;height: 100px;&#125;</span><br><span class="line">    #div1 &#123;background-color: red;&#125;</span><br><span class="line">    #div2 &#123;background-color: blue;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#div2&quot;</span>).animate(&#123;</span><br><span class="line">                width: <span class="number">300</span>,</span><br><span class="line">                height: <span class="number">300</span>,</span><br><span class="line">                opacity: <span class="number">0.5</span></span><br><span class="line">            &#125;, <span class="number">4000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&quot;#div1&quot;</span>).html(<span class="string">&quot;移入&quot;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#div2&quot;</span>).animate(&#123;</span><br><span class="line">                width: <span class="number">200</span>,</span><br><span class="line">                height: <span class="number">200</span>,</span><br><span class="line">                opacity: <span class="number">1</span></span><br><span class="line">            &#125;, <span class="number">4000</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="string">&quot;#div1&quot;</span>).html(<span class="string">&quot;移出&quot;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="停止动画函数"><a href="#停止动画函数" class="headerlink" title="停止动画函数"></a>停止动画函数</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div &#123;<span class="attr">width</span>: 100px;height: 100px;&#125;</span><br><span class="line">    #div1 &#123;background-color: red;&#125;</span><br><span class="line">    #div2 &#123;background-color: blue;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#div1&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// delay 延迟执行操作</span></span><br><span class="line">            $(<span class="string">&quot;#div1&quot;</span>).animate(&#123; <span class="attr">width</span>: <span class="number">300</span> &#125;, <span class="number">2000</span>).delay(<span class="number">4000</span>).animate(&#123; <span class="attr">height</span>: <span class="number">300</span> &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        $(<span class="string">&quot;#div2&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// $(&quot;#div1&quot;).stop(); // 停止第一个动画,后面的动画正常运动</span></span><br><span class="line">            <span class="comment">// $(&quot;#div1&quot;).stop(true); //停止所有动画</span></span><br><span class="line">            <span class="comment">// $(&quot;#div1&quot;).stop(true, true);//停止所有动画,将当前正在进行的动画到达目的值</span></span><br><span class="line">            $(<span class="string">&quot;#div1&quot;</span>).finish();<span class="comment">// 停止所有动画,把所有动画都到达目的值</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;<span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="JQuery工具方法"><a href="#JQuery工具方法" class="headerlink" title="JQuery工具方法"></a>JQuery工具方法</h1><pre><code>注：$()下的常用方法(ECMA5和ECMA6有类似功能的函数)
JQ的方法调用：$().xxx() $().yyy()
JQ的工具方法：$.xxx()   $.yyy()

    type()  输出当前数据类型,功能类似于typeof
    trim()
    inArray()   功能类似于indexOf()
    proxy()     功能类似于bind
    noConflict()
    $.parseJSON()   JSON.parse()
    makeArray()     将伪数组转成数组    Array.from()
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// type()  输出当前数据类型 typeof</span></span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line">    <span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>();</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// js的方法</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> arr); <span class="comment">// object</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> str); <span class="comment">// object</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> d); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// jq的方法</span></span><br><span class="line">    <span class="built_in">console</span>.log($.type(arr)); <span class="comment">// array</span></span><br><span class="line">    <span class="built_in">console</span>.log($.type(str)); <span class="comment">// string</span></span><br><span class="line">    <span class="built_in">console</span>.log($.type(d)); <span class="comment">// date</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// trim()   删除空格</span></span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="string">&quot;   he  l  lo    &quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;|&quot;</span> + str2 + <span class="string">&quot;|&quot;</span>); <span class="comment">// |   he  l  lo    |</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;|&quot;</span> + str2.trim() + <span class="string">&quot;|&quot;</span>); <span class="comment">// |he  l  lo|</span></span><br><span class="line">    <span class="comment">// console.log(&quot;|&quot; + $.trim(str2) + &quot;|&quot;); // |he  l  lo|</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// inArray()   功能类似于indexOf()</span></span><br><span class="line">    <span class="keyword">var</span> arr2 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>];</span><br><span class="line">    <span class="built_in">console</span>.log($.inArray(<span class="number">30</span>, arr)); <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// noConflict() 给$函数起一个别名</span></span><br><span class="line">    <span class="comment">/* var qian = $.noConflict();</span></span><br><span class="line"><span class="comment">    var $ = 10;</span></span><br><span class="line"><span class="comment">    qian(function () &#123;</span></span><br><span class="line"><span class="comment">        qian(document).click(function () &#123;</span></span><br><span class="line"><span class="comment">            console.log(1);</span></span><br><span class="line"><span class="comment">        &#125;)</span></span><br><span class="line"><span class="comment">    &#125;) */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// makeArray()     将伪数组转成数组    Array.from()</span></span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nodes = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        <span class="comment">// nodes = $.makeArray(nodes);</span></span><br><span class="line">        nodes = <span class="built_in">Array</span>.from(nodes);</span><br><span class="line">        nodes.push(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(nodes);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="JQuery插件方法"><a href="#JQuery插件方法" class="headerlink" title="JQuery插件方法"></a>JQuery插件方法</h1><pre><code>给JQ新增函数,使用下面的两个插件方法扩展函数库
    $.extend()      扩展工具方法
    $.fn.extend()   扩展JQ方法
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div &#123;<span class="attr">width</span>: 100px;height: 100px;background-color: chocolate;position: absolute;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $.extend(&#123;</span><br><span class="line">        aaa: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;这是一个工具方法&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    $.fn.extend(&#123;</span><br><span class="line">        aaa: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;这是一个JQ方法&quot;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        drag: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).mousedown(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> offsetX = ev.clientX - $(<span class="built_in">this</span>).offset().left;</span><br><span class="line">                <span class="keyword">var</span> offsetY = ev.clientY - $(<span class="built_in">this</span>).offset().top;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">var</span> _this = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line">                $(<span class="built_in">document</span>).mousemove(<span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">                    $(_this).css(&#123;</span><br><span class="line">                        left: ev.clientX - offsetX,</span><br><span class="line">                        top: ev.clientY - offsetY</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            $(<span class="built_in">document</span>).mouseup(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                $(<span class="built_in">document</span>).off(<span class="string">&quot;mousemove&quot;</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;div&quot;</span>).drag().css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;blue&quot;</span>).mouseover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="built_in">this</span>).css(<span class="string">&quot;backgroundColor&quot;</span>, <span class="string">&quot;yellow&quot;</span>)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="JQuery的ajax和cookie"><a href="#JQuery的ajax和cookie" class="headerlink" title="JQuery的ajax和cookie"></a>JQuery的ajax和cookie</h1><h2 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h2><pre><code>格式：
    $.cookie(name)  通过name取值
    $.cookie(name, value)   设置name和value
    $.cookie(name,value&#123;
        可选项
        raw: true,value不进行编码。默认值为false,value会进行编码
    &#125;)
    $.cookie(name, null);   删除cookie
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;jquery.cookie.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $.cookie(<span class="string">&quot;宝多梦&quot;</span>, <span class="string">&quot;皮卡秋&quot;</span>, &#123;</span><br><span class="line">        expires: <span class="number">7</span>,</span><br><span class="line">        raw: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">    $.cookie(<span class="string">&quot;塞眼达&quot;</span>, <span class="string">&quot;林珂&quot;</span>, &#123;</span><br><span class="line">        expires: <span class="number">30</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    $.cookie(<span class="string">&quot;超级麻丽&quot;</span>, <span class="string">&quot;马里袄&quot;</span>, &#123;</span><br><span class="line">        expires: <span class="number">1000</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h2 id="ajax"><a href="#ajax" class="headerlink" title="ajax"></a>ajax</h2><pre><code>$().load()
$.get()
$.post()
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// load方法：将url传入后,将下载到数据直接填充到被选中元素的innerHTML中</span></span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">&quot;div&quot;</span>).load(<span class="string">&quot;1.txt&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data, statusText, xhr</span>) </span>&#123;</span><br><span class="line">                <span class="comment">/*  </span></span><br><span class="line"><span class="comment">                    data 下载到的数据</span></span><br><span class="line"><span class="comment">                    statusText  下载的状态</span></span><br><span class="line"><span class="comment">                    xhr ajax对象</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                alert(data + <span class="string">&quot;,&quot;</span> + statusText);</span><br><span class="line">                alert(xhr.status);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// get</span></span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">1</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $.get(<span class="string">&quot;1.txt&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data, statusText, xhr</span>) </span>&#123;</span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// post</span></span><br><span class="line">        $(<span class="string">&quot;button&quot;</span>).eq(<span class="number">2</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $.post(<span class="string">&quot;1.post.php&quot;</span>, &#123;</span><br><span class="line">                username: <span class="string">&quot;xiao&quot;</span>,</span><br><span class="line">                age: <span class="number">18</span>,</span><br><span class="line">                password: <span class="string">&quot;123abc&quot;</span></span><br><span class="line">            &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">data, statusText, xhr</span>) </span>&#123;</span><br><span class="line">                alert(data);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;下载数据&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;GET请求&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;POST请求&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;#button&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            $ajax(&#123;</span><br><span class="line">                type: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">                url: <span class="string">&quot;https://api.asilu.com/weather/&quot;</span>,</span><br><span class="line">                data: &#123;</span><br><span class="line">                    city: <span class="string">&quot;广州&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                dataType: <span class="string">&quot;jsonp&quot;</span>,</span><br><span class="line">                success: <span class="function"><span class="keyword">function</span> (<span class="params">data, statusText</span>) </span>&#123;</span><br><span class="line">                    alert(data);</span><br><span class="line">                &#125;,</span><br><span class="line">                error: <span class="function"><span class="keyword">function</span> (<span class="params">msg</span>) </span>&#123;</span><br><span class="line">                    alert(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;下载数据&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JQuery</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue基础</title>
    <url>/2021/07/25/vue/</url>
    <content><![CDATA[<p><a href="https://cn.vuejs.org/">Vue官网</a><br><a href="https://www.cnblogs.com/wzfwaf/p/10553160.html">MVVM</a></p>
<h1 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h1><h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><h3 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h3><pre><code>&#123;&#123;&#125;&#125;
</code></pre>
<h3 id="纯HTML"><a href="#纯HTML" class="headerlink" title="纯HTML"></a>纯HTML</h3><pre><code>v-html,防止XSS,csrf(
    1.前端过滤
    2.后台转义(&lt; &gt; &amp;lt; &amp;gt;)
    3.给cookie加上属性http
)
</code></pre>
<h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &#123;&#123; <span class="number">10</span>+<span class="number">20</span> &#125;&#125;</span><br><span class="line">        &#123;&#123; <span class="number">10</span>&gt;<span class="number">20</span>?<span class="string">&#x27;aaa&#x27;</span>:<span class="string">&#x27;bbb&#x27;</span> &#125;&#125;</span><br><span class="line"></span><br><span class="line">        &lt;!-- vue指令 --&gt;</span><br><span class="line">        &lt;div v-html=<span class="string">&quot;myhtml&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 没渲染的无法使用 --&gt;</span><br><span class="line">    &lt;div&gt;&#123;&#123; <span class="number">10</span>+<span class="number">20</span> &#125;&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>, <span class="comment">// vue 渲染开始的地方</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                myname: <span class="string">&quot;zhou&quot;</span>,</span><br><span class="line">                myhtml: <span class="string">&quot;&lt;b&gt;123456&lt;/b&gt;&quot;</span></span><br><span class="line">            &#125;   <span class="comment">// 状态</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h2><pre><code>带有v-前缀的特殊属性
    v-bind v-model
    v-if v-show v-else
    v-on:click
    v-for v-if
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;!-- vue指令 --&gt;</span><br><span class="line">        &lt;div v-show=<span class="string">&quot;isShow&quot;</span>&gt;动态显示和隐藏&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div v-<span class="keyword">if</span>=<span class="string">&quot;isCreated&quot;</span>&gt;动态创建和删除&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 任何属性都可以被绑定,绑定的属性的值也可以是一个对象</span></span><br><span class="line">        &lt;a v-bind:href=<span class="string">&quot;url&quot;</span>&gt;绑定数据和元素属性&lt;/a&gt; </span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>, <span class="comment">// vue 渲染开始的地方</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                myname: <span class="string">&quot;zhou&quot;</span>,</span><br><span class="line">                isShow: <span class="literal">true</span>,</span><br><span class="line">                isCreated: <span class="literal">true</span>,</span><br><span class="line">                myhtml: <span class="string">&quot;&lt;a&gt;&lt;/a&gt;&quot;</span>,</span><br><span class="line">                url:<span class="string">&quot;https://www.baidu.com&quot;</span></span><br><span class="line">            &#125;   <span class="comment">// 状态</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="缩写"><a href="#缩写" class="headerlink" title="缩写"></a>缩写</h2><h1 id="样式绑定"><a href="#样式绑定" class="headerlink" title="样式绑定"></a>样式绑定</h1><h2 id="class绑定"><a href="#class绑定" class="headerlink" title="class绑定"></a>class绑定</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;div style=<span class="string">&quot;background: yellow;&quot;</span>&gt;<span class="number">111111</span>&lt;/div&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;handleClick()&quot;</span>&gt;click&lt;/button&gt;</span><br><span class="line">        &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;isActive?&#x27;red&#x27;:&#x27;yellow&#x27;&quot;</span>&gt;动态绑定<span class="class"><span class="keyword">class</span>-三目写法&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">        &lt;div :class=&quot;classobj&quot;&gt;动态绑定class-对象写法&lt;/div&gt;</span><br><span class="line">        &lt;div :<span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;classarr&quot;</span>&gt;动态绑定<span class="class"><span class="keyword">class</span>-数组写法&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">    &lt;<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">var</span> <span class="title">vm</span> </span>= <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                isActive: <span class="literal">true</span>,</span><br><span class="line">                classobj: &#123;</span><br><span class="line">                    <span class="comment">// 增加类名a和b</span></span><br><span class="line">                    a: <span class="literal">true</span>,</span><br><span class="line">                    b: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                classarr: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.isActive = !<span class="built_in">this</span>.isActive</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="style绑定"><a href="#style绑定" class="headerlink" title="style绑定"></a>style绑定</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;handleClick()&quot;</span>&gt;click&lt;/button&gt;</span><br><span class="line">        &lt;div :style=<span class="string">&quot;&#x27;background:&#x27; + (isActive?&#x27;red&#x27;:&#x27;yellow&#x27;)&quot;</span>&gt;动态绑定style-三目写法&lt;/div&gt;</span><br><span class="line">        &lt;div :style=<span class="string">&quot;styleobj&quot;</span>&gt;动态绑定style-对象写法&lt;/div&gt;</span><br><span class="line">        &lt;div :style=<span class="string">&quot;stylearr&quot;</span>&gt;动态绑定style-数组写法&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                isActive: <span class="literal">true</span>,</span><br><span class="line">                styleobj: &#123;</span><br><span class="line">                    backgroundColor: <span class="string">&quot;red&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                stylearr: []</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.isActive = !<span class="built_in">this</span>.isActive</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h1><pre><code>v-if
v-else v-else-if
template v-if 包装元素template不会被创建
v-show
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;handleClick()&quot;</span>&gt;click&lt;/button&gt;</span><br><span class="line">        &lt;div v-<span class="keyword">if</span>=<span class="string">&quot;isCreated&quot;</span>&gt;动态创建和删除v-<span class="keyword">if</span>&lt;/div&gt;</span><br><span class="line">        &lt;div v-<span class="keyword">else</span>&gt;动态创建和删除v-<span class="keyword">else</span>&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul v-<span class="keyword">if</span>=<span class="string">&quot;datalist.length&quot;</span>&gt;</span><br><span class="line">            &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;data in datalist&quot;</span>&gt;</span><br><span class="line">                &#123;&#123;data&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div v-<span class="keyword">else</span>&gt;</span><br><span class="line">            购物车为空</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div v-<span class="keyword">if</span>=<span class="string">&quot;which===1&quot;</span>&gt;<span class="number">111</span>&lt;/div&gt;</span><br><span class="line">        &lt;div v-<span class="keyword">else</span>-<span class="keyword">if</span>=<span class="string">&quot;which===2&quot;</span>&gt;<span class="number">222</span>&lt;/div&gt;</span><br><span class="line">        &lt;div v-<span class="keyword">else</span>&gt;<span class="number">333</span>&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                isCreated: <span class="literal">false</span>,</span><br><span class="line">                datalist: [],</span><br><span class="line">                which: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.isCreated = !<span class="built_in">this</span>.isCreated</span><br><span class="line">                    <span class="built_in">this</span>.datalist = [<span class="string">&quot;苹果&quot;</span>, <span class="string">&quot;西瓜&quot;</span>, <span class="string">&quot;香蕉&quot;</span>]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h1><pre><code>v-for(特殊 v-for=&quot;n in 10&quot;)

key
    跟踪每个节点的身份,从而重用和重新排序现有元素
    理想的key值是每项都有的且唯一的id   data.id

数组更新检测
    1.使用以下方法操作数组,检测变动
        push() pop() shift() unshift() splice() reverse() sort()

        filter() concat() 和 slice() map() 新数组替换旧数组

    2.不能检测以下变动的数组(通过索引值修改)
        vm.items[indexOfltem] = newValue
        解决：
            1.Vue.set(example1.items,indexOfltem,newValue)
            2.splice

应用：显示过滤结果
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(data,index) in datalist&quot;</span>&gt;</span><br><span class="line">                &#123;&#123;data&#125;&#125;--&#123;&#123;index&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;(data,key) of obj&quot;</span>&gt;</span><br><span class="line">                &#123;&#123;data&#125;&#125;--&#123;&#123;key&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                datalist: [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;广州&quot;</span>, <span class="string">&quot;深圳&quot;</span>],</span><br><span class="line">                obj: &#123;</span><br><span class="line">                    name: <span class="string">&quot;zhou&quot;</span>,</span><br><span class="line">                    age: <span class="number">100</span>,</span><br><span class="line">                    location: <span class="string">&quot;dalian&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> @input=<span class="string">&quot;handleInput()&quot;</span> v-model=<span class="string">&quot;mytext&quot;</span>&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;data in datalist&quot;</span>&gt;</span><br><span class="line">                &#123;&#123;data&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                mytext: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                datalist: [<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;add&quot;</span>],</span><br><span class="line">                list: [<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;add&quot;</span>],</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">handleInput</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.mytext)</span><br><span class="line">                    <span class="comment">// console.log(&quot;只要value改变，就会触发&quot;);</span></span><br><span class="line">                    <span class="comment">// 利用输入的字符,过滤出包含字段的元素</span></span><br><span class="line">                    <span class="keyword">var</span> newlist = <span class="built_in">this</span>.list.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.indexOf(<span class="built_in">this</span>.mytext) &gt; -<span class="number">1</span>)</span><br><span class="line">                    <span class="comment">// console.log(newlist)</span></span><br><span class="line">                    <span class="built_in">this</span>.datalist = newlist;</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><pre><code>1.监听事件-直接触发代码
2.方法事件处理器-写函数名 hadleClick
3.内联处理器方法-执行函数表达式 handleClick($event) $event事件对象
4.事件修饰符    https://cn.vuejs.org/v2/guide/events.html
5.按键修饰符
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;handleClick&quot;</span>&gt;click1&lt;/button&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;handleClick($event)&quot;</span>&gt;click2&lt;/button&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;isShow=!isShow&quot;</span>&gt;click3&lt;/button&gt;</span><br><span class="line">        &lt;div v-show=<span class="string">&quot;isShow&quot;</span>&gt;<span class="number">666666</span>&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- self修饰符跳过冒泡事件和捕获事件，只有直接作用在该元素上的事件才可以执行。 --&gt;</span><br><span class="line">        &lt;ul @click.self=<span class="string">&quot;handleUiClick()&quot;</span>&gt;</span><br><span class="line">            &lt;!-- vue提供的阻止事件冒泡修饰符stop --&gt;</span><br><span class="line">            &lt;li @click.stop=<span class="string">&quot;handleLiClick($event)&quot;</span>&gt;<span class="number">111</span>&lt;/li&gt;</span><br><span class="line">            &lt;li @click=<span class="string">&quot;handleLiClick()&quot;</span>&gt;<span class="number">222</span>&lt;/li&gt;</span><br><span class="line">            &lt;!-- once修饰符执行后解绑事件,只执行一次 --&gt;</span><br><span class="line">            &lt;li @click.once=<span class="string">&quot;handleLiClick()&quot;</span>&gt;<span class="number">333</span>&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- vue提供的阻止事件行为修饰符prevent --&gt;</span><br><span class="line">        &lt;a href=<span class="string">&quot;http://www.baidu.com&quot;</span> @click.prevent=<span class="string">&quot;handleChangePage($event)&quot;</span>&gt;阻止事件行为&lt;/a&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;!-- 只有按下回车键触发,enter或键值<span class="number">13</span> --&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> @keyup.enter=<span class="string">&quot;handleKeyup($event)&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                isShow: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">handleClick</span>(<span class="params">ev</span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(ev.target); <span class="comment">// ev是事件对象</span></span><br><span class="line">                    <span class="built_in">this</span>.isShow = !<span class="built_in">this</span>.isShow</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="title">handleLiClick</span>(<span class="params">ev</span>)</span> &#123;</span><br><span class="line">                    <span class="comment">// ev.stopPropagation();    js阻止事件冒泡</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;li click&quot;</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="title">handleUiClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;ul click&quot;</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="title">handleChangePage</span>(<span class="params">ev</span>)</span> &#123;</span><br><span class="line">                    <span class="comment">// ev.preventDefault();     js阻止事件行为</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;handleChangePage&quot;</span>)</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="function"><span class="title">handleKeyup</span>(<span class="params">ev</span>)</span> &#123;</span><br><span class="line">                    <span class="comment">// console.log(ev)</span></span><br><span class="line">                    <span class="comment">/* if (ev.keyCode === 13) &#123;</span></span><br><span class="line"><span class="comment">                        console.log(&quot;执行todolist 添加动作&quot;)</span></span><br><span class="line"><span class="comment">                    &#125; */</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;执行todolist 添加动作&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    &lt;!-- lazy修饰符 失去焦点 或者 按下回车键时才更新 --&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> v-model.lazy=<span class="string">&quot;mytext&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;mytext&#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 将输入的内容转化为<span class="built_in">Number</span>类型 --&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;number&quot;</span> v-model.number=<span class="string">&quot;mynumber&quot;</span>&gt;</span><br><span class="line">    &#123;&#123;mynumber&#125;&#125;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 自动过滤掉用户输入值首尾空格 --&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> v-model.trim=<span class="string">&quot;myusername&quot;</span>&gt;</span><br><span class="line">    |&#123;&#123;myusername&#125;&#125;|</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">            mytext: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            mynumber: <span class="number">0</span>,</span><br><span class="line">            myusername: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<h1 id="表单控件绑定-双向数据绑定"><a href="#表单控件绑定-双向数据绑定" class="headerlink" title="表单控件绑定/双向数据绑定"></a>表单控件绑定/双向数据绑定</h1><pre><code>v-model
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;mytext&quot;</span> /&gt;</span><br><span class="line">        &#123;&#123;mytext&#125;&#125;</span><br><span class="line"></span><br><span class="line">        &lt;textarea v-model=<span class="string">&quot;mytext&quot;</span>&gt;&lt;/textarea&gt;</span><br><span class="line">        &lt;br /&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;checkbox&quot;</span> v-model=<span class="string">&quot;isChecked&quot;</span> /&gt;记录用户名</span><br><span class="line"></span><br><span class="line">        &lt;br /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;p&gt;你喜欢的冬奥会运动?</span><br><span class="line">            &lt;input type=<span class="string">&quot;checkbox&quot;</span> v-model=<span class="string">&quot;checkgroup&quot;</span> value=<span class="string">&quot;短道速滑&quot;</span> /&gt;短道速滑</span><br><span class="line">            &lt;input type=<span class="string">&quot;checkbox&quot;</span> v-model=<span class="string">&quot;checkgroup&quot;</span> value=<span class="string">&quot;速度滑冰&quot;</span> /&gt;速度滑冰</span><br><span class="line">            &lt;input type=<span class="string">&quot;checkbox&quot;</span> v-model=<span class="string">&quot;checkgroup&quot;</span> value=<span class="string">&quot;花样滑冰&quot;</span> /&gt;花样滑冰</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &#123;&#123;checkgroup&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;p&gt;你喜欢的奥运会运动?</span><br><span class="line">            &lt;input type=<span class="string">&quot;radio&quot;</span> v-model=<span class="string">&quot;picked&quot;</span> value=<span class="string">&quot;跑步&quot;</span> /&gt;跑步</span><br><span class="line">            &lt;input type=<span class="string">&quot;radio&quot;</span> v-model=<span class="string">&quot;picked&quot;</span> value=<span class="string">&quot;篮球&quot;</span> /&gt;篮球</span><br><span class="line">            &lt;input type=<span class="string">&quot;radio&quot;</span> v-model=<span class="string">&quot;picked&quot;</span> value=<span class="string">&quot;乒乓&quot;</span> /&gt;乒乓</span><br><span class="line">        &lt;/p&gt;</span><br><span class="line">        &#123;&#123;picked&#125;&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                mytext: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                isChecked: <span class="literal">true</span>,</span><br><span class="line">                checkgroup: [],</span><br><span class="line">                picked: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="axios与fetch实现数据请求"><a href="#axios与fetch实现数据请求" class="headerlink" title="axios与fetch实现数据请求"></a>axios与fetch实现数据请求</h1><pre><code>[axios](https://github.com/axios/axios)
    返回的数据会被包装
    data:真实后端数据

Fetch请求默认不带cookie,需要设置fetch(url,&#123;credrntials:&quot;include&quot;&#125;)
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;handleClick()&quot;</span>&gt;获取数据&lt;/button&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;data in datalist&quot;</span>&gt;</span><br><span class="line">                &lt;h1&gt;城市名：&#123;&#123;data.properties.name&#125;&#125;&lt;/h1&gt;</span><br><span class="line">                &lt;h2&gt;城市编码:&#123;&#123;data.properties.adcode&#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                datalist: []</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    fetch(<span class="string">&quot;https://geo.datav.aliyun.com/areas_v3/bound/440000_full.json&quot;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> res.json()).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; res.features.length; i++) &#123;</span><br><span class="line">                            <span class="built_in">console</span>.log(res.features[i].properties.name)</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="built_in">this</span>.datalist = res.features</span><br><span class="line"></span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h1><pre><code>计算缓存
    计算属性基于它们的依赖进行缓存
    计算属性只有在它的相关依赖发生改变时才会重新求值
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;!-- myname的值从下标<span class="number">0</span>到<span class="number">1</span>改变为大写拼接myname下标<span class="number">1</span>后面的值 --&gt;</span><br><span class="line">        &#123;&#123;myname.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + myname.substring(<span class="number">1</span>)&#125;&#125;</span><br><span class="line"></span><br><span class="line">        &lt;!-- </span><br><span class="line">        普通方法每执行一次都要调用一次,计算属性计算一次后,会把计算结果缓存到内存中</span><br><span class="line">        计算属性只执行一次,方法多次调用多次执行 </span><br><span class="line">        --&gt;</span><br><span class="line">        &lt;p&gt;计算属性：&#123;&#123;getMyName&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p&gt;普通方法：&#123;&#123;getMyNameMethod()&#125;&#125;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;计算属性：&#123;&#123;getMyName&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;普通方法：&#123;&#123;getMyNameMethod()&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                myname: <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">getMyNameMethod</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;getMyNameMethod-方法调用&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.myname.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + <span class="built_in">this</span>.myname.substring(<span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line">                <span class="function"><span class="title">getMyName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;getMyName-计算属性调用&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.myname.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + <span class="built_in">this</span>.myname.substring(<span class="number">1</span>)</span><br><span class="line">                &#125; <span class="comment">// 依赖的状态改变了,计算属性会重新计算一遍</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;mytext&quot;</span>&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">            &lt;li v-<span class="keyword">for</span>=<span class="string">&quot;data in getMyDatalist&quot;</span>&gt;</span><br><span class="line">                &#123;&#123;data&#125;&#125;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                mytext: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                datalist: [<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>, <span class="string">&quot;ddd&quot;</span>, <span class="string">&quot;add&quot;</span>]</span><br><span class="line">            &#125;,</span><br><span class="line">            computed: &#123;</span><br><span class="line">                <span class="function"><span class="title">getMyDatalist</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.datalist.filter(<span class="function"><span class="params">item</span> =&gt;</span> item.indexOf(<span class="built_in">this</span>.mytext) &gt; -<span class="number">1</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h1><pre><code>混入(Mixins)是一种分发Vue组件中可复用功能的非常灵活的方式
混入对象可以包含任意组件选项
当组件使用混入对象时,所有混入对象的选项将被混入该组件本身的选项
</code></pre>
<h1 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h1><pre><code>概念：扩展HTML元素,封装可重用的代码

组件注册方式：
    1.全局组件 Vue.component
    2.局部组件

组件编写方式：
    1.自定义组件需要有一个root element
    2.父子组件的data无法共享
    3.组件可以有data,methods,computed... 但是data必须是一个函数
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;navbar&gt;&lt;/navbar&gt;</span><br><span class="line">        &lt;sidebar&gt;&lt;/sidebar&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 全局定义组件(作用域隔离)</span></span><br><span class="line">        Vue.component(<span class="string">&#x27;navbar&#x27;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div style=&quot;background:blue&quot;&gt;</span></span><br><span class="line"><span class="string">                &lt;button @click=&quot;handleback()&quot;&gt;返回&lt;/button&gt;</span></span><br><span class="line"><span class="string">                navbar</span></span><br><span class="line"><span class="string">                &lt;button&gt;主页&lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;child&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">                &lt;navbarchild&gt;&lt;/navbarchild&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">handleback</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;back&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 局部定义组件</span></span><br><span class="line">            components: &#123;</span><br><span class="line">                navbarchild: &#123;</span><br><span class="line">                    template: <span class="string">`&lt;div&gt;navbarchild只能在navbar组件中使用&lt;/div&gt;`</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">            template: <span class="string">`&lt;div&gt;child组件全局定义&lt;/div&gt;`</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Vue.component(<span class="string">&#x27;sidebar&#x27;</span>, &#123;</span><br><span class="line">            template: <span class="string">`&lt;div style=&quot;background:pink&quot;&gt;</span></span><br><span class="line"><span class="string">                    sider组件</span></span><br><span class="line"><span class="string">                    &lt;child&gt;&lt;/child&gt;</span></span><br><span class="line"><span class="string">                    &lt;navbarchild&gt;&lt;/navbarchild&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;`</span></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span></span><br><span class="line">        &#125;) <span class="comment">// root component</span></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="组件通信"><a href="#组件通信" class="headerlink" title="组件通信"></a>组件通信</h2><pre><code>1.父子组件传值(props down,events up)
2.属性验证,Number,String,Boolean,Array,Object,Function,null(不限制类型)
    props:&#123;
        name:Number
    &#125;

事件机制：
    1.使用$on(eventName)监听事件
    2.使用$emit(eventName)触发事件
</code></pre>
<h2 id="Vue父传子"><a href="#Vue父传子" class="headerlink" title="Vue父传子"></a>Vue父传子</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;navbar myname=<span class="string">&quot;home&quot;</span> :myshow=<span class="string">&quot;false&quot;</span>&gt;&lt;/navbar&gt;</span><br><span class="line">        &lt;navbar myname=<span class="string">&quot;list&quot;</span> :myshow=<span class="string">&quot;true&quot;</span>&gt;&lt;/navbar&gt;</span><br><span class="line">        &lt;navbar :myname=<span class="string">&quot;parentname&quot;</span> :myshow=<span class="string">&quot;true&quot;</span>&gt;&lt;/navbar&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// Vue父传子</span></span><br><span class="line">        Vue.component(<span class="string">&#x27;navbar&#x27;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                &lt;button&gt;返回&lt;/button&gt;</span></span><br><span class="line"><span class="string">                navbar -- &#123;&#123;myname&#125;&#125;</span></span><br><span class="line"><span class="string">                &lt;button v-show=&quot;myshow&quot;&gt;主页&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            <span class="comment">// props: [&#x27;myname&#x27;, &#x27;myshow&#x27;] // 接收父组件传来的属性</span></span><br><span class="line">            props: &#123;</span><br><span class="line">                myname: <span class="built_in">String</span>,</span><br><span class="line">                myshow: <span class="built_in">Boolean</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                parentname: <span class="string">&quot;父组件的状态&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Vue子传父"><a href="#Vue子传父" class="headerlink" title="Vue子传父"></a>Vue子传父</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        父组件</span><br><span class="line">        &lt;child @myevent=<span class="string">&quot;handleEvent($event)&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 父传子靠属性,子传父靠事件</span></span><br><span class="line">        <span class="comment">// Vue子传父</span></span><br><span class="line">        Vue.component(<span class="string">&#x27;child&#x27;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div&gt;</span></span><br><span class="line"><span class="string">                child组件</span></span><br><span class="line"><span class="string">                &lt;button @click=&quot;payMoney()&quot;&gt;click&lt;/button&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    childname: <span class="string">&quot;子组件的状态&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">payMoney</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">this</span>.$emit(<span class="string">&quot;myevent&quot;</span>, <span class="built_in">this</span>.childname) <span class="comment">// 分发事件</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">handleEvent</span>(<span class="params">ev</span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&#x27;父组件收到了&#x27;</span>, ev)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="Ref通信"><a href="#Ref通信" class="headerlink" title="Ref通信"></a>Ref通信</h2><pre><code>ref放在标签上,拿到的是原生节点
ref放在组件上,拿到的是组件对象
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> ref=<span class="string">&quot;mytext&quot;</span>&gt;</span><br><span class="line">        &lt;button @click=<span class="string">&quot;handleAdd&quot;</span>&gt;add&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;child ref=<span class="string">&quot;mychild&quot;</span>&gt;&lt;/child&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 子组件</span></span><br><span class="line">        Vue.component(<span class="string">&quot;child&quot;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div&gt;child&lt;/div&gt;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">            <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    childname: <span class="string">&quot;子组件的状态&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">add</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;子组件的方法&quot;</span>, data)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line"></span><br><span class="line">            &#125;,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">handleAdd</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    <span class="comment">// console.log(this.$refs.mytext.value)</span></span><br><span class="line">                    <span class="comment">// console.log(this.$refs)</span></span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$refs.mychild.childname)</span><br><span class="line">                    <span class="built_in">this</span>.$refs.mychild.add(<span class="string">&quot;666&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="事件总线"><a href="#事件总线" class="headerlink" title="事件总线"></a>事件总线</h2><pre><code>var bus = new Vue();
mounted生命周期中进行监听
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">        &lt;author&gt;&lt;/author&gt;</span><br><span class="line">        &lt;user&gt;&lt;/user&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="comment">// 创建中央事件总线，空Vue实例</span></span><br><span class="line">        <span class="keyword">var</span> bus = <span class="keyword">new</span> Vue();</span><br><span class="line"></span><br><span class="line">        Vue.component(<span class="string">&#x27;author&#x27;</span>, &#123;</span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">                &lt;div&gt;</span></span><br><span class="line"><span class="string">                    我是一个作者</span></span><br><span class="line"><span class="string">                    &lt;input type=&quot;text&quot; ref=&quot;mytext&quot;/&gt;</span></span><br><span class="line"><span class="string">                    &lt;button @click=&quot;handleClick()&quot;&gt;发布&lt;/button&gt;    </span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            methods: &#123;</span><br><span class="line">                <span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                    bus.$emit(<span class="string">&quot;message&quot;</span>, <span class="built_in">this</span>.$refs.mytext.value)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Vue.component(<span class="string">&#x27;user&#x27;</span>, &#123;</span><br><span class="line">            <span class="comment">// 在合适的位置订阅 bus.$on</span></span><br><span class="line">            template: <span class="string">`</span></span><br><span class="line"><span class="string">                &lt;div&gt;</span></span><br><span class="line"><span class="string">                    用户 </span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            `</span>,</span><br><span class="line">            <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                bus.$on(<span class="string">&quot;message&quot;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;收到&quot;</span>, data)</span><br><span class="line">                &#125;)</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;生命周期函数-在当前组件dom渲染完成后就会调用&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h1 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h1><pre><code>&lt;component&gt;元素,动态地绑定多个组件到它的is属性
&lt;keep-alive&gt;保留状态,避免重新渲染
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 切换多个组件的时候保留输入框的内容 --&gt;</span><br><span class="line">        &lt;keep-alive&gt;</span><br><span class="line">            &lt;component :is=<span class="string">&quot;who&quot;</span>&gt;&lt;/component&gt; &lt;!-- 动态绑定多个组件 --&gt;</span><br><span class="line">        &lt;/keep-alive&gt;</span><br><span class="line"></span><br><span class="line">        &lt;footer&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;who=&#x27;home&#x27;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;who=&#x27;list&#x27;&quot;</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">                &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;who=&#x27;shopcar&#x27;&quot;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">        &lt;/footer&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">            el: <span class="string">&quot;#box&quot;</span>,</span><br><span class="line">            data: &#123;</span><br><span class="line">                who: <span class="string">&#x27;home&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            components: &#123;</span><br><span class="line">                <span class="string">&quot;home&quot;</span>: &#123;</span><br><span class="line">                    template: <span class="string">`&lt;div&gt;home&lt;input type=&quot;text&quot;&gt;&lt;/div&gt;`</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;list&quot;</span>: &#123;</span><br><span class="line">                    template: <span class="string">`&lt;div&gt;list&lt;/div&gt;`</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;shopcar&quot;</span>: &#123;</span><br><span class="line">                    template: <span class="string">`&lt;div&gt;shopcar&lt;/div&gt;`</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript BOM与DOM操作</title>
    <url>/2021/06/21/js-bom-dom/</url>
    <content><![CDATA[<h1 id="BOM-浏览器对象模型"><a href="#BOM-浏览器对象模型" class="headerlink" title="BOM 浏览器对象模型"></a>BOM 浏览器对象模型</h1><p><a href="http://c.biancheng.net/js/bom/">浏览器对象模型（Browser Object Model, BOM）</a><br><img src="js_bom.jpg" alt="浏览器对象模型"></p>
<h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><pre><code>所有的属性和对象前面都可以加window
window一般情况下可以省略

alert() 弹出警告框
confirm() 弹出一个带确定和取消的提示框
    返回值：确定返回true 取消返回false
prompt() 弹出一个带输入框的提示框
    参数：第一个为面板上显示的内容。第二个为输入框里面的文字(可以不传入)。
    返回值：点击确定返回输入框的内容,点击取消返回null
open()
    第一个参数：跳转的url,打开一个新窗口,加载url。
    第二个参数：字符串,给打开的窗口起一个名字。
    第三个参数：一串特殊含义的字符串,可以控制打开窗口的属性。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">btnClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    open(<span class="string">&quot;https://www.baidu.com/&quot;</span>, <span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;width=400,height=400,top=200,left=300&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><pre><code>window.history  当前窗口(不是浏览器)历史记录(只要加载url不一样就会产生历史记录)
    属性：history.length    输出当前窗口历史记录的条数
    方法：
        history.back()      返回上一条历史记录
        history.forward()   前进到下一条历史记录
        history.go()        
            参数：  0   刷新当前页面
                正整数  前进n条记录
                负整数  后退n条记录
</code></pre>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;alert(history.length);&quot;</span>&gt;</span>获取历史记录的条数<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;history.back();&quot;</span>&gt;</span>back<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;history.forward();&quot;</span>&gt;</span>forward<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;history.go(2);&quot;</span>&gt;</span>go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><h3 id="location对象的属性"><a href="#location对象的属性" class="headerlink" title="location对象的属性"></a>location对象的属性</h3><pre><code>url : 统一资源定位符。

协议://IP(域名/主机名)/:端口号/路径/?查询字符串#锚点
protocol://hostname:port/pathame/?search#hash

location.protocol
    file : 本地磁盘文件访问
    http : 
    https : 证书认证协议

location.hostname
    主机名：IP(在全球范围内找到当前网络的地址)  域名(IP的别称)

location.port
    端口号(默认隐藏)
    是当前电脑中使用网络的软件,随机分配的一个编号 0~65535

hostname:port
    可以直接定位到当前使用网络的程序。
    浏览器 8080     http 80     https 443

location.pathame    路径

location.search     查询字符串(前后端交互) 

location.hash       锚点

alert(location);    // location对象
alert(location.href);   // 输出地址
</code></pre>
<h3 id="location对象的方法"><a href="#location对象的方法" class="headerlink" title="location对象的方法"></a>location对象的方法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="built_in">window</span>.location === <span class="built_in">window</span>.document.location); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<pre><code>location.assign(url)    在当前窗口跳转带这个url
location.replace(url)   在当前窗口替换成新的url,不会产生历史记录
location.reload()       刷新当前窗口,加true(不经过浏览器缓存强制从服务器重载)
</code></pre>
<h2 id="存储对象"><a href="#存储对象" class="headerlink" title="存储对象"></a>存储对象</h2><pre><code>在HTML5中,新加入了一个localStorage特性,用来作为本地存储,解决了cookie存储空间不足的问题。

本地存储技术：
    localStorage(IE8以下不兼容)
        1.永久存储
        2.最大可以存储5M
        3.只能存储字符串,本质上是对字符串的读取,如果存储内容多会消耗内存空间,导致页面变卡。
        4.在浏览器的隐私模式下不可读取。
        5.不能被爬虫抓取到。

    cookie
        1.可以设置过期时间
        2.最大可以存4kb
        3.每一个域名下最多可以存储50条数据,不同的浏览器有偏差。
        4.只能存储字符串,一般存储一些重要的信息,如登录,购物车信息,是否点赞,视频播放进度等。

    sessionStorage(结合后台使用)
</code></pre>
<h3 id="localStorage对象"><a href="#localStorage对象" class="headerlink" title="localStorage对象"></a>localStorage对象</h3><pre><code>setItem(name, value);   保存数据语法
getItem(name);          读取数据语法
removeItem(name);       删除数据语法
返回值：一个存储对象。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">window</span>.localStorage) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;当前页面不支持localStorage&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">localStorage</span>.setItem(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;1&quot;</span>);</span><br><span class="line">    <span class="built_in">localStorage</span>.b = <span class="string">&quot;2&quot;</span>;</span><br><span class="line">    <span class="built_in">localStorage</span>[<span class="string">&quot;c&quot;</span>] = <span class="string">&quot;3&quot;</span>;</span><br><span class="line">    <span class="comment">// 本地存储：file:// b = 2 a = 1 c = 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="comment">// 注：火狐支持本地加载的文件缓存cookie, 谷歌只支持服务器加载文件缓存cookie</span></span><br><span class="line">    <span class="comment">// cookie语法：</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置cookie</span></span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">&quot;username=xxx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取cookie</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">document</span>.cookie);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// encodeURIComponent 将中文编译成对应的字符</span></span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">&quot;username=&quot;</span> + <span class="built_in">encodeURIComponent</span>(<span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// decodeURIComponent 将对应的字符编译成中文</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expires 过期时间,系统会自动消除过期的获取cookie,必须填写日期对象。</span></span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">&quot;username=xxx;expires=&quot;</span> + afterOfDate(<span class="number">6</span>);</span><br><span class="line">    <span class="comment">// 获取n天后的日期</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">afterOfDate</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">const</span> day = d.getDate();</span><br><span class="line">        d.setDate(n + day);</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除cookie操作</span></span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn&quot;</span>);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.cookie = <span class="string">&quot;username=;expires=&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// path 限制访问路径,不设置,默认加载当前.html文件的路径</span></span><br><span class="line">    <span class="comment">// 设置的cookie路径,和当前加载文件的路径,不一致,cookie访问失败</span></span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">&quot;username=xxx;path=&quot;</span> + <span class="string">&quot;code/cookie&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// domain 限制访问域名,不设置,默认加载当前.html文件的服务器域名/ip</span></span><br><span class="line">    <span class="comment">// 如果加载当前文件域名和设置的域名不一致,设置cookie失败</span></span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">&quot;username=xxx;domain=&quot;</span> + <span class="string">&quot;localhosx&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// secure 不设置,再设置cookie,可以通过http协议和https协议加载文件设置</span></span><br><span class="line">    <span class="comment">// 设置这个字段后,只能设置https协议加载cookie</span></span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="string">&quot;username=xxx;secure&quot;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn&quot;</span>&gt;删除cookie操作&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h4 id="封装cookie"><a href="#封装cookie" class="headerlink" title="封装cookie"></a>封装cookie</h4><pre><code>setCookie() 设置cookie
getCookie() 获取cookie
removeCookie() 删除cookie
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setCookie() 设置cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, &#123; expires, path, domain, secure &#125;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> cookieStr = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">&quot;=&quot;</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">    <span class="keyword">if</span> (expires) &#123;</span><br><span class="line">        cookieStr += <span class="string">&quot;;expires=&quot;</span> + afterOfDate(expires);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (path) &#123;</span><br><span class="line">        cookieStr += <span class="string">&quot;;path=&quot;</span> + path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (domain) &#123;</span><br><span class="line">        cookieStr += <span class="string">&quot;;domain=&quot;</span> + domain;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (secure) &#123;</span><br><span class="line">        cookieStr += <span class="string">&quot;;secure&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.cookie = cookieStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取n天后的日期</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">afterOfDate</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">const</span> day = d.getDate();</span><br><span class="line">    d.setDate(n + day);</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line">setCookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;哪吒&quot;</span>, &#123;</span><br><span class="line">    expires: <span class="number">7</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// console.log(decodeURIComponent(document.cookie));</span></span><br><span class="line"><span class="built_in">console</span>.log(getCookie(<span class="string">&quot;哪吒&quot;</span>)); <span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// getCookie() 获取cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieStr = <span class="built_in">decodeURIComponent</span>(<span class="built_in">document</span>.cookie);</span><br><span class="line">    <span class="keyword">var</span> start = cookieStr.indexOf(name + <span class="string">&quot;=&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (start == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 查询从start位置开始遇到的第一个分号</span></span><br><span class="line">        <span class="keyword">var</span> end = cookieStr.indexOf(<span class="string">&quot;;&quot;</span>, start);</span><br><span class="line">        <span class="keyword">if</span> (end == -<span class="number">1</span>) &#123;</span><br><span class="line">            end = cookieStr.length;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进行字符串提取</span></span><br><span class="line">        <span class="keyword">var</span> str = cookieStr.substring(start, end);</span><br><span class="line">        <span class="keyword">var</span> arr = str.split(<span class="string">&quot;=&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> arr[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// removeCookie() 删除cookie</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.cookie = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">&quot;=;expirex=&quot;</span> + <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 合三为一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$cookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 判断传入参数的个数</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> getCookie(name);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">arguments</span>[<span class="number">1</span>] == <span class="literal">null</span>) &#123;</span><br><span class="line">                removeCookie(name);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                setCookie(name, <span class="built_in">arguments</span>[<span class="number">1</span>], &#123;&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            setCookie(name, <span class="built_in">arguments</span>[<span class="number">1</span>], <span class="built_in">arguments</span>[<span class="number">2</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$cookie(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line">$cookie(<span class="string">&quot;神话&quot;</span>, <span class="string">&quot;哪吒&quot;</span>, &#123;</span><br><span class="line">    expires: <span class="number">6</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log($cookie(<span class="string">&quot;神话&quot;</span>)); <span class="comment">// null</span></span><br></pre></td></tr></table></figure>
<h1 id="DOM-文档对象模型"><a href="#DOM-文档对象模型" class="headerlink" title="DOM 文档对象模型"></a>DOM 文档对象模型</h1><p>文档对象模型（Document Object Model, DOM）</p>
<h2 id="节点获取"><a href="#节点获取" class="headerlink" title="节点获取"></a>节点获取</h2><pre><code>节点类型：
    元素节点    &lt;div&gt;&lt;/div&gt;
    属性节点    id = &quot;div1&quot;
    文本节点    div文本
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 写在这里的代码,是整个页面加载完成以后执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取行间属性的值</span></span><br><span class="line">oDiv.id</span><br><span class="line">oDiv.title</span><br><span class="line">oDiv.className <span class="comment">// 访问class要通过className访问</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置行间属性的值</span></span><br><span class="line">oDiv.id = <span class="string">&quot;div2&quot;</span>;</span><br><span class="line">oDiv.title = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">oDiv.className = <span class="string">&quot;box4&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取行间标签的CSS样式</span></span><br><span class="line">oDiv.style.width</span><br><span class="line">oDiv.style.height</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改CSS样式 如果CSS样式带-,将-去掉,从第二个单词开始首字母大写</span></span><br><span class="line">oDiv.style.backgroundColor = <span class="string">&quot;blue&quot;</span>;</span><br></pre></td></tr></table></figure>
<h2 id="元素节点"><a href="#元素节点" class="headerlink" title="元素节点"></a>元素节点</h2><pre><code>document.getElementById(id);    
    功能：通过ID获取符号条件的元素(id必须是唯一的)
    返回值：符号条件的一个节点

node.getElementsByTagName(标签名);
    功能：从node节点开始,通过标签名获取符号条件的元素节点。
    返回值：伪数组/类数组

node.getElementsByClassName(class名字);
    功能：通过class名字获取符号条件的元素节点。IE8以下不兼容

document.getElementsByName(name属性的值);
    功能：通过name属性的值获取符合条件的元素节点。一般使用在表单元素里。

document.querySelector();
    参数：字符串 CSS选择器格式字符串
    返回值：一个元素节点,找到符合条件的第一个元素节点。

document.querySelectorAll();
    参数：字符串 CSS选择器格式字符串
    返回值：一个伪数组。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> aLis = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        alert(aLis); <span class="comment">// [object HTMLCollection] 伪数组</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取ol下的li节点</span></span><br><span class="line">        <span class="keyword">var</span> oOl = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ol1&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> aLis = oOl.getElementsByTagName(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        alert(aLis.length); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aLis.length; i++) &#123;</span><br><span class="line">            aLis[i].style.backgroundColor = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ul1&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> nodes = oUl.getElementsByClassName(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">        alert(nodes.length);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// var node = document.querySelector(&quot;#ol1&quot;);</span></span><br><span class="line">        <span class="comment">// var node = document.querySelector(&quot;ol .box&quot;);</span></span><br><span class="line">        <span class="keyword">var</span> node = <span class="built_in">document</span>.querySelector(<span class="string">&quot;[name=hello]&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> node1 = <span class="built_in">document</span>.querySelectorAll(<span class="string">&quot;ul [name=hello]&quot;</span>);</span><br><span class="line">        alert(node1.length); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li id=<span class="string">&quot;ul1&quot;</span>&gt;<span class="number">111</span>&lt;/li&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;<span class="number">111</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">111</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">111</span>&lt;/li&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;<span class="number">111</span>&lt;/li&gt;</span><br><span class="line">        &lt;li name=<span class="string">&quot;hello&quot;</span>&gt;<span class="number">111</span>&lt;/li&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span> name=<span class="string">&quot;hello&quot;</span>&gt;div&lt;/div&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;hello&quot;</span>&gt;</span><br><span class="line">    &lt;span name=<span class="string">&quot;hello&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">    &lt;ol id=<span class="string">&quot;ol1&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">222</span>&lt;/li&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;<span class="number">222</span>&lt;/li&gt;</span><br><span class="line">        &lt;li <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;<span class="number">222</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">222</span>&lt;/li&gt;</span><br><span class="line">    &lt;/ol&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装自定义ByClassName方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">elementsByClassName</span>(<span class="params">node, classStr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nodes = node.getElementsByTagName(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nodes[i].className === classStr) &#123;</span><br><span class="line">            arr.push(nodes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oL = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ol1&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> nodes = elementsByClassName(oL, <span class="string">&quot;box&quot;</span>);</span><br><span class="line">    alert(nodes.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; nodes.length; i++) &#123;</span><br><span class="line">        nodes[i].style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="获取样式"><a href="#获取样式" class="headerlink" title="获取样式"></a>获取样式</h2><pre><code>获取当前的有效样式
    oDiv.currentStyle[&quot;height&quot;] // IE兼容
    getComputedStyle(oDiv)[&quot;height&quot;] // 火狐 谷歌
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 跨浏览器的兼容</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">node, cssStyle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> node.currentStyle ? node.currentStyle[cssStyle] : getComputedStyle(node)[cssStyle];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(getStyle(ul1, <span class="string">&quot;height&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置样式 style.xxx方式设置css样式</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">    oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        oDiv.style.backgroundColor = <span class="string">&quot;orange&quot;</span>;</span><br><span class="line">        oDiv.style.height = <span class="string">&quot;500px&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="attribute和元素节点属性"><a href="#attribute和元素节点属性" class="headerlink" title="attribute和元素节点属性"></a>attribute和元素节点属性</h2><pre><code>setAttribute
getAttribute
removeAttribute()
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">        <span class="comment">/* class的访问和支持自定义属性 */</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.className); <span class="comment">// box</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.getAttribute(<span class="string">&quot;class&quot;</span>)); <span class="comment">// box</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.xxx); <span class="comment">// undefined</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.getAttribute(<span class="string">&quot;xxx&quot;</span>)); <span class="comment">// yyy</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        oDiv.className = <span class="string">&quot;box4&quot;</span>;</span><br><span class="line">        oDiv.zzz = <span class="string">&quot;ooo&quot;</span>;</span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.zzz); <span class="comment">// ooo</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 增加zzz=&quot;ooo&quot;的行间属性</span></span><br><span class="line">        oDiv.setAttribute(<span class="string">&quot;class&quot;</span>, <span class="string">&quot;box5&quot;</span>);</span><br><span class="line">        oDiv.setAttribute(<span class="string">&quot;zzz&quot;</span>, <span class="string">&quot;ooo&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除title</span></span><br><span class="line">        oDiv.className = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        oDiv.removeAttribute(<span class="string">&quot;title&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span> title=<span class="string">&quot;hello&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span> xxx=<span class="string">&quot;yyy&quot;</span>&gt;div&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<pre><code>innerHTML   获取标签间的内容,会解析标签
innerText   获取标签间纯文本,不会解析标签,设置纯文本
outerHTML   从外标签开始到外标签结束,会解析标签
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.innerHTML); <span class="comment">// div文本&lt;em&gt;em文本&lt;/em&gt;&lt;strong&gt;strong文本&lt;/strong&gt;</span></span><br><span class="line">        oDiv.innerHTML = <span class="string">&quot;&lt;h1&gt;hello world&lt;/h1&gt;&quot;</span>; <span class="comment">// 替换div标签间的内容</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.innerText); <span class="comment">// hello world</span></span><br><span class="line">        oDiv.innerText = <span class="string">&quot;&lt;h1&gt;hello!!!&lt;/h1&gt;&quot;</span>; <span class="comment">// &lt;h1&gt;hello!!!&lt;/h1&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.outerHTML); <span class="comment">// &lt;div id=&quot;div1&quot;&gt;&amp;lt;h1&amp;gt;hello!!!&amp;lt;/h1&amp;gt;&lt;/div&gt;</span></span><br><span class="line">        oDiv.outerHTML = <span class="string">&quot;&lt;h1&gt;hello!!!&lt;/h1&gt;&quot;</span>; <span class="comment">// hello!!!</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span>&gt;div文本&lt;em&gt;em文本&lt;<span class="regexp">/em&gt;&lt;strong&gt;strong文本&lt;/</span>strong&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="获取子节点"><a href="#获取子节点" class="headerlink" title="获取子节点"></a>获取子节点</h2><pre><code>childNodes          访问当前节点下所有的子节点
firstChild          访问子节点中的首位
lastChild           访问子节点中的最后一位
nextSibling         访问当前节点兄弟节点中的下一个节点
previousSibling     访问当前节点兄弟节点中的上一个节点
以上属性都只包含文本节点

以下为只获取子节点中的元素节点(IE8以下不兼容)
children
firstElementChild
lastElementChild
nextElementSibling
previousElementSibling

            nodeType    nodeName    nodeValue
元素节点        1          标签名       null
属性节点        2          属性名       属性值
文本节点        3          #text        文本内容
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.childNodes.length); <span class="comment">// 5   空格 回车 换行是字符</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 纯空白的文本节点剔除</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.children.length); <span class="comment">// 2</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.firstElementChild.nodeName); <span class="comment">// EM</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.firstElementChild.nextSibling.nodeValue); <span class="comment">// div文本</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">        &lt;em&gt;em文本&lt;/em&gt;</span><br><span class="line">        div文本</span><br><span class="line">        &lt;strong&gt;strong文本&lt;/strong&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="属性节点"><a href="#属性节点" class="headerlink" title="属性节点"></a>属性节点</h2><pre><code>attributes  获取当前元素节点上所有的属性节点
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.attributes); <span class="comment">// 集合</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取其中某一个属性节点</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.attributes.getNamedItem(<span class="string">&quot;title&quot;</span>).nodeName); <span class="comment">// title</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.attributes.getNamedItem(<span class="string">&quot;title&quot;</span>).nodeType); <span class="comment">// 2</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.attributes.getNamedItem(<span class="string">&quot;title&quot;</span>).nodeValue); <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简写</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.attributes[<span class="string">&quot;title&quot;</span>].nodeName); <span class="comment">// title</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.attributes[<span class="string">&quot;title&quot;</span>].nodeType); <span class="comment">// 2</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.attributes[<span class="string">&quot;title&quot;</span>].nodeValue); <span class="comment">// hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span> title=<span class="string">&quot;hello&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;box&quot;</span>&gt;div文本&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="节点操作"><a href="#节点操作" class="headerlink" title="节点操作"></a>节点操作</h2><pre><code>createElement()
    格式：document.createElement()
    功能：创建一个元素节点
    参数：标签名
    返回值：创建好的这个节点
appendChild()
    格式：node1.parentNode.appendChild(node2);
    功能：将node2节点插入到node1节点子节点的末尾
createTextNode()
    格式：document.createTextNode(文本);
    功能：创建文本节点(纯文本)
insertBefore()
    格式：box1.parentNode.insertBefore(box2, box1);
    功能：将box2添加到box1的前面
replaceChild()
    格式：box1.parentNode.replaceChild(box2, box1);
    功能：用box2节点将box1节点替换掉
cloneNode()
    格式：node.cloneNode()
    格式2：node.cloneNode(true);    克隆节点本身和子节点
    功能：复制节点
    返回值：克隆出来的新节点
removeChild()
    格式：box.parentNode.removeChild(box);
    功能：删除节点
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// var oP = document.createElement(&quot;p&quot;);</span></span><br><span class="line">            <span class="comment">// var oTxt = document.createTextNode(&quot;&lt;h1&gt;hello world&lt;/h1&gt;&quot;);</span></span><br><span class="line">            <span class="comment">// oP.appendChild(oTxt);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将oP节点插入到oDiv节点的前面</span></span><br><span class="line">            <span class="comment">// document.body.insertBefore(oP, oDiv);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 用oP节点替换掉oDiv节点</span></span><br><span class="line">            <span class="comment">// document.body.replaceChild(oP, oDiv);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// var newNode = oDiv.cloneNode(true);</span></span><br><span class="line">            <span class="comment">// document.body.appendChild(newNode);</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">document</span>.body.removeChild(oDiv);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">        &lt;em&gt;em&lt;/em&gt;</span><br><span class="line">        div文本</span><br><span class="line">        &lt;strong&gt;strong&lt;/strong&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;节点操作&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><pre><code>this概念：只要封装函数,任何一个函数系统都会内置一个this的变量。
this变量存储的是地址,是当前函数的地址。this永远指向当前函数的主人,函数主人要通过当前上下文去判断。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 点击按钮,输出当前按钮的下标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; oBtn.length; i++) &#123;</span><br><span class="line">            oBtn[i].index = i;</span><br><span class="line">            oBtn[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                alert(<span class="built_in">this</span>.index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        alert(<span class="string">&quot;循环结束了：&quot;</span> + i); <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;按钮<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;按钮<span class="number">2</span>&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;按钮<span class="number">3</span>&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><h4 id="全局函数中"><a href="#全局函数中" class="headerlink" title="全局函数中"></a>全局函数中</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">show(); <span class="comment">// 指向 Window 对象</span></span><br></pre></td></tr></table></figure>
<h4 id="对象方法中"><a href="#对象方法中" class="headerlink" title="对象方法中"></a>对象方法中</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    username: <span class="string">&quot;孙悟空&quot;</span>,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(person.username);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">person.show(); <span class="comment">// 孙悟空 指向person</span></span><br></pre></td></tr></table></figure>
<h4 id="事件中"><a href="#事件中" class="headerlink" title="事件中"></a>事件中</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.innerHTML); <span class="comment">// 按钮 指向获取的按钮oBtn</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="强制改变this指向"><a href="#强制改变this指向" class="headerlink" title="强制改变this指向"></a>强制改变this指向</h3><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><pre><code>格式：函数名.call();
参数：
    第一个参数：传入该函数this指向的对象,传入什么强制指向什么。
    第二个参数：将原函数的参数往后顺延一位。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// String &#123;&quot;call&quot;&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(x + <span class="string">&quot;,&quot;</span> + y); <span class="comment">// 20,40</span></span><br><span class="line">&#125;</span><br><span class="line">show.call(<span class="string">&quot;call&quot;</span>, <span class="number">20</span>, <span class="number">40</span>);</span><br></pre></td></tr></table></figure>
<h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><pre><code>格式：函数名.apply()
参数:
    第一个参数：传入该函数this指向的对象,传入什么强制指向什么。
    第二个参数：数组    数组,放入原有所有的参数
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// String &#123;&quot;apply&quot;&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(x + <span class="string">&quot;,&quot;</span> + y); <span class="comment">// 20,40</span></span><br><span class="line">&#125;</span><br><span class="line">show.apply(<span class="string">&quot;apply&quot;</span>, [<span class="number">20</span>, <span class="number">40</span>]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, arr));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr));</span><br></pre></td></tr></table></figure>
<h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><pre><code>预设this指向
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// String &#123;&quot;bind&quot;&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(x + <span class="string">&quot;,&quot;</span> + y); <span class="comment">// 20,40</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> res = show.bind(<span class="string">&quot;bind&quot;</span>);</span><br><span class="line">show.bind(<span class="string">&quot;bind&quot;</span>)(<span class="number">20</span>, <span class="number">40</span>);</span><br></pre></td></tr></table></figure>



<h2 id="offset方法"><a href="#offset方法" class="headerlink" title="offset方法"></a>offset方法</h2><pre><code>offsetWidth     获取物体宽度的数值
offsetHeight    获取物体高度的数值
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #div1 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        background-color: red;</span><br><span class="line">        border: 1px solid black;</span><br><span class="line">        padding: 8px;</span><br><span class="line">        margin: 20px;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(getStyle(oDiv, <span class="string">&quot;width&quot;</span>)); <span class="comment">// 100px</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.offsetWidth); <span class="comment">// 118 =  width + border + padding</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv.offsetHeight); <span class="comment">// 118 =  width + border + padding</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跨浏览器的兼容</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">node, cssStyle</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> node.currentStyle ? node.currentStyle[cssStyle] : getComputedStyle(node)[cssStyle];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<pre><code>获取第一个有定位的父节点的实际距离
offsetLeft
offsetTop
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #div1 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: red;</span><br><span class="line">        margin: 30px;</span><br><span class="line">        position: relative;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #div2 &#123;</span><br><span class="line">        width: 100px;</span><br><span class="line">        height: 100px;</span><br><span class="line">        margin: 20px;</span><br><span class="line">        background-color: gray;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oDiv2 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div2&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(getStyle(oDiv2, <span class="string">&quot;left&quot;</span>)); <span class="comment">// auto 未设置</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv2.offsetLeft); <span class="comment">// 20</span></span><br><span class="line">        <span class="built_in">console</span>.log(oDiv2.offsetTop); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 跨浏览器的兼容</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">node, cssStyle</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> node.currentStyle ? node.currentStyle[cssStyle] : getComputedStyle(node)[cssStyle];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">&quot;div2&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="文档碎片"><a href="#文档碎片" class="headerlink" title="文档碎片"></a>文档碎片</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 创建10w个节点,添加到页面上</span></span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">&quot;test1&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(newDiv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">&quot;test1&quot;</span>);   <span class="comment">// test1: 106.8291015625 ms</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文档碎片操作</span></span><br><span class="line">    <span class="comment">// 先创建好10W个节点,将10W个节点插入到一个节点上,最后将这1个节点添加到页面上</span></span><br><span class="line">    <span class="built_in">console</span>.time(<span class="string">&quot;test2&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> node = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> newDiv = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        node.appendChild(newDiv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(node);</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">&quot;test2&quot;</span>); <span class="comment">// test2: 82.01708984375 ms</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><pre><code>事件类型的种类：
    一.鼠标事件(可以绑定)
        click       单击
        dblclick    双击
        mousemove   鼠标移动(会不停的触发)
        mousedown   鼠标按下
        mouseup     鼠标抬起

        // 经过子节点会重复触发 
        mouseover   鼠标移入
        mouseout    鼠标移出
        
        // 经过子节点不会重复触发。IE8以后才有。
        mouseenter  鼠标移入
        mouseleave  鼠标移出
    二.键盘事件(表单元素,全局window)
        keydown     键盘按下(如果按下不放手,会一直触发)
        keyup       键盘抬起
        keypress    键盘按下(只支持字符键)
    三.HTML事件
        window事件
            load        当页面加载完成以后会触发
            unload      当页面解构的时候触发(刷新页面,关闭当前页面) IE浏览器兼容
            scroll      页面滚动
            resize      窗口大小发生变化的时候触发
        表单事件
            blur        失去焦点
            focus       获取焦点
            select      在输入框内选中文本的时候触发
            change      对输入框的文本进行修改并且失去焦点的时候触发

            必须添加在form元素上
            submit
            reset
</code></pre>
<h3 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h3><pre><code>1.内联模式
2.外联模式/脚本模式(使用最多)

绑定事件格式：
    元素节点.on + 事件类型 = 匿名函数

    click   事件类型
    onclick 事件处理函数
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">btnClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;内联模式&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;外联模式&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button onclick=<span class="string">&quot;btnClick()&quot;</span>&gt;内联模式&lt;/button&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;外联模式&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    #div1 &#123;</span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        oBtn.ondblclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;双击&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        oBtn.onmouseover = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.style.backgroundColor = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        oBtn.onmouseout = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.style.backgroundColor = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        oBtn.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.innerHTML = <span class="string">&quot;按下&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        oBtn.onmouseup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.innerHTML = <span class="string">&quot;抬起&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oDiv = <span class="built_in">document</span>.getElementById(<span class="string">&quot;div1&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">        oDiv.onmousemove = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.innerHTML = i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* window.onkeydown = function () &#123;</span></span><br><span class="line"><span class="comment">        document.title = i++;</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    <span class="built_in">window</span>.onkeyup = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">&quot;抬起&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.onkeypress = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">&quot;onkeypress&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="HTML事件"><a href="#HTML事件" class="headerlink" title="HTML事件"></a>HTML事件</h3><h4 id="window事件"><a href="#window事件" class="headerlink" title="window事件"></a>window事件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        window.onscroll = function () &#123;</span></span><br><span class="line"><span class="comment">            document.title = i++;</span></span><br><span class="line"><span class="comment">        &#125; </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">document</span>.title = i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body style=<span class="string">&quot;height: 3000px;&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h4 id="表单事件"><a href="#表单事件" class="headerlink" title="表单事件"></a>表单事件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oInput1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;input1&quot;</span>);</span><br><span class="line">        <span class="comment">/* oInput1.onblur = function () &#123;</span></span><br><span class="line"><span class="comment">            this.value = &quot;失去焦点&quot;;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        oInput1.onfocus = function () &#123;</span></span><br><span class="line"><span class="comment">            this.value = &quot;获取焦点&quot;;</span></span><br><span class="line"><span class="comment">        &#125; */</span></span><br><span class="line"></span><br><span class="line">        oInput1.onselect = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;被选中了&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> oF1 = <span class="built_in">document</span>.getElementById(<span class="string">&quot;f1&quot;</span>);</span><br><span class="line">        oF1.onsubmit = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;提交&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        oF1.onreset = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;重置&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;默认文本&quot;</span> id=<span class="string">&quot;input1&quot;</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;&quot;</span> id=<span class="string">&quot;f1&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;reset&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><pre><code>事件绑定
    元素节点.on + 事件类型 = 匿名函数;
系统会在事件绑定一旦完成的时候,生成一个事件对象。
触发事件的时候,系统会自动去调用事件绑定的函数,将事件对象当做第一个参数传入。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// 事件对象获取的方式,固定写法。</span></span><br><span class="line">            <span class="keyword">var</span> e = ev || <span class="built_in">window</span>.event;</span><br><span class="line">            <span class="built_in">console</span>.log(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;按钮&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h3 id="事件对象属性"><a href="#事件对象属性" class="headerlink" title="事件对象属性"></a>事件对象属性</h3><pre><code>button 的属性
    0   左键
    1   滚轮
    2   右键

获取当前鼠标的位置
    clientX     clientY     原点位置：可视窗口的左上角为原点
    pageX       pageY       原点位置：整个页面的左上角(包含滚动的距离)
    screenX     screenY     原点位置：电脑屏幕的左上角

shiftKey    按下shift键,为true,默认为false
altKey
ctrlKey
metaKey     windows系统:按下windows键,为true。macos系统：按下command键,为true

keyCode     键码
which       
返回值：大写字母的ASCII码值。不区分大小写。
格式：var which = e.which || e.keyCode; 只在keydown下支持

charCode    字符码
which
返回值：字符串区分大小写,返回当前按下键对应字符的ASCII码值。
格式：var which = e.which || e.charCode; 只在keypress下支持,只支持字符键
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = ev || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="comment">// console.log(e.button);</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(e.clientX + <span class="string">&quot;,&quot;</span> + e.clientY);</span><br><span class="line">        <span class="built_in">console</span>.log(e.pageX + <span class="string">&quot;,&quot;</span> + e.pageY);</span><br><span class="line">        <span class="built_in">console</span>.log(e.screenX + <span class="string">&quot;,&quot;</span> + e.screenY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 进行组合,可形成快捷键的操作。</span></span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.onmousedown = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = ev || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> arr = [];</span><br><span class="line">        <span class="keyword">if</span> (e.shiftKey) &#123;</span><br><span class="line">            arr.push(<span class="string">&quot;shift&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e.altKey) &#123;</span><br><span class="line">            arr.push(<span class="string">&quot;alt&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e.ctrlKey) &#123;</span><br><span class="line">            arr.push(<span class="string">&quot;ctrl&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e.metaKey) &#123;</span><br><span class="line">            arr.push(<span class="string">&quot;windows&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        alert(arr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* window.onkeydown = function (ev) &#123;</span></span><br><span class="line"><span class="comment">        var e = ev || window.event;</span></span><br><span class="line"><span class="comment">        var which = e.which || e.keyCode;</span></span><br><span class="line"><span class="comment">        alert(which);</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">    <span class="built_in">window</span>.onkeypress = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> e = ev || <span class="built_in">window</span>.event;</span><br><span class="line">        <span class="keyword">var</span> which = e.which || e.charCode;</span><br><span class="line">        alert(which);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><pre><code>浏览器特点：事件流
    事件冒泡：由里向外逐级触发。
    事件捕获：由外向里逐级触发。

阻止事件冒泡：
    事件对象属性和方法：
    cancelBubble=true   stopPropagation()
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    div &#123;<span class="attr">padding</span>: 50px;&#125;</span><br><span class="line">    #div1 &#123;background-color: red;&#125;</span><br><span class="line">    #div2 &#123;background-color: blue;&#125;</span><br><span class="line">    #div3 &#123;background-color: orange;&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> aDivs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; aDivs.length; i++) &#123;</span><br><span class="line">            aDivs[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> e = ev || <span class="built_in">window</span>.event;</span><br><span class="line">                alert(<span class="built_in">this</span>.id);</span><br><span class="line"></span><br><span class="line">                stopBubble(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 阻止事件冒泡跨浏览器兼容</span></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">stopBubble</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (e.stopPropagation) &#123;</span><br><span class="line">                e.stopPropagation();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                e.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">        &lt;div id=<span class="string">&quot;div2&quot;</span>&gt;</span><br><span class="line">            &lt;div id=<span class="string">&quot;div3&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><pre><code>事件委托实现步骤：
    1.找到当前节点的父节点或者祖先节点。
    2.将事件添加到找到的这个父节点或者祖先节点上。
    3.找到触发对象,判断触发对象是否是想要的触发对象,进行后续的操作。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">&quot;ul1&quot;</span>);</span><br><span class="line">        oUl.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">ev</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> e = ev || <span class="built_in">window</span>.event;</span><br><span class="line">            <span class="keyword">var</span> target = e.target || <span class="built_in">window</span>.event.srcElement;</span><br><span class="line">            <span class="keyword">if</span> (target.nodeName.toLowerCase() == <span class="string">&quot;li&quot;</span>) &#123;</span><br><span class="line">                target.style.backgroundColor = <span class="string">&quot;red&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> oBtn = <span class="built_in">document</span>.getElementById(<span class="string">&quot;btn1&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">6</span>;</span><br><span class="line">        oBtn.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> newNode = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">            newNode.innerHTML = i++ * <span class="number">11111</span>;</span><br><span class="line">            oUl.appendChild(newNode);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt;新增节点&lt;/button&gt;</span><br><span class="line">    &lt;ul id=<span class="string">&quot;ul1&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">11111</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">22222</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">33333</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">44444</span>&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;<span class="number">55555</span>&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>
<h2 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h2><pre><code>低版本浏览器下不兼容
addEventListener(&quot;click&quot;)
    格式：node.addEventListener(&quot;click&quot;)
    功能：用于向指定元素添加事件句柄。
    参数：
        第一个参数：事件类型
        第二个参数：绑定函数
        第三个参数：布尔值 true(事件捕获)   false(事件冒泡,默认值)

removeEventListener()
    格式：node.removeEventListener
    功能：移除 addEventListener() 方法添加的事件句柄。
    参数：
        第一个参数：事件类型
        第二个参数：删除函数名字
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 浏览器兼容   attachEvent()和detachEvent()</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEvent</span>(<span class="params">node, evenType, funcName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.addEventListener) &#123;</span><br><span class="line">        node.addEventListener(evenType, funcName, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node.attachEvent(<span class="string">&quot;on&quot;</span> + evenType, funcName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeEvent</span>(<span class="params">node, evenType, funcName</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (node.removeEventListener) &#123;</span><br><span class="line">        node.removeEventListener(evenType, funcName);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        node.detachEvent(<span class="string">&quot;on&quot;</span> + evenType, funcName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> aBtns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line">        aBtns[<span class="number">1</span>].addEventListener(<span class="string">&quot;click&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">&quot;原有的函数&quot;</span>);</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">        aBtns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            aBtns[<span class="number">1</span>].addEventListener(<span class="string">&quot;click&quot;</span>, show, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        aBtns[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            aBtns[<span class="number">1</span>].removeEventListener(<span class="string">&quot;click&quot;</span>, show);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button&gt;添加函数&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line">    &lt;button&gt;删除函数&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
        <tag>BOM</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript 基础知识巩固笔记</title>
    <url>/2021/04/22/javascript/</url>
    <content><![CDATA[<h1 id="JS基础语法"><a href="#JS基础语法" class="headerlink" title="JS基础语法"></a>JS基础语法</h1><pre><code>JavaScript组成：
    1.ECMAScript 版本3,4,5,6,7
    2.DOM 文档
    3.BOM 浏览器对象
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">script标签属性：</span></span><br><span class="line"><span class="comment">    type=&quot;text/javascript&quot; 声明标签的文本格式(可省略)</span></span><br><span class="line"><span class="comment">    src=&quot;dome.js&quot; 引入外部的js文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    多个script标签执行顺序是自上而下的。</span></span><br><span class="line"><span class="comment">    一个script标签只能专心做一个事情,比如引入外部的script标签不能执行行内的代码。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;script src=<span class="string">&quot;dome.js&quot;</span>&gt;</span><br><span class="line">    alert(<span class="string">&#x27;执行不了这里的代码&#x27;</span>);</span><br><span class="line">&lt;/script&gt; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">alert(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">// 在页面上弹出警告框</span></span><br><span class="line">prompt(<span class="string">&quot;请输入&quot;</span>, <span class="string">&quot;xxx&quot;</span>); <span class="comment">// 在页面上弹出输入框 prompt(&quot;提示内容&quot;,&quot;默认内容&quot;);</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;hello world&#x27;</span>); <span class="comment">// 在浏览器调试控制台输出,用于代码调试。</span></span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">&#x27;&lt;h1&gt;hello world&lt;/h1&gt;&#x27;</span>); <span class="comment">// 在页面上输出内容,文本内有HTML代码会自动解析,输出纯文本html标签可使用转义字符。</span></span><br></pre></td></tr></table></figure>
<h1 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h1><p>概念：值不可以被修改的叫做常量，值可以被修改的叫做变量。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><pre><code>1.基本数据类型：
    数字 number 
    布尔值 boolean(true,false)
    字符串 String 所有带单引号或双引号的都叫字符串

2.复合/引用数据类型：
    数组 对象
3.特殊数据类型：
    null 空 
    undefined 未定义
    NaN (not a number)
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.声明变量：必须声明后才能使用。</span></span><br><span class="line"><span class="comment">// 2.关键字：系统征用的有特殊功能的单词叫做关键字,var 声明变量。</span></span><br><span class="line"><span class="comment">// 3.初始化：声明变量的时候,直接给这个变量赋值叫做初始化。</span></span><br><span class="line"><span class="comment">// 4.如果声明变量的时候,没有赋值给变量,系统默认赋值为undefined。</span></span><br><span class="line"><span class="comment">// 5.没有值赋值给变量的时候,默认赋值为null,可提高程序运行的效率。</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 关键字: typeof 常量/变量  功能：输出当前常量或者变量的数据类型。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="number">100</span>); <span class="comment">// number </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="keyword">typeof</span> <span class="literal">undefined</span>); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>
<h2 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h2><p>标识符：自定义的名字叫标识符，变量名也是标识符。<br>变量：弱引用类型,赋值成什么数据类型就是什么数据类型(不建议改变变量的数据类型,容易引起歧义)。</p>
<pre><code>命名规则：
    1.只能由数字,字母,下划线和美元符号($)组成。
    2.不能以数字开头。
    3.不能保留字和关键字。
    4.大小写敏感 age Age 是两个完全不同的变量。
    5.见名思意(使用英文全称)。
    6.驼峰命名法 className   下划线命名法 class_name
</code></pre>
<h1 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h1><pre><code>运算符
    1.算术运算符    + - * / %(取余)
    2.关系运算符    &gt; &lt; &gt;= &lt;= == != === !==
    3.逻辑运算符    &amp;&amp; || !
    4.一元运算符    ++ --
    5.赋值运算符:
        &lt;1&gt;基本赋值运算符 =
        &lt;2&gt;复合赋值运算符 += -= ... x=
    
表达式：任何数据和运算符组成的式子叫做表达式。
    1.表达式的值
    2.表达式的功能
</code></pre>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自动数据类型转换：不同数据类型之间没有办法进行运算,将数据转成同一数据类型,再进行计算。  </span></span><br><span class="line">    <span class="comment">// 1.其中有一个操作数必须是字符串,运算符必须是+号,别的数据类型转成字符串,进行字符串拼接。 </span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;hello&quot;</span> + <span class="number">100</span>); <span class="comment">// hello100</span></span><br><span class="line">    <span class="comment">// 2.任何数据和字符串做加法以外的操作,那么字符串要先转成数字再去进行运算。</span></span><br><span class="line">        <span class="comment">// &lt;1&gt;如果字符串是一个纯数字字符组成的字符串,转成对应的数字。</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">100</span> - <span class="string">&quot;20&quot;</span>); <span class="comment">// 80</span></span><br><span class="line">        <span class="comment">// &lt;2&gt;如果字符串中含有除数字以外的别的字符,转成NaN,NaN和任何数据运算都是NaN。</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">100</span> - <span class="string">&quot;20a&quot;</span>); <span class="comment">// NaN</span></span><br><span class="line">    <span class="comment">// 3.除字符串以外的数据,在进行算数运算的时候,先转成数字,在进行运算。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span> + <span class="literal">true</span>); <span class="comment">// 11 true =&gt; 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span> - <span class="literal">false</span>); <span class="comment">// 10 false =&gt; 0</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span> + <span class="literal">null</span>); <span class="comment">// 10 null=&gt; 0</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span> - <span class="literal">undefined</span>); <span class="comment">// NaN</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span> + <span class="literal">NaN</span>); <span class="comment">// NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 细节：</span></span><br><span class="line">    <span class="comment">// 计算机不会进行小数运算</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">0.8</span> - <span class="number">0.1</span>); <span class="comment">// 0.7000000000000001</span></span><br><span class="line">    <span class="comment">// 在JS中除数可以为0</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span> / <span class="number">0</span>); <span class="comment">// Infinity 无穷大</span></span><br><span class="line">    <span class="built_in">console</span>.log(-<span class="number">10</span> / <span class="number">0</span>); <span class="comment">// -Infinity 无穷小</span></span><br></pre></td></tr></table></figure>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 基本赋值运算符 = ：将=号右边的值,赋值给=号左边的变量。</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span> + <span class="number">20</span>;</span><br><span class="line">num = num + <span class="number">10</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num); <span class="comment">// 40</span></span><br><span class="line"><span class="comment">// 复合赋值运算符 += -= ... x=</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// num = num + 10;</span></span><br><span class="line">num += <span class="number">10</span>; <span class="comment">// 上述表达式的简写</span></span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure>
<h2 id="一元运算符"><a href="#一元运算符" class="headerlink" title="一元运算符"></a>一元运算符</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 自增 ++</span></span><br><span class="line"><span class="comment">    a++; </span></span><br><span class="line"><span class="comment">        值: ++后置,先取a的值作为a++表达式的值,然后再对a进行+1。 </span></span><br><span class="line"><span class="comment">        功能: 对原有的变量进行+1操作。</span></span><br><span class="line"><span class="comment">    ++a; </span></span><br><span class="line"><span class="comment">        值: ++前置,先对a进行+1操作,再取a的值作为++a表达式的值。</span></span><br><span class="line"><span class="comment">        功能: 对原有的变量进行+1操作。 */</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a++); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(++a); <span class="comment">// 7</span></span><br><span class="line"><span class="comment">/* 自减 --</span></span><br><span class="line"><span class="comment">    a--;</span></span><br><span class="line"><span class="comment">        值: --后置,先取a的值作为a--表达式的值,然后再对a进行-1。 </span></span><br><span class="line"><span class="comment">        功能: 对原有的变量进行-1操作。</span></span><br><span class="line"><span class="comment">    --a;</span></span><br><span class="line"><span class="comment">        值: --前置,先对a进行-1操作,再取a的值作为--a表达式的值。</span></span><br><span class="line"><span class="comment">        功能: 对原有的变量进行-1操作。 */</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a--); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(--a); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h2 id="强制数据类型转换"><a href="#强制数据类型转换" class="headerlink" title="强制数据类型转换"></a>强制数据类型转换</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一. Boolean()  将其他的数据类型强制转换为布尔值。</span></span><br><span class="line">    <span class="comment">// 1.数字 非0即真</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">3.14</span>)); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line">    <span class="comment">// 2.字符串 非空即真</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&quot;hello&quot;</span>)); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Boolean</span>(<span class="string">&quot;&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 二. Number()   将其他的数据类型强制转换为数字。只有纯数字字符组成的字符串转数字,才能转为数字,其他都为NaN。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&quot;100&quot;</span>)); <span class="comment">// 100</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&quot;100a&quot;</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="comment">// 三. parseInt() </span></span><br><span class="line">    <span class="comment">// 1.取整</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&quot;100&quot;</span>)); <span class="comment">// 100</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&quot;100a&quot;</span>)); <span class="comment">// 100</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&quot;10b0a&quot;</span>)); <span class="comment">// 10</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&quot;c10b0a&quot;</span>)); <span class="comment">// NaN</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(<span class="string">&quot;3.14&quot;</span>)); <span class="comment">// 3</span></span><br><span class="line">    <span class="comment">// 2.将别的进制转成十进制,必须传入字符串</span></span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">&quot;110100&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str1, <span class="number">2</span>)); <span class="comment">// 52</span></span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="string">&quot;64&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str2, <span class="number">8</span>)); <span class="comment">// 52</span></span><br><span class="line">    <span class="keyword">var</span> str3 = <span class="string">&quot;34&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str3, <span class="number">16</span>)); <span class="comment">// 52</span></span><br><span class="line"><span class="comment">// 四. parseFloat() 取浮点数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseFloat</span>(<span class="string">&quot;3.14&quot;</span>)); <span class="comment">// 3.14</span></span><br></pre></td></tr></table></figure>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><blockquote>
<p>&lt; &gt;= &lt;= == != === !==<br>值,绝对是布尔值。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.两个操作数都是数值,则数值比较。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">100</span> == <span class="number">100</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 2.两个操作数都是字符串,则比较两个字符串对应的字符编码值。</span></span><br><span class="line">    <span class="comment">// (1)如果是两个单个字符进行比较,直接比较字符的ASIIC码值。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;A&quot;</span> &lt; <span class="string">&quot;a&quot;</span>); <span class="comment">// true</span></span><br><span class="line">    <span class="comment">// (2)逐位进行比较,如果比较出大小,就直接得出结果。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;abcd&quot;</span> &gt; <span class="string">&quot;adc&quot;</span>); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 3.两个操作数有一个是数值,则将另一个转换为数值,再进行数值比较。</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span> == <span class="literal">true</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 4.在相等和不等的比较上,如果操作数是非数值,则遵循以下规则：</span></span><br><span class="line">    <span class="comment">// (1)一个操作数是布尔值,则比较之前将其转换为数值,false 转成 0, true 转成 1;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">0</span> == <span class="literal">false</span>); <span class="comment">// true</span></span><br><span class="line">    <span class="comment">// (2)一个操作数是字符串,则比较之前将其转换为数值再比较。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;10&quot;</span> == <span class="number">10</span>); <span class="comment">// true</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">10</span> == <span class="string">&quot;10a&quot;</span>); <span class="comment">// false</span></span><br><span class="line">    <span class="comment">// (3)一个操作数是NaN,则==返回 false,!=返回 true;并且NaN和自身不等;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="literal">NaN</span> == <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line">    <span class="comment">// (4)===恒等,必须数字和数据类型都相等,返回true,否则返回false。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;10&quot;</span> === <span class="number">10</span>); <span class="comment">// false</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="string">&quot;10&quot;</span>) === <span class="number">10</span>); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">null</span>)); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>(<span class="literal">undefined</span>)); <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><pre><code>与运算
    格式：表达式1 &amp;&amp; 表达式2
    规律：只有当两个表达式都为true的时候,整个表达式才为真。
    短路操作：当表达式1为false的时候,表达式2就不执行了,就直接得出结果为false。
或运算
    格式：表达式1 || 表达式2
    规律：只有当两个表达式都为false的时候,整个表达式才为假。
    短路操作：当表达式1为true的时候,表达式2就不执行了,就直接得出结果为true。
非运算
    格式：!表达式
    规律：先将表达式的值自动数据类型转换成布尔值,然后再取反。
</code></pre>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><img src="ysfyxj.PNG" alt="运算符优先级"></p>
<h1 id="流程控制语句"><a href="#流程控制语句" class="headerlink" title="流程控制语句"></a>流程控制语句</h1><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><p>顺序结构：代码自上而下顺序执行。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num1 = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> tmp = num1;</span><br><span class="line">num1 = num2;</span><br><span class="line">num2 = tmp;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;num1:&quot;</span> + num1 + <span class="string">&quot;,num2:&quot;</span> + num2);</span><br></pre></td></tr></table></figure>
<h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>分支结构/选择结构/条件结构：根据不同的条件,执行不同的操作。<br>if()里面可以写任何的表达式,都会自动数据类型转为布尔值。</p>
<h3 id="单分支语句"><a href="#单分支语句" class="headerlink" title="单分支语句"></a>单分支语句</h3><pre><code>语法：
    if(判断的条件)&#123;
        执行语句;(判断条件为true的时候执行)
    &#125;
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;这是一个偶数&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="双分支语句"><a href="#双分支语句" class="headerlink" title="双分支语句"></a>双分支语句</h3><pre><code>语法：
    if(判断的条件)&#123;
        执行语句;(判断条件为true的时候执行)
    &#125;else&#123;
        执行语句;(判断条件为false的时候执行)
    &#125;
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">7</span>;</span><br><span class="line"><span class="keyword">if</span> (num % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;这是一个偶数&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;这是一个奇数&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多分支语句"><a href="#多分支语句" class="headerlink" title="多分支语句"></a>多分支语句</h3><pre><code>语法：
    if(判断条件1)&#123;
        执行语句1;
    &#125;else if(判断条件2)&#123;
        执行语句2;
    &#125;else if(判断条件2)&#123;
        执行语句2;
    &#125;
    ...
    else&#123;
        执行语句;(上述所有条件不成立,执行这里)
    &#125;
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="number">99</span>;</span><br><span class="line"><span class="keyword">if</span> (score &gt; <span class="number">85</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (score &gt; <span class="number">95</span> &amp;&amp; score &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;奖励1000元&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt; <span class="number">90</span> &amp;&amp; score &lt;= <span class="number">95</span>) &#123;</span><br><span class="line">        alert(<span class="string">&quot;奖励800元&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">&quot;奖励300元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">75</span> &amp;&amp; score &lt;= <span class="number">85</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (score &gt;= <span class="number">60</span> &amp;&amp; score &lt; <span class="number">75</span>) &#123;</span><br><span class="line">    alert(<span class="string">&quot;及格&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;不及格&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><pre><code>语法：
    switch(表达式)&#123;
        case 常量1:
            执行语句1;
            break;
        case 常量2:
            执行语句2;
            break;
        ...
        default:
            当上述所有的case选项都匹配失败,执行这里。
            break;
    &#125;
执行过程：  
    1.计算switch()语句表达式的值
    2.和case后续的值进行匹配,匹配成功,执行对应case选项下的执行语句。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> grade = <span class="string">&quot;A&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (grade) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;A&quot;</span>:</span><br><span class="line">        alert(<span class="string">&quot;80~100&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;B&quot;</span>:</span><br><span class="line">        alert(<span class="string">&quot;70~79&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;C&quot;</span>:</span><br><span class="line">        alert(<span class="string">&quot;60~69&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;D&quot;</span>:</span><br><span class="line">        alert(<span class="string">&quot;&lt;60&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        alert(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> month = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">var</span> year = <span class="number">2000</span>;</span><br><span class="line">    <span class="keyword">switch</span> (month) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">            alert(<span class="string">&quot;31天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="keyword">if</span> (year % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; year % <span class="number">100</span> != <span class="number">0</span> || year % <span class="number">400</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                alert(<span class="string">&quot;29天&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">&quot;28天&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            alert(<span class="string">&quot;30天&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><pre><code>格式：
    表达式1 ? 表达式2 : 表达式3;
执行:
    1.先去判断表达式1是否为真
    2.表达式1为真,直接去执行表达式2
    3.表达式1为假,直接去执行表达式3
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">8</span>;</span><br><span class="line">num % <span class="number">2</span> == <span class="number">0</span> ? alert(<span class="string">&quot;偶数&quot;</span>) : alert(<span class="string">&quot;奇数&quot;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环结构：重复去做一件事情。</p>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><pre><code>格式：
    while(循环条件)&#123;
        循环语句;
    &#125;
执行：
    1.如果循环条件成立就执行循环语句,直到循环条件不成立为止。
    2.循环条件可以写任意的表达式,最后都会自动数据类型转换为布尔值。
    3.不能让循环条件永远成立,会造成死循环。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;hello world!&lt;/br&gt;&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do_while循环"></a>do_while循环</h3><pre><code>语法：
    do&#123;
        循环语句;
    &#125;while(循环条件);
执行：
    1.white循环：先判断循环条件。
    2.do_while循环：先去执行一次循环语句,再去判断循环条件。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    alert(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">while</span> (num &gt; <span class="number">5</span>);</span><br></pre></td></tr></table></figure>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><pre><code>格式：
    for(表达式1; 表达式2; 表达式3)&#123;
        执行语句;
    &#125;
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">// 功能：终止当前循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(i + <span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>; <span class="comment">// 跳过这次循环,直接进入下次循环</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(i + <span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="无参数无返回值"><a href="#无参数无返回值" class="headerlink" title="无参数无返回值"></a>无参数无返回值</h2><pre><code>函数声明
    语法：
        function 函数名() &#123;
            函数体(具体要执行的代码);
        &#125;
函数调用
    格式：函数名();
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&quot;hi!&lt;/br&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print();</span><br></pre></td></tr></table></figure>
<h2 id="有参数无返回值"><a href="#有参数无返回值" class="headerlink" title="有参数无返回值"></a>有参数无返回值</h2><pre><code>函数声明
    形参：形式上的参数。
    语法：
        function 函数名(形参1, 形参2...) &#123;
            函数体(具体要执行的代码);
        &#125;
函数调用
    实参：实际传入的参数。
    格式：函数名(实参1, 实参2...);
    传参：用实参给形参赋值。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="built_in">document</span>.write(<span class="string">&quot;hi!&lt;/br&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">print(<span class="number">6</span>);</span><br></pre></td></tr></table></figure>
<h2 id="有参数有返回值"><a href="#有参数有返回值" class="headerlink" title="有参数有返回值"></a>有参数有返回值</h2><pre><code>    return 关键字
    函数运行的时候,如果遇到return关键字,整个函数会终止。
    语法：
        function 函数名(形参1, 形参2...) &#123;
            函数体(具体要执行的代码);
            return 表达式;
        &#125;
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">5</span>, <span class="number">6</span>));</span><br></pre></td></tr></table></figure>
<h2 id="arguments"><a href="#arguments" class="headerlink" title="arguments"></a>arguments</h2><pre><code>每一个函数内部都有一个arguments,系统内置的。
arguments用来存储实际传入的参数。   
属性：
    arguments.length 输出当前里面存储的参数个数。   
    使用arguments[下标];访问某一个数据,下标是从0开始的。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        res += <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>));</span><br></pre></td></tr></table></figure>
<h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><pre><code>任何程序在执行的时候都要占用内存空间内。函数调用的时候也要去占用内存空间。
垃圾回收机制：
    调用函数的时候,系统会分配对应的空间给这个函数使用(空间大小一般由这个函数里声明的变量和形参决定)。
    当函数使用完毕以后,这个内存空间要释放,还给系统。

    在函数内部声明的变量和形参是属于当前函数的内存空间里的。

内存管理机制：
    在函数中声明的变量和形参,会随着函数的调用被创建,随着函数的调用结束而销毁。
    在函数中声明的变量和形参,有效范围是当前函数(当前函数的大括号),叫做局部作用域。

就近原则：
    离哪个作用域近,就使用哪个作用域内的同名变量。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明在全局的变量叫做全局变量</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    a++;</span><br><span class="line">    alert(a);</span><br><span class="line">&#125;</span><br><span class="line">show(); <span class="comment">// 3</span></span><br><span class="line">show(); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明在函数内部的变量叫做局部变量</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    a++;</span><br><span class="line">    alert(a);</span><br><span class="line">&#125;</span><br><span class="line">show(); <span class="comment">// 3</span></span><br><span class="line">show(); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// a is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 就近原则</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>, b = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">100</span>;</span><br><span class="line">    a += <span class="number">5</span>;</span><br><span class="line">    alert(a + <span class="string">&quot;,&quot;</span> + b);</span><br><span class="line">&#125;</span><br><span class="line">show(a); <span class="comment">// 15,100</span></span><br><span class="line"><span class="built_in">console</span>.log(a + <span class="string">&quot;,&quot;</span> + b); <span class="comment">// 10,20</span></span><br></pre></td></tr></table></figure>
<h2 id="函数递归"><a href="#函数递归" class="headerlink" title="函数递归"></a>函数递归</h2><pre><code>递归：一种编程的写法。
    1.函数自己调用自己。
    2.一般情况下有参数。
    3.一般情况下有return。
方法：
    1.先去找临界值,即无需计算,获得的值。
    2.找这一次和上一次的关系。
    3.假设当前函数已经可以使用,调用自身计算上一次。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum(n - <span class="number">1</span>) + n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">100</span>)); <span class="comment">// 5050</span></span><br></pre></td></tr></table></figure>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h2><pre><code>数组：用一个变量存储一堆数据的数据结构。数组的变量存储的是数组的地址。
声明数组：
    1.通过new创建数组。
    2.省略new运算符创建数组。
    注：上述两种方法,传入参数只有一个并且是数字的时候,是声明数组的长度。
    3.数组常量进行赋值[]。
数组的属性：
    数组.length   返回数组【元素】的个数。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">100</span>, <span class="literal">true</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="built_in">Array</span>(<span class="number">100</span>, <span class="literal">true</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">100</span>, <span class="literal">true</span>, <span class="string">&quot;hello&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="built_in">Array</span>(<span class="number">10</span>); <span class="comment">// 声明数组的长度为10</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">1</span>]); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr3.length); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<h2 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(arr[i] + <span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 快速遍历</span></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> arr) &#123;</span><br><span class="line">    <span class="built_in">document</span>.write(arr[i] + <span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h2><h3 id="push与pop"><a href="#push与pop" class="headerlink" title="push与pop"></a>push与pop</h3><pre><code>栈结构：    
    push
        格式：数组.push(参数1,参数2...);
        功能：给数组的末尾添加元素。
        返回值：新增元素以后数组的长度。
    pop
        格式：数组.pop()
        功能：从数组末尾取下一个元素。
        参数：无
        返回值：取下一个元素。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;广州&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.push(<span class="string">&quot;深圳&quot;</span>, <span class="string">&quot;重庆&quot;</span>, <span class="string">&quot;香港&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&quot;北京&quot;, &quot;上海&quot;, &quot;广州&quot;, &quot;深圳&quot;, &quot;重庆&quot;, &quot;香港&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;广州&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> res2 = arr2.pop();</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [&quot;北京&quot;, &quot;上海&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(res2); <span class="comment">// 广州</span></span><br></pre></td></tr></table></figure>
<h3 id="shift与unshift"><a href="#shift与unshift" class="headerlink" title="shift与unshift"></a>shift与unshift</h3><pre><code>队列结构：
    shift
        格式：数组.shift()
        参数：无
        功能：从数组的头部取下一个元素。
        返回值：取下的元素。
    unshift
        格式：数组.unshift(参数1,参数2...)
        功能：从数组的头部新增元素。
        返回值：新增元素以后数组的长度。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;广州&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.shift();</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&quot;上海&quot;, &quot;广州&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 北京</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;上海&quot;</span>, <span class="string">&quot;广州&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> res2 = arr2.unshift(<span class="string">&quot;深圳&quot;</span>, <span class="string">&quot;重庆&quot;</span>, <span class="string">&quot;香港&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr2); <span class="comment">// [&quot;深圳&quot;, &quot;重庆&quot;, &quot;香港&quot;, &quot;北京&quot;, &quot;上海&quot;, &quot;广州&quot;]</span></span><br><span class="line"><span class="built_in">console</span>.log(res2); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure>
<h3 id="concat与slice"><a href="#concat与slice" class="headerlink" title="concat与slice"></a>concat与slice</h3><pre><code>concat
    功能：拷贝原数组,生成新数组。
    格式：数组.concat(数组,数据...);
    返回值：合并成的新数组,原数组不会改变。
    注：就算传入是数组,数组元素中的元素要单独拆出来再进行合并。
slice
    格式：数组.slice(start, end);
    功能：可以基于当前数组获取指定区域元素[start, end],提取出元素生成新数组。
    返回值：生成的新数组,原数组不会发生任何的改变。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">50</span>, <span class="number">60</span>, <span class="number">70</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr1.concat(arr2, <span class="string">&quot;hello&quot;</span>, <span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [10, 20, 30, 50, 60, 70, &quot;hello&quot;, true]</span></span><br><span class="line"><span class="built_in">console</span>.log(newArr.length); <span class="comment">// 8</span></span><br><span class="line"><span class="built_in">console</span>.log(arr1); <span class="comment">// [10, 20, 30]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.slice(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [20, 30, 40]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [10, 20, 30, 40, 50, 60]</span></span><br></pre></td></tr></table></figure>
<h3 id="splice"><a href="#splice" class="headerlink" title="splice"></a>splice</h3><pre><code>splice
    格式：数组.splice(start, length, 数据1, 数据2...);
    功能：增加 删除 修改(先删除,后增加)
    参数：
        start 开始截取的位置
        length 截取的元素的长度
        第三个参数开始,在start位置,新增的元素。
    返回值：截取下来的元素组成的数组。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 增加</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [10, 20, &quot;hello&quot;, &quot;world&quot;, 30, 40, 50, 60]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.splice(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [10, 40, 50, 60]</span></span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// [20, 30]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.splice(<span class="number">2</span>, <span class="number">1</span>, <span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [10, 20, &quot;hello&quot;, 40, 50, 60]</span></span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// [30]</span></span><br></pre></td></tr></table></figure>
<h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><pre><code>join
    格式：数组.join(字符串);
    功能：将数组中的元素,用传入的拼接符,拼接成一个字符串。
    返回值：拼接好的字符串。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.join(<span class="string">&quot;==&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [10, 20, 30]</span></span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 10==20==30</span></span><br></pre></td></tr></table></figure>
<h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><pre><code>reverse
    功能：数组逆序
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="literal">true</span>, <span class="string">&quot;hello&quot;</span>, <span class="number">30</span>];</span><br><span class="line">arr.reverse();</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [30, &quot;hello&quot;, true]</span></span><br></pre></td></tr></table></figure>
<h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><pre><code>sort
    格式：数组.sort()
    功能：数组排序。默认从小到大排序,按照字符串排序。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数值大小排序</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">15</span>, <span class="number">25</span>, <span class="number">5</span>];</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span> (<span class="params">value1, value2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> value1 - value2;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 5, 10, 15, 20, 25]</span></span><br></pre></td></tr></table></figure>
<h2 id="ECMA5新增数组方法"><a href="#ECMA5新增数组方法" class="headerlink" title="ECMA5新增数组方法"></a>ECMA5新增数组方法</h2><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><pre><code>格式：数组.index(item, start);
参数：item(任意的数据)  start(下标,可以不传入,默认是0)
功能：在数组中查找第一次出现item元素下标,从start开始去查找
返回值：-1 没有查找到   &gt;=0 查找到的元素下标
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> index = arr.indexOf(<span class="number">20</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure>
<h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><pre><code>功能:循环数组
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* item:当前遍历到的元素 */</span></span><br><span class="line">    <span class="comment">/* index:当前遍历到元素的下标 */</span></span><br><span class="line">    <span class="comment">/* arr:遍历的数组本身 */</span></span><br><span class="line">    <span class="built_in">document</span>.write(item + <span class="string">&quot;,&quot;</span> + index + <span class="string">&quot;,&quot;</span> + arr + <span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><pre><code>功能：映射数组
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.map(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item * <span class="number">1.3</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [13, 26, 39, 52, 65]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure>
<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><pre><code>功能：过滤
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">20</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(newArr); <span class="comment">// [30, 40, 50]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure>
<h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><pre><code>功能：在数组中查找是否有符合条件的元素,有返回true,没有返回false。
短路操作：只要找到符合条件的元素,后面的循环就停止了。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.some(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">20</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure>
<h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><pre><code>功能：在数组中查找每一个元素是否有符合条件,符合返回true,不符合返回false。
短路操作：只要找到不符合条件的元素,后面的循环就停止了。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">item, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">    <span class="keyword">return</span> item &gt; <span class="number">20</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [10, 20, 30, 40, 50]</span></span><br></pre></td></tr></table></figure>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><pre><code>功能：归并数组
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line"><span class="keyword">var</span> res = arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">prev, next, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">/* prev 第一次是下标为0的元素,第二次开始,上一次遍历return的值 */</span></span><br><span class="line">    <span class="comment">/* next 从下标1开始,当前遍历到的元素 */</span></span><br><span class="line">    <span class="built_in">console</span>.log(prev + <span class="string">&quot;,&quot;</span> + next);</span><br><span class="line">    <span class="keyword">return</span> prev + next;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(res); <span class="comment">// 150</span></span><br></pre></td></tr></table></figure>
<h2 id="声明提升"><a href="#声明提升" class="headerlink" title="声明提升"></a>声明提升</h2><pre><code>内存分配：一次分配
预编译：在所有代码运行之前,计算机将代码从头到尾看一遍。将这个程序需要运行的空间一次性分配好。函数也会声明提升。
声明提升：在当前作用域,声明变量和函数,会直接提升在整个代码的最前面运行。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(num); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line">alert(num); <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line">show();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 省略var,直接去强制给一个变量赋值,这个变量会被JS强制声明为全局变量。不建议这样,这属于语法错误。</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    num = <span class="number">10</span>;</span><br><span class="line">    alert(num);</span><br><span class="line">&#125;</span><br><span class="line">test(); <span class="comment">// 10</span></span><br><span class="line">alert(num); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>数组存储数据,数组中每一个元素,元素可以是任意的数据类型。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>];</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="literal">true</span>, <span class="number">100</span>, <span class="string">&quot;hello&quot;</span>, arr1];</span><br><span class="line"><span class="built_in">console</span>.log(arr1[<span class="number">1</span>]); <span class="comment">// 20</span></span><br><span class="line"><span class="built_in">console</span>.log(arr[<span class="number">3</span>][<span class="number">1</span>]); <span class="comment">// 20</span></span><br></pre></td></tr></table></figure>
<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><pre><code>规则：前后两个数两两进行比较,如果符合交换条件就交换两个数位置。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 升序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSortAsc</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - (i + <span class="number">1</span>); j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">var</span> tmp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h3><pre><code>规则：选出一个位置,这个位置上的数,和后面所有的数进行比较,如果比较出大小就交换两个数位置。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 降序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">changSortDesc</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[i] &lt; arr[j]) &#123;</span><br><span class="line">                <span class="keyword">var</span> tmp = arr[i];</span><br><span class="line">                arr[i] = arr[j];</span><br><span class="line">                arr[j] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h1><pre><code>&quot;use strict&quot;
严格模式：写在哪个作用域下,在哪个作用域下生效。不要把严格模式写在全局。
</code></pre>
<h2 id="全局声明变量时-必须加var"><a href="#全局声明变量时-必须加var" class="headerlink" title="全局声明变量时,必须加var"></a>全局声明变量时,必须加var</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">10</span>; <span class="comment">// 必须加var</span></span><br><span class="line">&#125;</span><br><span class="line">show();</span><br><span class="line"><span class="built_in">console</span>.log(num);</span><br></pre></td></tr></table></figure>
<h2 id="this无法指向全局对象"><a href="#this无法指向全局对象" class="headerlink" title="this无法指向全局对象"></a>this无法指向全局对象</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="number">10</span>; <span class="comment">// 报错,因为this是undefined</span></span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure>
<h2 id="函数内不能出现重名的属性"><a href="#函数内不能出现重名的属性" class="headerlink" title="函数内不能出现重名的属性"></a>函数内不能出现重名的属性</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">num1, num1, num2</span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num1 + <span class="string">&quot;,&quot;</span> + num2);</span><br><span class="line">&#125;</span><br><span class="line">show(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>); <span class="comment">// 报错,name出现重复</span></span><br></pre></td></tr></table></figure>
<h2 id="arguments对象不允许被动态改变"><a href="#arguments对象不允许被动态改变" class="headerlink" title="arguments对象不允许被动态改变"></a>arguments对象不允许被动态改变</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    num1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(num1 + <span class="string">&quot;,&quot;</span> + num2); <span class="comment">// hello,20</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="string">&quot;,&quot;</span> + <span class="built_in">arguments</span>[<span class="number">1</span>]); <span class="comment">// 10,20</span></span><br><span class="line">&#125;</span><br><span class="line">show(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<h2 id="新增保留字"><a href="#新增保留字" class="headerlink" title="新增保留字"></a>新增保留字</h2><p>implements, interface, let , package, private, protected, public, static, yield</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">package</span>(<span class="params">protected</span>) </span>&#123; <span class="comment">// 语法错误</span></span><br><span class="line">    <span class="keyword">var</span> implements; <span class="comment">// 语法错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="字符串声明"><a href="#字符串声明" class="headerlink" title="字符串声明"></a>字符串声明</h2><pre><code>概念：所有带单引号或者双引号的都叫做字符串。
字符串声明：
    1.通过new运算符去声明字符串。
    2.省略new声明字符串。
    3.字符串常量赋值。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str1 + <span class="number">20</span>); <span class="comment">// 10020</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str1); <span class="comment">// object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str2 = <span class="built_in">String</span>(<span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str2 + <span class="number">20</span>); <span class="comment">// 10020</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str2); <span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">&quot;100&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str3); <span class="comment">// 100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> str3); <span class="comment">// string</span></span><br></pre></td></tr></table></figure>
<h2 id="访问字符串的字符"><a href="#访问字符串的字符" class="headerlink" title="访问字符串的字符"></a>访问字符串的字符</h2><pre><code>格式：字符串.length   访问字符串中字符的个数
中文 utf-8(三个字符表示一个汉字) gbk(两个字符表示一个汉字) 在计数的时候都是当做一个汉字计数。

访问字符串中单个字符：
    字符串.charAt(下标)
    字符串[下标]

    字符串是只读,字符串一旦被声明就没有办法被修改,如果要修改字符串,只能将原字符串销毁,重新生成新的字符串。
    在JS中,字符串既是基本数据类型,又是复合数据类型。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello北京&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.length); <span class="comment">// 7</span></span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">4</span>)); <span class="comment">// o</span></span><br><span class="line"><span class="built_in">console</span>.log(str[<span class="number">4</span>]); <span class="comment">// o</span></span><br></pre></td></tr></table></figure>
<h2 id="字符串遍历"><a href="#字符串遍历" class="headerlink" title="字符串遍历"></a>字符串遍历</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello北京&quot;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(str[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h2><pre><code>toLowerCase()   转成全小写
toUpperCase()   转成全大写

在document.write()中使用,用特殊的样式输出该字符串。
big()       用大号字体显示字符串
blink()     显示闪动字符串(IE下无效)
bold()      使用粗体显示字符串
fixed()     以打字机文本显示字符串
strike()    使用删除线来显示字符串
fontcolor() 使用指定颜色来显示字符串
fontsize()  使用指定尺寸来显示字符串
link()      将字符串显示为链接
sub()       把字符串显示为下标
sup()       把字符串显示为上标
</code></pre>
<h3 id="ASCII码值字符串"><a href="#ASCII码值字符串" class="headerlink" title="ASCII码值字符串"></a>ASCII码值字符串</h3><pre><code>charCodeAt
    格式：字符串.charCodeAt(下标);
    功能：访问字符串中对应下标字符的ASCII码值。
String.fromCharCode
    格式：String.fromCharCode(码值1,码值2...);
    功能：将传入的ASCII码值转成对应的字符。
    返回值：组成的字符串。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">1</span>)); <span class="comment">// 101</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="built_in">String</span>.fromCharCode(<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str1); <span class="comment">// abcd</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><pre><code>indexOf
    格式：supStr.indexOf(subStr, start);
    参数：subStr(查找的字符串),start(从哪个下标开始去查找,如果不传入,默认从0开始)
    功能：在supStr中查找subStr第一次出现的位置,从start这个位置开始查找。
    返回值：-1 说明没有查找到
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> supStr = <span class="string">&quot;abcabcabc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> subStr = <span class="string">&quot;abcd&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> index = supStr.indexOf(subStr, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// -1</span></span><br></pre></td></tr></table></figure>
<pre><code>lastIndexOf
    格式：supStr.lastIndexOf(subStr,start);
    功能：在supStr中查找subStr最后一次出现的位置。
    参数：第二个参数是开始查找的位置,查找的下标是从右往左的。
    返回值：-1 没有查找到
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> supStr = <span class="string">&quot;abcabcabc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> subStr = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> index = supStr.lastIndexOf(subStr);</span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<pre><code>search
    格式：supStr.search(subStr);
    参数：字符串/正则表达式
    功能：在supStr中查找subStr最后一次出现的位置。
    返回值：-1 没有查找到
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> supStr = <span class="string">&quot;Abcabcabc&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> subStr = <span class="regexp">/abc/i</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> index = supStr.search(subStr);</span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串提取"><a href="#字符串提取" class="headerlink" title="字符串提取"></a>字符串提取</h3><pre><code>substring
    格式：字符串.substring(start, end);
    功能：将字符串中提取start到end这部分字符,生成一个新字符串。
    返回值：生成的新字符串。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.substring(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr); <span class="comment">// ell</span></span><br></pre></td></tr></table></figure>
<pre><code>substr
    格式：字符串.substr(start, length);
    返回值：新生成的字符串
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.substr(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr); <span class="comment">// ello</span></span><br></pre></td></tr></table></figure>
<pre><code>slice(数组的方法)
    格式：字符串.slice(start,end)
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.slice(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr); <span class="comment">// ell</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串替换"><a href="#字符串替换" class="headerlink" title="字符串替换"></a>字符串替换</h3><pre><code>replace
    格式：supStr.replace(oldStr, newStr);
    功能：用newStr将oldStr替换掉,生成新字符串。
    参数：第一个参数传入的是字符串只能替换一次。如果传入的是正则表达式可替换多个。
    返回值：替换成的新字符串。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;how are aRe are you&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.replace(<span class="regexp">/are/gi</span>, <span class="string">&quot;old are&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr); <span class="comment">// how old are old are old are you</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串分割"><a href="#字符串分割" class="headerlink" title="字符串分割"></a>字符串分割</h3><pre><code>split
    格式：字符串.split(分割符, length);
    功能：用分割符对原字符串,进行字符串分割,将分割完毕后的子串,放在数组中返回。
    参数：分割符(对原字符串进行分割),length(控制返回的数组的元素格式)。
    返回值：数组
    注：
        1.相邻的两个分割符,会产生空字符串。
        2.分割符是空字符串&quot;&quot;,直接将每一个字符,单独分割成子串,放在数组中返回。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;how are you&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr); <span class="comment">// [&quot;how&quot;, &quot;are&quot;, &quot;you&quot;]</span></span><br></pre></td></tr></table></figure>
<h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><pre><code>concat  字符串拼接
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> newStr = str.concat(<span class="string">&quot;world&quot;</span>, <span class="number">100</span>);</span><br><span class="line"><span class="built_in">console</span>.log(newStr); <span class="comment">// helloworld100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newStr1 = str + <span class="string">&quot;world&quot;</span> + <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(newStr1); <span class="comment">// helloworld100</span></span><br></pre></td></tr></table></figure>
<h1 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h1><pre><code>在JS中一切皆对象。
思想：
    面向过程编程思想：只考虑数学逻辑。
    面向对象编程思想：直接将生活逻辑映射到程序中。
        1.分析有哪些实体。
        2.设计实体属性和功能。
        3.实体之间相互作用。
语法：      (在JavaScript中没有类这个概念,只有对象,ECMA6新增了类的概念)
    类：一类具有相同特征事物的抽象概念。
    对象：具体某一个个体,唯一的实例。
</code></pre>
<h2 id="声明对象"><a href="#声明对象" class="headerlink" title="声明对象"></a>声明对象</h2><pre><code>1.通过new运算符声明对象。
2.通过省略new。
3.对象常量赋值(使用大括号&#123;&#125;,代表对象)。
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 声明对象</span></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>();</span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值方法</span></span><br><span class="line">obj3.username = <span class="string">&quot;孙悟空&quot;</span>;</span><br><span class="line">obj3[<span class="string">&quot;age&quot;</span>] = <span class="number">18</span>; <span class="comment">// []里填写的必须是字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj3.username); <span class="comment">// 孙悟空</span></span><br><span class="line"><span class="built_in">console</span>.log(obj3.age); <span class="comment">// 18</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* obj3.show = function () &#123;</span></span><br><span class="line"><span class="comment">    alert(&quot;我的名字叫&quot; + obj3.username + &quot;,今年&quot; + obj3.age + &quot;岁&quot;);</span></span><br><span class="line"><span class="comment">&#125; */</span></span><br><span class="line">obj3[<span class="string">&quot;show&quot;</span>] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;我的名字叫&quot;</span> + obj3.username + <span class="string">&quot;,今年&quot;</span> + obj3.age + <span class="string">&quot;岁&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">obj3.show(); <span class="comment">// 我的名字叫孙悟空,今年18岁</span></span><br><span class="line">obj3[<span class="string">&quot;show&quot;</span>](); <span class="comment">// 我的名字叫孙悟空,今年18岁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过对象常量赋值</span></span><br><span class="line"><span class="keyword">var</span> obj4 = &#123;</span><br><span class="line">    username: <span class="string">&quot;哪吒&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span>: <span class="number">18</span>,</span><br><span class="line">    show: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;我的名字叫&quot;</span> + obj4.username + <span class="string">&quot;,今年&quot;</span> + obj4.age + <span class="string">&quot;岁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj4.show(); <span class="comment">// 我的名字叫哪吒,今年18岁</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// delete 关键字  删除对象的属性或者方法</span></span><br><span class="line"><span class="keyword">delete</span> obj3.username;</span><br><span class="line"><span class="built_in">console</span>.log(obj3.username); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><pre><code>常用的数学运算函数：
    Math.random()           返回0-1之间的随机数
    Math.max(num1, num2)    返回较大的数
    Math.min(num1, num2)    返回较小的数
    Math.abs(num)           绝对值
    Math.round()            四舍五入(成整数,只看小数后一位)
    Math.ceil(19.3)         向上取整
    Math.floor(11.8)        向下取整
    Math.pow(x,y)           x的y次方
    Math.sqrt(num)          开平方           
    Math.sin(弧度)          正弦
    Math.cos(弧度)          余弦
    Math.PI = 180弧度
    1弧度 = Math.PI / 180;
</code></pre>
<h2 id="日期对象"><a href="#日期对象" class="headerlink" title="日期对象"></a>日期对象</h2><pre><code>声明：
    1.没有传入参数,默认当前系统时间
    2.传入参数
        &quot;2021-06-20&quot;
        &quot;2021/06/20&quot;
        按照顺序,分别传入参数 年 月 日 时 分 秒 毫秒
        在国外月份是从0开始数 0~11
        直接传入毫秒数 1秒=1000毫秒 (已1970年1月1日 0:0:0 为参照时间点去进行换算)
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// Sun Jun 20 2021 22:53:17 GMT+0800 (GMT+08:00)</span></span><br></pre></td></tr></table></figure>
<pre><code>日期对象方法：
    console.log(d.toDateString()); // 以特定的格式显示星期几,月,日和年。
    console.log(d.toTimeString()); // 以特定的格式显示时,分,秒和时区。
    console.log(d.toLocaleDateString()); // 以特定的格式显示星期几,月,日和年。
    console.log(d.toLocaleTimeString()); // 以特定的格式显示时,分,秒和时区。
    console.log(d.toUTCString()); // 以特定的格式显示完整的UTC日期。
    console.log(Date.parse(d));  // 将日期对象转成毫秒数

set/get即能获取又能够赋值,get只能获取
    set/getDate()       从Date对象中返回一个月中某一天(1~30)
    getDay()            从Date对象返回一周中的某一天(0~6)
    set/getMonth()      从Date对象中返回月份(0~11)
    set/getFullYear()   从Date对象以四位数返回年份
    set/getHours()      返回Date对象的小时(0~23)
    set/getMinutes()    返回Date对象的分钟(0~59)
    set/getSeconds()    返回Date对象的秒数(0~59)
    set/getMilliseconds()   返回Date对象的毫秒
    set/getTime()       返回1970年1月1日至今的毫秒数
    getTimezoneOffset() 返回本地时间与格林威治标准时间(GMT)的分钟差
    set/getUTCDate()    根据世界时从Date对象返回月中的一天(1~31)
    getUTCDay()         根据世界时从Date对象返回周中的一天(0~6)
</code></pre>
<h2 id="对象遍历"><a href="#对象遍历" class="headerlink" title="对象遍历"></a>对象遍历</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    username: <span class="string">&quot;蜘蛛侠&quot;</span>,</span><br><span class="line">    age: <span class="number">18</span>,</span><br><span class="line">    sex: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> person) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;对象遍历&quot;</span> + i + <span class="string">&quot;,&quot;</span> + person[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h1><pre><code>格式：var timer = setInterval(函数,毫秒数);
功能：每隔对应的毫秒数,执行一次传入的函数。
返回值：启动定时器的,系统分配的编号。

clearInterval(timer); 取消定时器

var timer = setInterval(匿名函数, 毫秒数);
var timer = setInterval(function()&#123;
    执行代码;
&#125;, 毫秒数);
</code></pre>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.write(i++ + <span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
